{"org": "seleniumhq", "repo": "selenium", "number": 1014, "title": "rb capabilites spec now expects MicrosoftEdge instead of edge", "body": "Update spec for https://github.com/SeleniumHQ/selenium/issues/1002, which changed the browser_name from\n\"edge\" to \"MicrosoftEdge\".\n\nToday is my first time checking out the selenium code.\n\nRunning the `/go test_rb` produced this one failure:\n\n```\n  1) Selenium::WebDriver::Remote::Capabilities has default capabilities for Edge\n     Failure/Error: caps.browser_name.should == \"edge\"\n       expected: \"edge\"\n            got: \"MicrosoftEdge\" (using ==)\n     # ./rb/spec/unit/selenium/webdriver/remote/capabilities_spec.rb:40:in `block (2 levels) in <module:Remote>'\n```\n\nIt seems to have been introduced with: https://github.com/SeleniumHQ/selenium/commit/574b37cd7e5006aa8a8e183456a6dd1c4ceabe5a .\nfyi @lukeis\n\nI signed the CLA.\n", "state": "closed", "base": {"label": "SeleniumHQ:master", "ref": "master", "sha": "6d92e12a7ea00f81cd5d2503068117824aefa144"}, "resolved_issues": [], "fix_patch": "", "test_patch": "diff --git a/rb/spec/unit/selenium/webdriver/remote/capabilities_spec.rb b/rb/spec/unit/selenium/webdriver/remote/capabilities_spec.rb\nindex 0a8a0da7cb..846117df0e 100644\n--- a/rb/spec/unit/selenium/webdriver/remote/capabilities_spec.rb\n+++ b/rb/spec/unit/selenium/webdriver/remote/capabilities_spec.rb\n@@ -37,7 +37,7 @@ module Remote\n \n         it \"has default capabilities for Edge\" do\n           caps = Capabilities.edge\n-          caps.browser_name.should == \"edge\"\n+          caps.browser_name.should == \"MicrosoftEdge\"\n         end\n \n         it \"has default capabilities for Firefox\" do\n", "instance_id": "seleniumhq__selenium-1014", "fixed_tests": {}, "failed_tests": [], "skipped_tests": [], "run_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "test_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "fix_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "f2p_tests": {}, "p2p_tests": {}, "s2p_tests": {}, "n2p_tests": {}}
{"org": "seleniumhq", "repo": "selenium", "number": 1042, "title": "rb - update file loading to allow tests to be run from relative directories", "body": "This came up as an issue at the selenium conference workshop when the Ruby group couldn't find an easy way to run a single ruby test in the project.\n\nWith this code we can run specific spec files within the selenium/rb directory like this:\nexport WD_SPEC_DRIVER=chrome; rspec spec/integration/selenium/webdriver/driver_spec.rb\nThis also allows running from within Rubymine (importantly including using the debugger).\n\n@p0deje - I changed spec_support.rb to require_relative instead of autoload for RackServer. I didn't dig into why RackServer needs to be lazy loaded; I'm guessing it's because we don't need it if we're just running unit tests. That doesn't seem to be much overhead, but if the \"right answer\" to this is easy and better, let me know, otherwise let's merge this.\n\n(also, I ran ./go test_rb on my mac with this code and everything passed).\n", "state": "closed", "base": {"label": "SeleniumHQ:master", "ref": "master", "sha": "aae52326a4bc54e497f814f37759dd5a4a75a7a2"}, "resolved_issues": [], "fix_patch": "", "test_patch": "diff --git a/rb/spec/integration/selenium/webdriver/app_cache_spec.rb b/rb/spec/integration/selenium/webdriver/app_cache_spec.rb\nindex ce4ef41c05..f2129f8965 100644\n--- a/rb/spec/integration/selenium/webdriver/app_cache_spec.rb\n+++ b/rb/spec/integration/selenium/webdriver/app_cache_spec.rb\n@@ -17,7 +17,7 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-require File.expand_path(\"../spec_helper\", __FILE__)\n+require_relative 'spec_helper'\n \n \n module Selenium::WebDriver::DriverExtensions\n\ndiff --git a/rb/spec/integration/selenium/webdriver/driver_spec.rb b/rb/spec/integration/selenium/webdriver/driver_spec.rb\nindex 1901b28510..0fae2e4f8e 100644\n--- a/rb/spec/integration/selenium/webdriver/driver_spec.rb\n+++ b/rb/spec/integration/selenium/webdriver/driver_spec.rb\n@@ -17,7 +17,7 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-require File.expand_path(\"../spec_helper\", __FILE__)\n+require_relative 'spec_helper'\n \n describe \"Driver\" do\n   it \"should get the page title\" do\n\ndiff --git a/rb/spec/integration/selenium/webdriver/element_spec.rb b/rb/spec/integration/selenium/webdriver/element_spec.rb\nindex 63552fbe3d..ae74f6b1d9 100644\n--- a/rb/spec/integration/selenium/webdriver/element_spec.rb\n+++ b/rb/spec/integration/selenium/webdriver/element_spec.rb\n@@ -17,7 +17,7 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-require File.expand_path(\"../spec_helper\", __FILE__)\n+require_relative 'spec_helper'\n \n describe \"Element\" do\n \n\ndiff --git a/rb/spec/integration/selenium/webdriver/error_spec.rb b/rb/spec/integration/selenium/webdriver/error_spec.rb\nindex 1c8b53c757..e2428999a4 100644\n--- a/rb/spec/integration/selenium/webdriver/error_spec.rb\n+++ b/rb/spec/integration/selenium/webdriver/error_spec.rb\n@@ -17,7 +17,7 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-require File.expand_path(\"../spec_helper\", __FILE__)\n+require_relative 'spec_helper'\n \n describe Selenium::WebDriver::Error do\n \n\ndiff --git a/rb/spec/integration/selenium/webdriver/keyboard_spec.rb b/rb/spec/integration/selenium/webdriver/keyboard_spec.rb\nindex 0baf28a899..54b77cf4a4 100644\n--- a/rb/spec/integration/selenium/webdriver/keyboard_spec.rb\n+++ b/rb/spec/integration/selenium/webdriver/keyboard_spec.rb\n@@ -17,7 +17,7 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-require File.expand_path(\"../spec_helper\", __FILE__)\n+require_relative 'spec_helper'\n \n module Selenium\n   module WebDriver\n\ndiff --git a/rb/spec/integration/selenium/webdriver/location_spec.rb b/rb/spec/integration/selenium/webdriver/location_spec.rb\nindex b61456f7d9..5468a81af9 100644\n--- a/rb/spec/integration/selenium/webdriver/location_spec.rb\n+++ b/rb/spec/integration/selenium/webdriver/location_spec.rb\n@@ -17,7 +17,7 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-require File.expand_path(\"../spec_helper\", __FILE__)\n+require_relative 'spec_helper'\n \n module Selenium::WebDriver::DriverExtensions\n   describe HasLocation do\n\ndiff --git a/rb/spec/integration/selenium/webdriver/mouse_spec.rb b/rb/spec/integration/selenium/webdriver/mouse_spec.rb\nindex 5eb660ed0b..dc44a23704 100644\n--- a/rb/spec/integration/selenium/webdriver/mouse_spec.rb\n+++ b/rb/spec/integration/selenium/webdriver/mouse_spec.rb\n@@ -17,7 +17,7 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-require File.expand_path(\"../spec_helper\", __FILE__)\n+require_relative 'spec_helper'\n \n module Selenium\n   module WebDriver\n\ndiff --git a/rb/spec/integration/selenium/webdriver/navigation_spec.rb b/rb/spec/integration/selenium/webdriver/navigation_spec.rb\nindex 7ed9cd9c15..9e810d459f 100644\n--- a/rb/spec/integration/selenium/webdriver/navigation_spec.rb\n+++ b/rb/spec/integration/selenium/webdriver/navigation_spec.rb\n@@ -17,7 +17,7 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-require File.expand_path(\"../spec_helper\", __FILE__)\n+require_relative 'spec_helper'\n \n describe \"Navigation\" do\n   let(:wait) { Selenium::WebDriver::Wait.new :timeout => 10 }\n\ndiff --git a/rb/spec/integration/selenium/webdriver/network_connection_spec.rb b/rb/spec/integration/selenium/webdriver/network_connection_spec.rb\nindex d53879b8f3..8555059f12 100644\n--- a/rb/spec/integration/selenium/webdriver/network_connection_spec.rb\n+++ b/rb/spec/integration/selenium/webdriver/network_connection_spec.rb\n@@ -17,7 +17,7 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-require File.expand_path(\"../spec_helper\", __FILE__)\n+require_relative 'spec_helper'\n \n module Selenium::WebDriver::DriverExtensions\n   describe HasNetworkConnection do\n\ndiff --git a/rb/spec/integration/selenium/webdriver/options_spec.rb b/rb/spec/integration/selenium/webdriver/options_spec.rb\nindex a0307c50a6..32b36a766c 100644\n--- a/rb/spec/integration/selenium/webdriver/options_spec.rb\n+++ b/rb/spec/integration/selenium/webdriver/options_spec.rb\n@@ -17,7 +17,7 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-require File.expand_path(\"../spec_helper\", __FILE__)\n+require_relative 'spec_helper'\n \n module Selenium\n   module WebDriver\n\ndiff --git a/rb/spec/integration/selenium/webdriver/spec_helper.rb b/rb/spec/integration/selenium/webdriver/spec_helper.rb\nindex 8fc4a84b66..3d0a562a4f 100644\n--- a/rb/spec/integration/selenium/webdriver/spec_helper.rb\n+++ b/rb/spec/integration/selenium/webdriver/spec_helper.rb\n@@ -23,7 +23,7 @@\n require 'ci/reporter/rspec'\n \n require 'selenium-webdriver'\n-require 'selenium/webdriver/spec_support'\n+require_relative 'spec_support'\n \n include Selenium\n \n\ndiff --git a/rb/spec/integration/selenium/webdriver/spec_support.rb b/rb/spec/integration/selenium/webdriver/spec_support.rb\nindex 47a77298ff..5fc3df5242 100644\n--- a/rb/spec/integration/selenium/webdriver/spec_support.rb\n+++ b/rb/spec/integration/selenium/webdriver/spec_support.rb\n@@ -19,14 +19,7 @@\n \n require 'pathname'\n require 'selenium/server'\n-require 'selenium/webdriver/spec_support/test_environment'\n-require 'selenium/webdriver/spec_support/guards'\n-require 'selenium/webdriver/spec_support/helpers'\n-\n-module Selenium\n-  module WebDriver\n-    module SpecSupport\n-      autoload :RackServer, 'selenium/webdriver/spec_support/rack_server'\n-    end\n-  end\n-end\n\\ No newline at end of file\n+require_relative 'spec_support/test_environment'\n+require_relative 'spec_support/guards'\n+require_relative 'spec_support/helpers'\n+require_relative 'spec_support/rack_server'\n\ndiff --git a/rb/spec/integration/selenium/webdriver/sql_database_spec.rb b/rb/spec/integration/selenium/webdriver/sql_database_spec.rb\nindex 0dc6da9d43..636c8855f9 100644\n--- a/rb/spec/integration/selenium/webdriver/sql_database_spec.rb\n+++ b/rb/spec/integration/selenium/webdriver/sql_database_spec.rb\n@@ -17,7 +17,7 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-require File.expand_path(\"../spec_helper\", __FILE__)\n+require_relative 'spec_helper'\n \n describe \"Driver\" do\n   context \"sql database\" do\n\ndiff --git a/rb/spec/integration/selenium/webdriver/storage_spec.rb b/rb/spec/integration/selenium/webdriver/storage_spec.rb\nindex 0b42050c97..a6bf933935 100644\n--- a/rb/spec/integration/selenium/webdriver/storage_spec.rb\n+++ b/rb/spec/integration/selenium/webdriver/storage_spec.rb\n@@ -17,7 +17,7 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-require File.expand_path(\"../spec_helper\", __FILE__)\n+require_relative 'spec_helper'\n \n module Selenium::WebDriver::DriverExtensions\n   describe HasWebStorage do\n\ndiff --git a/rb/spec/integration/selenium/webdriver/target_locator_spec.rb b/rb/spec/integration/selenium/webdriver/target_locator_spec.rb\nindex 2fe9246402..922d4999c0 100644\n--- a/rb/spec/integration/selenium/webdriver/target_locator_spec.rb\n+++ b/rb/spec/integration/selenium/webdriver/target_locator_spec.rb\n@@ -17,7 +17,7 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-require File.expand_path(\"../spec_helper\", __FILE__)\n+require_relative 'spec_helper'\n \n describe \"Selenium::WebDriver::TargetLocator\" do\n   let(:wait) { Selenium::WebDriver::Wait.new }\n\ndiff --git a/rb/spec/integration/selenium/webdriver/timeout_spec.rb b/rb/spec/integration/selenium/webdriver/timeout_spec.rb\nindex e42676a468..9fefa625b3 100644\n--- a/rb/spec/integration/selenium/webdriver/timeout_spec.rb\n+++ b/rb/spec/integration/selenium/webdriver/timeout_spec.rb\n@@ -17,7 +17,7 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-require File.expand_path(\"../spec_helper\", __FILE__)\n+require_relative 'spec_helper'\n \n describe \"Timeouts\" do\n \n\ndiff --git a/rb/spec/integration/selenium/webdriver/touch_spec.rb b/rb/spec/integration/selenium/webdriver/touch_spec.rb\nindex 3d2720231f..6b327d76a2 100644\n--- a/rb/spec/integration/selenium/webdriver/touch_spec.rb\n+++ b/rb/spec/integration/selenium/webdriver/touch_spec.rb\n@@ -17,7 +17,7 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-require File.expand_path(\"../spec_helper\", __FILE__)\n+require_relative 'spec_helper'\n \n module Selenium::WebDriver::DriverExtensions\n   describe HasTouchScreen do\n\ndiff --git a/rb/spec/integration/selenium/webdriver/window_spec.rb b/rb/spec/integration/selenium/webdriver/window_spec.rb\nindex 97513cfbff..3faf81f1d9 100644\n--- a/rb/spec/integration/selenium/webdriver/window_spec.rb\n+++ b/rb/spec/integration/selenium/webdriver/window_spec.rb\n@@ -17,7 +17,7 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-require File.expand_path(\"../spec_helper\", __FILE__)\n+require_relative 'spec_helper'\n \n module Selenium\n   module WebDriver\n\ndiff --git a/rb/spec/integration/selenium/webdriver/zipper_spec.rb b/rb/spec/integration/selenium/webdriver/zipper_spec.rb\nindex 9932cdf1c7..64f0fbaa67 100644\n--- a/rb/spec/integration/selenium/webdriver/zipper_spec.rb\n+++ b/rb/spec/integration/selenium/webdriver/zipper_spec.rb\n@@ -17,7 +17,7 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-require File.expand_path(\"../spec_helper\", __FILE__)\n+require_relative 'spec_helper'\n \n module Selenium\n   module WebDriver\n\ndiff --git a/rb/spec/unit/selenium/client/base_spec.rb b/rb/spec/unit/selenium/client/base_spec.rb\nindex ad8d89d99e..a16fe2fe8e 100644\n--- a/rb/spec/unit/selenium/client/base_spec.rb\n+++ b/rb/spec/unit/selenium/client/base_spec.rb\n@@ -17,7 +17,7 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-require File.expand_path(\"../spec_helper\", __FILE__)\n+require_relative 'spec_helper'\n \n describe Selenium::Client::Base do\n \n\ndiff --git a/rb/spec/unit/selenium/client/extensions_spec.rb b/rb/spec/unit/selenium/client/extensions_spec.rb\nindex 014d9750ec..86e92d9206 100644\n--- a/rb/spec/unit/selenium/client/extensions_spec.rb\n+++ b/rb/spec/unit/selenium/client/extensions_spec.rb\n@@ -17,7 +17,7 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-require File.expand_path(\"../spec_helper\", __FILE__)\n+require_relative 'spec_helper'\n \n describe Selenium::Client::Extensions do\n   class ExtensionsClient\n\ndiff --git a/rb/spec/unit/selenium/client/idiomatic_spec.rb b/rb/spec/unit/selenium/client/idiomatic_spec.rb\nindex 10488d00f0..bccc6afc2a 100644\n--- a/rb/spec/unit/selenium/client/idiomatic_spec.rb\n+++ b/rb/spec/unit/selenium/client/idiomatic_spec.rb\n@@ -17,7 +17,7 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-require File.expand_path(\"../spec_helper\", __FILE__)\n+require_relative 'spec_helper'\n \n describe Selenium::Client::Idiomatic do\n   class IdiomaticClient\n\ndiff --git a/rb/spec/unit/selenium/client/javascript_expression_builder_spec.rb b/rb/spec/unit/selenium/client/javascript_expression_builder_spec.rb\nindex 5891d12447..26528fc973 100644\n--- a/rb/spec/unit/selenium/client/javascript_expression_builder_spec.rb\n+++ b/rb/spec/unit/selenium/client/javascript_expression_builder_spec.rb\n@@ -17,7 +17,7 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-require File.expand_path(\"../spec_helper\", __FILE__)\n+require_relative 'spec_helper'\n \n describe Selenium::Client::JavascriptExpressionBuilder do\n   def builder(*args)\n\ndiff --git a/rb/spec/unit/selenium/client/protocol_spec.rb b/rb/spec/unit/selenium/client/protocol_spec.rb\nindex f481dc180c..5445a2a009 100644\n--- a/rb/spec/unit/selenium/client/protocol_spec.rb\n+++ b/rb/spec/unit/selenium/client/protocol_spec.rb\n@@ -17,7 +17,7 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-require File.expand_path(\"../spec_helper\", __FILE__)\n+require_relative 'spec_helper'\n \n describe Selenium::Client::Protocol do\n   class ProtocolClient\n\ndiff --git a/rb/spec/unit/selenium/client/selenium_helper_spec.rb b/rb/spec/unit/selenium/client/selenium_helper_spec.rb\nindex 9471f1a67f..e993c51805 100644\n--- a/rb/spec/unit/selenium/client/selenium_helper_spec.rb\n+++ b/rb/spec/unit/selenium/client/selenium_helper_spec.rb\n@@ -17,7 +17,7 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-require File.expand_path(\"../spec_helper\", __FILE__)\n+require_relative 'spec_helper'\n \n describe Selenium::Client::SeleniumHelper do\n   class SeleniumHelperClass\n\ndiff --git a/rb/spec/unit/selenium/webdriver/action_builder_spec.rb b/rb/spec/unit/selenium/webdriver/action_builder_spec.rb\nindex 5759f33846..84304d4acc 100644\n--- a/rb/spec/unit/selenium/webdriver/action_builder_spec.rb\n+++ b/rb/spec/unit/selenium/webdriver/action_builder_spec.rb\n@@ -17,7 +17,7 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-require File.expand_path(\"../spec_helper\", __FILE__)\n+require_relative 'spec_helper'\n \n describe Selenium::WebDriver::ActionBuilder do\n   let(:bridge)      { double(\"Bridge\").as_null_object }\n\ndiff --git a/rb/spec/unit/selenium/webdriver/error_spec.rb b/rb/spec/unit/selenium/webdriver/error_spec.rb\nindex 408eaee5f0..9f66a00341 100644\n--- a/rb/spec/unit/selenium/webdriver/error_spec.rb\n+++ b/rb/spec/unit/selenium/webdriver/error_spec.rb\n@@ -17,7 +17,7 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-require File.expand_path(\"../spec_helper\", __FILE__)\n+require_relative 'spec_helper'\n \n module Selenium\n   module WebDriver\n\ndiff --git a/rb/spec/unit/selenium/webdriver/file_reaper_spec.rb b/rb/spec/unit/selenium/webdriver/file_reaper_spec.rb\nindex d8cec261e8..c3bdfa0438 100644\n--- a/rb/spec/unit/selenium/webdriver/file_reaper_spec.rb\n+++ b/rb/spec/unit/selenium/webdriver/file_reaper_spec.rb\n@@ -17,7 +17,7 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-require File.expand_path(\"../spec_helper\", __FILE__)\n+require_relative 'spec_helper'\n \n module Selenium\n   module WebDriver\n\ndiff --git a/rb/spec/unit/selenium/webdriver/log_entry_spec.rb b/rb/spec/unit/selenium/webdriver/log_entry_spec.rb\nindex 278decaa97..2ffab3e441 100644\n--- a/rb/spec/unit/selenium/webdriver/log_entry_spec.rb\n+++ b/rb/spec/unit/selenium/webdriver/log_entry_spec.rb\n@@ -17,7 +17,7 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-require File.expand_path(\"../spec_helper\", __FILE__)\n+require_relative 'spec_helper'\n \n module Selenium\n   module WebDriver\n\ndiff --git a/rb/spec/unit/selenium/webdriver/proxy_spec.rb b/rb/spec/unit/selenium/webdriver/proxy_spec.rb\nindex da1c2da32a..513497162a 100644\n--- a/rb/spec/unit/selenium/webdriver/proxy_spec.rb\n+++ b/rb/spec/unit/selenium/webdriver/proxy_spec.rb\n@@ -17,7 +17,7 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-require File.expand_path(\"../spec_helper\", __FILE__)\n+require_relative 'spec_helper'\n \n module Selenium\n   module WebDriver\n", "instance_id": "seleniumhq__selenium-1042", "fixed_tests": {}, "failed_tests": [], "skipped_tests": [], "run_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "test_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "fix_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "f2p_tests": {}, "p2p_tests": {}, "s2p_tests": {}, "n2p_tests": {}}
{"org": "seleniumhq", "repo": "selenium", "number": 1103, "title": "Ruby Marionette/Wires/W3C Support", "body": "@p0deje - The goal of this PR is for user tests to work seamlessly with current versions of Firefox and Wires-only versions of Firefox. If their version of Firefox is incompatible with the current extension-based implementation, then this will raise an error for a user to download wires and put it in their PATH.\n\nTo test this out, you need to download wires: https://github.com/jgraham/wires/releases & Firefox Nightly. If you are on Linux and have multiple copies of firefox (Nightly & Release), you need to specify the path to the nightly firefox-bin file in ENV['FIREFOX_NIGHTLY_PATH'].\n\nI've run the Ruby specs for this PR on all supported browsers in Windows, Linux & Mac. All tests pass with this code, or are guarded against with specific notes as to what is preventing it passing. This is definitely not the best abstracted or most elegant solution, but it works and is completely backward compatible.\n\nFeedback is appreciated, otherwise I'll merge it in and continue to clean it up as more of the W3C protocol is implemented.\n", "state": "closed", "base": {"label": "SeleniumHQ:master", "ref": "master", "sha": "86157609d1f114535241a3ea54d53180d4178ab3"}, "resolved_issues": [], "fix_patch": "diff --git a/rb/lib/selenium/webdriver/common.rb b/rb/lib/selenium/webdriver/common.rb\nindex 895ac2c651..839a22b823 100644\n--- a/rb/lib/selenium/webdriver/common.rb\n+++ b/rb/lib/selenium/webdriver/common.rb\n@@ -19,6 +19,7 @@\n \n require 'selenium/webdriver/common/core_ext/dir'\n require 'selenium/webdriver/common/core_ext/base64'\n+require 'selenium/webdriver/common/w3c_error'\n require 'selenium/webdriver/common/error'\n require 'selenium/webdriver/common/platform'\n require 'selenium/webdriver/common/proxy'\n\ndiff --git a/rb/lib/selenium/webdriver/common/driver.rb b/rb/lib/selenium/webdriver/common/driver.rb\nindex 07450a23c8..3c49fa3a8a 100644\n--- a/rb/lib/selenium/webdriver/common/driver.rb\n+++ b/rb/lib/selenium/webdriver/common/driver.rb\n@@ -47,7 +47,14 @@ def for(browser, opts = {})\n \n           bridge = case browser\n                    when :firefox, :ff\n-                     Firefox::Bridge.new(opts)\n+                     if Remote::W3CCapabilities.w3c?(opts)\n+                       Firefox::W3CBridge.new(opts)\n+                     else\n+                       Firefox::Bridge.new(opts)\n+                     end\n+                   when :firefox_nightly\n+                     Firefox::Binary.nightly_path\n+                     Firefox::W3CBridge.new(opts)\n                    when :remote\n                      Remote::Bridge.new(opts)\n                    when :ie, :internet_explorer\n\ndiff --git a/rb/lib/selenium/webdriver/common/error.rb b/rb/lib/selenium/webdriver/common/error.rb\nindex be7be4113e..9dd6e4ae81 100644\n--- a/rb/lib/selenium/webdriver/common/error.rb\n+++ b/rb/lib/selenium/webdriver/common/error.rb\n@@ -216,8 +216,12 @@ class MoveTargetOutOfBoundsError < WebDriverError; end     # 34\n       class << self\n         def for_code(code)\n           return if [nil, 0].include? code\n+          return Errors[code - 1] if code.is_a? Fixnum\n \n-          Errors[code - 1] || WebDriverError\n+          klass_name = code.split(' ').map(&:capitalize).join\n+          Error.const_get(\"#{klass_name}Error\")\n+        rescue NameError\n+          WebDriverError\n         end\n       end\n \n\ndiff --git a/rb/lib/selenium/webdriver/common/w3c_error.rb b/rb/lib/selenium/webdriver/common/w3c_error.rb\nindex 0000000000..5865b9fff9 100644\n--- a/rb/lib/selenium/webdriver/common/w3c_error.rb\n+++ b/rb/lib/selenium/webdriver/common/w3c_error.rb\n@@ -0,0 +1,194 @@\n+# encoding: utf-8\n+#\n+# Licensed to the Software Freedom Conservancy (SFC) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The SFC licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+module Selenium\n+  module WebDriver\n+    module Error\n+\n+      class WebDriverError < StandardError; end\n+\n+      #\n+      # An attempt was made to select an element that cannot be selected.\n+      #\n+\n+      class ElementNotSelectableError < WebDriverError; end\n+\n+      #\n+      # An element command could not be completed because the element is\n+      # not visible on the page.\n+      #\n+\n+      class ElementNotVisibleError < WebDriverError; end\n+\n+      #\n+      # The arguments passed to a command are either invalid or malformed.\n+      #\n+\n+      class InvalidArgumentError < WebDriverError; end\n+\n+      #\n+      # An illegal attempt was made to set a cookie under a different\n+      # domain than the current page.\n+      #\n+\n+      class InvalidCookieDomainError < WebDriverError; end\n+\n+      #\n+      # The coordinates provided to an interactions operation are invalid.\n+      #\n+\n+      class InvalidElementCoordinatesError < WebDriverError; end\n+\n+      #\n+      # An element command could not be completed because the element is\n+      # in an invalid state, e.g. attempting to click an element that is no\n+      # longer attached to the document.\n+      #\n+\n+      class InvalidElementStateError < WebDriverError; end\n+\n+      #\n+      # Argument was an invalid selector.\n+      #\n+\n+      class InvalidSelectorError < WebDriverError; end\n+\n+      #\n+      # Occurs if the given session id is not in the list of active sessions,\n+      # meaning the session either does not exist or that it\u2019s not active.\n+      #\n+\n+      class InvalidSessionIdError < WebDriverError; end\n+\n+      #\n+      # An error occurred while executing JavaScript supplied by the user.\n+      #\n+\n+      class JavascriptError < WebDriverError; end\n+\n+      #\n+      # The target for mouse interaction is not in the browser\u2019s viewport and\n+      # cannot be brought into that viewport.\n+      #\n+\n+      class MoveTargetOutOfBoundsError < WebDriverError; end\n+\n+      #\n+      # An attempt was made to operate on a modal dialog when one was not open.\n+      #\n+\n+      class NoSuchAlertError < WebDriverError; end\n+\n+      #\n+      # An element could not be located on the page using the given\n+      # search parameters.\n+      #\n+\n+      class NoSuchElementError < WebDriverError; end\n+\n+      #\n+      # A request to switch to a frame could not be satisfied because the\n+      # frame could not be found.\n+      #\n+\n+      class NoSuchFrameError < WebDriverError; end\n+\n+      #\n+      # A request to switch to a window could not be satisfied because the\n+      # window could not be found.\n+      #\n+\n+      class NoSuchWindowError < WebDriverError; end\n+\n+      #\n+      # A script did not complete before its timeout expired.\n+      #\n+\n+      class ScriptTimeoutError < WebDriverError; end\n+\n+      #\n+      # A new session could not be created.\n+      #\n+\n+      class SessionNotCreatedError < WebDriverError; end\n+\n+      #\n+      # An element command failed because the referenced element is no longer\n+      # attached to the DOM.\n+      #\n+\n+      class StaleElementReferenceError < WebDriverError; end\n+\n+      #\n+      # An operation did not complete before its timeout expired.\n+      #\n+\n+      class TimeoutError < WebDriverError; end\n+\n+      #\n+      # A request to set a cookie\u2019s value could not be satisfied.\n+      #\n+\n+      class UnableToSetCookieError < WebDriverError; end\n+\n+      #\n+      # A screen capture was made impossible.\n+      #\n+\n+      class UnableToCaptureScreenError < WebDriverError; end\n+\n+      #\n+      # A modal dialog was open, blocking this operation.\n+      #\n+\n+      class UnexpectedAlertOpenError < WebDriverError; end\n+\n+      #\n+      # An unknown error occurred in the remote end while processing\n+      # the command.\n+      #\n+\n+      class UnknownError < WebDriverError; end\n+\n+      #\n+      # The requested command matched a known URL but did not match a\n+      # method for that URL.\n+      #\n+\n+      class UnknownMethodError < WebDriverError; end\n+\n+      #\n+      # Indicates that a command that should have executed properly cannot be supported for some reason.\n+      #\n+\n+      class UnsupportedOperationError < WebDriverError; end\n+\n+      # aliased for backwards compatibility\n+      NoAlertPresentError       = NoSuchAlertError\n+      ScriptTimeOutError        = ScriptTimeoutError\n+      ObsoleteElementError      = StaleElementReferenceError\n+      UnhandledError            = UnknownError\n+      UnexpectedJavascriptError = JavascriptError\n+      NoAlertOpenError          = NoAlertPresentError\n+      ElementNotDisplayedError  = ElementNotVisibleError\n+\n+\n+    end # Error\n+  end # WebDriver\n+end # Selenium\n\ndiff --git a/rb/lib/selenium/webdriver/firefox.rb b/rb/lib/selenium/webdriver/firefox.rb\nindex eb6dd9bf12..d5b63fe8cd 100644\n--- a/rb/lib/selenium/webdriver/firefox.rb\n+++ b/rb/lib/selenium/webdriver/firefox.rb\n@@ -28,6 +28,9 @@\n require 'selenium/webdriver/firefox/profile'\n require 'selenium/webdriver/firefox/launcher'\n require 'selenium/webdriver/firefox/bridge'\n+require 'selenium/webdriver/firefox/w3c_bridge'\n+require 'selenium/webdriver/firefox/binary'\n+require 'selenium/webdriver/firefox/service'\n \n module Selenium\n   module WebDriver\n\ndiff --git a/rb/lib/selenium/webdriver/firefox/binary.rb b/rb/lib/selenium/webdriver/firefox/binary.rb\nindex 2d32d01278..9f4f4cc3a8 100644\n--- a/rb/lib/selenium/webdriver/firefox/binary.rb\n+++ b/rb/lib/selenium/webdriver/firefox/binary.rb\n@@ -149,6 +149,36 @@ def path\n             @path\n           end\n \n+          def nightly_path\n+            @path = case Platform.os\n+                    when :macosx\n+                      \"/Applications/FirefoxNightly.app/Contents/MacOS/firefox-bin\"\n+                    when :windows\n+                      \"#{Platform.find_in_program_files(\"\\\\Nightly\\\\firefox.exe\").gsub('m Files (x86)', '~2')}\"\n+                    when :linux\n+                      ENV['FIREFOX_NIGHTLY_PATH'] or raise Error::WebDriverError, \"Set ENV['FIREFOX_NIGHTLY_PATH'] when using Firefox Nightly on Linux\"\n+                    end\n+\n+            unless File.file?(@path.to_s) && version > 43\n+              raise Error::WebDriverError, \"Could not find Firefox Nightly binary. Make sure Firefox Nightly is installed or set the path manually with #{self}.path=\"\n+            end\n+\n+            @path\n+          end\n+\n+          def version\n+            @version ||= case Platform.os\n+                         when :macosx\n+                           `#{path} -v`.strip[/[^\\s]*$/][/^\\d+/].to_i\n+                         when :windows\n+                           `\\\"#{path}\\\" -v | more`.strip[/[^\\s]*$/][/^\\d+/].to_i\n+                         when :linux\n+                           `#{path} -v`.strip[/[^\\s]*$/][/^\\d+/].to_i\n+                         else\n+                           0\n+                         end\n+          end\n+\n           private\n \n           def windows_path\n\ndiff --git a/rb/lib/selenium/webdriver/firefox/service.rb b/rb/lib/selenium/webdriver/firefox/service.rb\nindex 0000000000..964f688672 100644\n--- a/rb/lib/selenium/webdriver/firefox/service.rb\n+++ b/rb/lib/selenium/webdriver/firefox/service.rb\n@@ -0,0 +1,120 @@\n+# encoding: utf-8\n+#\n+# Licensed to the Software Freedom Conservancy (SFC) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The SFC licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+module Selenium\n+  module WebDriver\n+    module Firefox\n+\n+      #\n+      # @api private\n+      #\n+      class Service\n+        START_TIMEOUT       = 20\n+        SOCKET_LOCK_TIMEOUT = 45\n+        STOP_TIMEOUT        = 5\n+        DEFAULT_PORT        = 4444\n+        MISSING_TEXT        = \"Unable to find Mozilla Wires. Please download the executable from https://github.com/jgraham/wires/releases\"\n+\n+        def self.executable_path\n+          @executable_path ||= (\n+            path = Platform.find_binary \"wires\"\n+            path or raise Error::WebDriverError, MISSING_TEXT\n+            Platform.assert_executable path\n+\n+            path\n+          )\n+        end\n+\n+        def self.executable_path=(path)\n+          Platform.assert_executable path\n+          @executable_path = path\n+        end\n+\n+        def self.default_service(*extra_args)\n+          new executable_path, DEFAULT_PORT, *extra_args\n+        end\n+\n+        def initialize(executable_path, port, *extra_args)\n+          @executable_path = executable_path\n+          @host            = Platform.localhost\n+          @port            = Integer(port)\n+\n+          raise Error::WebDriverError, \"invalid port: #{@port}\" if @port < 1\n+\n+          @extra_args = extra_args\n+        end\n+\n+        def start\n+          Platform.exit_hook { stop } # make sure we don't leave the server running\n+\n+          socket_lock.locked do\n+            find_free_port\n+            start_process\n+            connect_until_stable\n+          end\n+        end\n+\n+        def stop\n+          return if @process.nil? || @process.exited?\n+\n+          Net::HTTP.start(@host, @port) do |http|\n+            http.open_timeout = STOP_TIMEOUT / 2\n+            http.read_timeout = STOP_TIMEOUT / 2\n+\n+            http.head(\"/shutdown\")\n+          end\n+\n+          @process.poll_for_exit STOP_TIMEOUT\n+        rescue ChildProcess::TimeoutError\n+          # ok, force quit\n+          @process.stop STOP_TIMEOUT\n+        end\n+\n+        def uri\n+          URI.parse \"http://#{@host}:#{@port}\"\n+        end\n+\n+        def find_free_port\n+          @port = PortProber.above @port\n+        end\n+\n+        def start_process\n+          server_command = [@executable_path, \"--binary=#{Firefox::Binary.path}\", \"--webdriver-port=#{@port}\", *@extra_args]\n+          @process       = ChildProcess.build(*server_command)\n+\n+          @process.io.inherit!\n+          @process.start\n+        end\n+\n+        def connect_until_stable\n+          @socket_poller = SocketPoller.new @host, @port, START_TIMEOUT\n+\n+          unless @socket_poller.connected?\n+            raise Error::WebDriverError, \"unable to connect to Mozilla Wires #{@host}:#{@port}\"\n+          end\n+        end\n+\n+        def socket_lock\n+          @socket_lock ||= SocketLock.new(@port - 1, SOCKET_LOCK_TIMEOUT)\n+        end\n+\n+      end # Service\n+    end # Firefox\n+  end # WebDriver\n+end # Service\n\ndiff --git a/rb/lib/selenium/webdriver/firefox/w3c_bridge.rb b/rb/lib/selenium/webdriver/firefox/w3c_bridge.rb\nindex 0000000000..b7698c0013 100644\n--- a/rb/lib/selenium/webdriver/firefox/w3c_bridge.rb\n+++ b/rb/lib/selenium/webdriver/firefox/w3c_bridge.rb\n@@ -0,0 +1,97 @@\n+# encoding: utf-8\n+#\n+# Licensed to the Software Freedom Conservancy (SFC) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The SFC licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+module Selenium\n+  module WebDriver\n+    module Firefox\n+\n+      # @api private\n+      class W3CBridge < Remote::W3CBridge\n+\n+        def initialize(opts = {})\n+          http_client = opts.delete(:http_client)\n+\n+          if opts.has_key?(:url)\n+            url = opts.delete(:url)\n+          else\n+            @service = Service.default_service(*extract_service_args(opts))\n+\n+            if @service.instance_variable_get(\"@host\") == \"127.0.0.1\"\n+              @service.instance_variable_set(\"@host\", 'localhost')\n+            end\n+\n+            @service.start\n+\n+            url = @service.uri\n+          end\n+\n+          caps = create_capabilities(opts)\n+\n+          remote_opts = {\n+            :url                  => url,\n+            :desired_capabilities => caps\n+          }\n+\n+          remote_opts.merge!(:http_client => http_client) if http_client\n+          super(remote_opts)\n+        end\n+\n+        def browser\n+          :firefox\n+        end\n+\n+        def driver_extensions\n+          [\n+            DriverExtensions::TakesScreenshot,\n+            DriverExtensions::HasInputDevices\n+          ]\n+        end\n+\n+        def quit\n+          super\n+        ensure\n+          @service.stop if @service\n+        end\n+\n+        private\n+\n+        def create_capabilities(opts)\n+          caps = opts.delete(:desired_capabilities) { Remote::W3CCapabilities.firefox }\n+\n+          unless opts.empty?\n+            raise ArgumentError, \"unknown option#{'s' if opts.size != 1}: #{opts.inspect}\"\n+          end\n+\n+          caps\n+        end\n+\n+        def extract_service_args(opts)\n+          args = []\n+\n+          if opts.has_key?(:service_log_path)\n+            args << \"--log-path=#{opts.delete(:service_log_path)}\"\n+          end\n+\n+          args\n+        end\n+\n+      end # W3CBridge\n+    end # Firefox\n+  end # WebDriver\n+end # Selenium\n\ndiff --git a/rb/lib/selenium/webdriver/remote.rb b/rb/lib/selenium/webdriver/remote.rb\nindex cffb248611..0506510384 100644\n--- a/rb/lib/selenium/webdriver/remote.rb\n+++ b/rb/lib/selenium/webdriver/remote.rb\n@@ -20,10 +20,13 @@\n require 'uri'\n \n require 'selenium/webdriver/remote/capabilities'\n+require 'selenium/webdriver/remote/w3c_capabilities'\n require 'selenium/webdriver/remote/bridge'\n+require 'selenium/webdriver/remote/w3c_bridge'\n require 'selenium/webdriver/remote/server_error'\n require 'selenium/webdriver/remote/response'\n require 'selenium/webdriver/remote/commands'\n+require 'selenium/webdriver/remote/w3c_commands'\n require 'selenium/webdriver/remote/http/common'\n require 'selenium/webdriver/remote/http/default'\n \n\ndiff --git a/rb/lib/selenium/webdriver/remote/bridge.rb b/rb/lib/selenium/webdriver/remote/bridge.rb\nindex d8188cf818..b709c7e9cd 100644\n--- a/rb/lib/selenium/webdriver/remote/bridge.rb\n+++ b/rb/lib/selenium/webdriver/remote/bridge.rb\n@@ -21,8 +21,6 @@ module Selenium\n   module WebDriver\n     module Remote\n \n-      COMMANDS = {}\n-\n       #\n       # Low level bridge to the remote server, through which the rest of the API works.\n       #\n@@ -32,6 +30,8 @@ module Remote\n       class Bridge\n         include BridgeHelper\n \n+        COMMANDS = {}\n+\n         #\n         # Defines a wrapper method for a command, which ultimately calls #execute.\n         #\n\ndiff --git a/rb/lib/selenium/webdriver/remote/response.rb b/rb/lib/selenium/webdriver/remote/response.rb\nindex 86d1a15b57..d0effd72a0 100644\n--- a/rb/lib/selenium/webdriver/remote/response.rb\n+++ b/rb/lib/selenium/webdriver/remote/response.rb\n@@ -52,13 +52,12 @@ def error_message\n             msg = val['message'] or return \"unknown error\"\n             msg << \": #{val['alert']['text'].inspect}\" if val['alert'].kind_of?(Hash) && val['alert']['text']\n             msg << \" (#{ val['class'] })\" if val['class']\n+            msg\n           when String\n-            msg = val\n+            val\n           else\n-            msg = \"unknown error, status=#{status}: #{val.inspect}\"\n+            \"unknown error, status=#{status}: #{val.inspect}\"\n           end\n-\n-          msg\n         end\n \n         def [](key)\n@@ -104,11 +103,11 @@ def add_backtrace(ex)\n         end\n \n         def status\n-          @payload['status']\n+          @payload['status'] || @payload['error']\n         end\n \n         def value\n-          @payload['value']\n+          @payload['value'] || @payload['message']\n         end\n \n       end # Response\n\ndiff --git a/rb/lib/selenium/webdriver/remote/w3c_bridge.rb b/rb/lib/selenium/webdriver/remote/w3c_bridge.rb\nindex 0000000000..b0265e5a1e 100644\n--- a/rb/lib/selenium/webdriver/remote/w3c_bridge.rb\n+++ b/rb/lib/selenium/webdriver/remote/w3c_bridge.rb\n@@ -0,0 +1,676 @@\n+# encoding: utf-8\n+#\n+# Licensed to the Software Freedom Conservancy (SFC) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The SFC licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+module Selenium\n+  module WebDriver\n+    module Remote\n+\n+      #\n+      # Low level bridge to the remote server, through which the rest of the API works.\n+      #\n+      # @api private\n+      #\n+\n+      class W3CBridge\n+        include BridgeHelper\n+\n+        COMMANDS = {}\n+\n+        #\n+        # Defines a wrapper method for a command, which ultimately calls #execute.\n+        #\n+        # @param name [Symbol]\n+        #   name of the resulting method\n+        # @param verb [Symbol]\n+        #   the appropriate http verb, such as :get, :post, or :delete\n+        # @param url [String]\n+        #   a URL template, which can include some arguments, much like the definitions on the server.\n+        #   the :session_id parameter is implicitly handled, but the remainder will become required method arguments.\n+        #\n+\n+        def self.command(name, verb, url)\n+          COMMANDS[name] = [verb, url.freeze]\n+        end\n+\n+        attr_accessor :context, :http, :file_detector\n+        attr_reader :capabilities\n+\n+        #\n+        # Initializes the bridge with the given server URL.\n+        #\n+        # @param url         [String] url for the remote server\n+        # @param http_client [Object] an HTTP client instance that implements the same protocol as Http::Default\n+        # @param desired_capabilities [Capabilities] an instance of Remote::Capabilities describing the capabilities you want\n+        #\n+\n+        def initialize(opts = {})\n+          opts = opts.dup\n+\n+          http_client          = opts.delete(:http_client) { Http::Default.new }\n+          desired_capabilities = opts.delete(:desired_capabilities) { W3CCapabilities.firefox }\n+          url                  = opts.delete(:url) { \"http://#{Platform.localhost}:4444/wd/hub\" }\n+\n+          unless opts.empty?\n+            raise ArgumentError, \"unknown option#{'s' if opts.size != 1}: #{opts.inspect}\"\n+          end\n+\n+          if desired_capabilities.kind_of?(Symbol)\n+            unless W3CCapabilities.respond_to?(desired_capabilities)\n+              raise Error::WebDriverError, \"invalid desired capability: #{desired_capabilities.inspect}\"\n+            end\n+\n+            desired_capabilities = W3CCapabilities.send(desired_capabilities)\n+          end\n+\n+          uri = url.kind_of?(URI) ? url : URI.parse(url)\n+          uri.path += \"/\" unless uri.path =~ /\\/$/\n+\n+          http_client.server_url = uri\n+\n+          @http          = http_client\n+          @capabilities  = create_session(desired_capabilities)\n+\n+          @file_detector = nil\n+        end\n+\n+        def browser\n+          @browser ||= (\n+            name = @capabilities.browser_name\n+            name ? name.gsub(\" \", \"_\").to_sym : 'unknown'\n+          )\n+        end\n+\n+        def driver_extensions\n+          [\n+            DriverExtensions::HasInputDevices,\n+            DriverExtensions::UploadsFiles,\n+            DriverExtensions::TakesScreenshot,\n+            DriverExtensions::HasSessionId,\n+            DriverExtensions::Rotatable,\n+            DriverExtensions::HasTouchScreen,\n+            DriverExtensions::HasLocation,\n+            DriverExtensions::HasNetworkConnection,\n+            DriverExtensions::HasRemoteStatus\n+          ]\n+        end\n+\n+        #\n+        # Returns the current session ID.\n+        #\n+\n+        def session_id\n+          @session_id || raise(Error::WebDriverError, \"no current session exists\")\n+        end\n+\n+        def create_session(desired_capabilities)\n+          resp = raw_execute :newSession, {}, :desiredCapabilities => desired_capabilities\n+          @session_id = resp['sessionId'] or raise Error::WebDriverError, 'no sessionId in returned payload'\n+\n+          W3CCapabilities.json_create resp['value']\n+        end\n+\n+        def status\n+          execute :status\n+        end\n+\n+        def get(url)\n+          execute :get, {}, :url => url\n+        end\n+\n+        def getCapabilities\n+          W3CCapabilities.json_create execute(:getCapabilities)\n+        end\n+\n+        def setImplicitWaitTimeout(milliseconds)\n+          setTimeout('implicit', milliseconds)\n+        end\n+\n+        def setScriptTimeout(milliseconds)\n+          setTimeout('script', milliseconds)\n+        end\n+\n+        def setTimeout(type, milliseconds)\n+          execute :setTimeout, {}, :type => type, :ms => milliseconds\n+        end\n+\n+        #\n+        # alerts\n+        #\n+\n+        def getAlert\n+          execute :getAlert\n+        end\n+\n+        def acceptAlert\n+          execute :acceptAlert\n+        end\n+\n+        def dismissAlert\n+          execute :dismissAlert\n+        end\n+\n+        def setAlertValue(keys)\n+          execute :sendAlertText, {}, {:handler => 'prompt', :message => keys}\n+        end\n+\n+        def getAlertText\n+          execute :getAlertText\n+        end\n+\n+        #\n+        # navigation\n+        #\n+\n+        def goBack\n+          execute :back\n+        end\n+\n+        def goForward\n+          execute :forward\n+        end\n+\n+        def getCurrentUrl\n+          execute :getCurrentUrl\n+        end\n+\n+        def getTitle\n+          execute :getTitle\n+        end\n+\n+        def getPageSource\n+          execute :getPageSource\n+        end\n+\n+        def getVisible\n+          execute :getVisible\n+        end\n+\n+        def setVisible(bool)\n+          execute :setVisible, {}, bool\n+        end\n+\n+        def switchToWindow(name)\n+          execute :switchToWindow, {}, :handle => name\n+        end\n+\n+        def switchToFrame(id)\n+          locator  = case id\n+                     when String\n+                       find_element_by('id', id)\n+                     when Hash\n+                       find_element_by(id.keys.first.to_s, id.values.first)\n+                     else\n+                       id\n+                     end\n+\n+          execute :switchToFrame, {}, :id => locator\n+        end\n+\n+        def switchToParentFrame\n+          execute :switchToParentFrame\n+        end\n+\n+        def switchToDefaultContent\n+          switchToFrame nil\n+        end\n+\n+        QUIT_ERRORS = [IOError]\n+\n+        def quit\n+          execute :deleteSession\n+          http.close\n+        rescue *QUIT_ERRORS\n+        end\n+\n+        def close\n+          execute :closeWindow\n+        end\n+\n+        def refresh\n+          execute :refresh\n+        end\n+\n+        #\n+        # window handling\n+        #\n+\n+        def getWindowHandles\n+          execute :getWindowHandles\n+        end\n+\n+        def getCurrentWindowHandle\n+          execute :getWindowHandle\n+        end\n+\n+        # TODO - These Commands might require checking for being\n+        # current window before performing\n+        def setWindowSize(width, height, handle = :current)\n+          execute :setWindowSize, {}, {:width  => width,\n+                                   :height => height}\n+        end\n+\n+        def maximizeWindow(handle = :current)\n+          execute :maximizeWindow\n+        end\n+\n+        def getWindowSize(handle = :current)\n+          data = execute :getWindowSize\n+\n+          Dimension.new data['width'], data['height']\n+        end\n+\n+        def setWindowPosition(x, y, handle = :current)\n+          execute :setWindowPosition, :x => x, :y => y\n+        end\n+\n+        def getWindowPosition(handle = :current)\n+          data = execute :getWindowPosition\n+\n+          Point.new data['x'], data['y']\n+        end\n+\n+        def getScreenshot\n+          execute :takeScreenshot\n+        end\n+\n+        #\n+        # HTML 5\n+        #\n+\n+        def getLocalStorageItem(key)\n+          execute :getLocalStorageItem, :key => key\n+        end\n+\n+        def removeLocalStorageItem(key)\n+          execute :removeLocalStorageItem, :key => key\n+        end\n+\n+        def getLocalStorageKeys\n+          execute :getLocalStorageKeys\n+        end\n+\n+        def setLocalStorageItem(key, value)\n+          execute :setLocalStorageItem, {}, :key => key, :value => value\n+        end\n+\n+        def clearLocalStorage\n+          execute :clearLocalStorage\n+        end\n+\n+        def getLocalStorageSize\n+          execute :getLocalStorageSize\n+        end\n+\n+        def getSessionStorageItem(key)\n+          execute :getSessionStorageItem, :key => key\n+        end\n+\n+        def removeSessionStorageItem(key)\n+          execute :removeSessionStorageItem, :key => key\n+        end\n+\n+        def getSessionStorageKeys\n+          execute :getSessionStorageKeys\n+        end\n+\n+        def setSessionStorageItem(key, value)\n+          execute :setSessionStorageItem, {}, :key => key, :value => value\n+        end\n+\n+        def clearSessionStorage\n+          execute :clearSessionStorage\n+        end\n+\n+        def getSessionStorageSize\n+          execute :getSessionStorageSize\n+        end\n+\n+        def getLocation\n+          obj = execute(:getLocation) || {} # android returns null\n+          Location.new obj['latitude'], obj['longitude'], obj['altitude']\n+        end\n+\n+        def setLocation(lat, lon, alt)\n+          loc = {:latitude => lat, :longitude => lon, :altitude => alt}\n+          execute :setLocation, {}, :location => loc\n+        end\n+\n+        def getNetworkConnection\n+          execute :getNetworkConnection\n+        end\n+\n+        def setNetworkConnection(type)\n+          execute :setNetworkConnection, {}, :parameters => {:type => type}\n+        end\n+\n+        #\n+        # javascript execution\n+        #\n+\n+        def executeScript(script, *args)\n+          result = execute :executeScript, {}, :script => script, :args => args\n+          unwrap_script_result result\n+        end\n+\n+        def executeAsyncScript(script, *args)\n+          result = execute :executeAsyncScript, {}, :script => script, :args => args\n+          unwrap_script_result result\n+        end\n+\n+        #\n+        # cookies\n+        #\n+\n+        def addCookie(cookie)\n+          execute :addCookie, {}, cookie\n+        end\n+\n+        def deleteCookie(name)\n+          execute :deleteCookie, :name => name\n+        end\n+\n+        # TODO - write specs\n+        def getCookie(name)\n+          execute :getCookie, :name => name\n+        end\n+\n+        def getAllCookies\n+          execute :getAllCookies\n+        end\n+\n+        def deleteAllCookies\n+          getAllCookies.each { |cookie| deleteCookie(cookie['name'])}\n+        end\n+\n+        #\n+        # actions\n+        #\n+\n+        def clickElement(element)\n+          execute :elementClick, :id => element\n+        end\n+\n+        def click\n+          execute :click, {}, :button => 0\n+        end\n+\n+        def doubleClick\n+          execute :doubleClick\n+        end\n+\n+        def contextClick\n+          execute :click, {}, :button => 2\n+        end\n+\n+        def mouseDown\n+          execute :mouseDown\n+        end\n+\n+        def mouseUp\n+          execute :mouseUp\n+        end\n+\n+        def mouseMoveTo(element, x = nil, y = nil)\n+          params = { :element => element }\n+\n+          if x && y\n+            params.merge! :xoffset => x, :yoffset => y\n+          end\n+\n+          execute :mouseMoveTo, {}, params\n+        end\n+\n+        def sendKeysToActiveElement(keys)\n+          sendKeysToElement(getActiveElement, keys)\n+        end\n+\n+        def sendKeysToElement(element, keys)\n+          execute :elementSendKeys, {:id => element}, {:value => keys.join('').split(//)}\n+        end\n+\n+        def upload(local_file)\n+          unless File.file?(local_file)\n+            raise Error::WebDriverError, \"you may only upload files: #{local_file.inspect}\"\n+          end\n+\n+          execute :uploadFile, {}, :file => Zipper.zip_file(local_file)\n+        end\n+\n+        def clearElement(element)\n+          execute :elementClear, :id => element\n+        end\n+\n+\n+        def submitElement(element)\n+          executeScript(\"var e = arguments[0].ownerDocument.createEvent('Event');\" +\n+                            \"e.initEvent('submit', true, true);\" +\n+                            \"if (arguments[0].dispatchEvent(e)) { arguments[0].submit() }\", element)\n+        end\n+\n+        def dragElement(element, right_by, down_by)\n+          execute :dragElement, {:id => element}, :x => right_by, :y => down_by\n+        end\n+\n+        def touchSingleTap(element)\n+          execute :touchSingleTap, {}, :element => element\n+        end\n+\n+        def touchDoubleTap(element)\n+          execute :touchDoubleTap, {}, :element => element\n+        end\n+\n+        def touchLongPress(element)\n+          execute :touchLongPress, {}, :element => element\n+        end\n+\n+        def touchDown(x, y)\n+          execute :touchDown, {}, :x => x, :y => y\n+        end\n+\n+        def touchUp(x, y)\n+          execute :touchUp, {}, :x => x, :y => y\n+        end\n+\n+        def touchMove(x, y)\n+          execute :touchMove, {}, :x => x, :y => y\n+        end\n+\n+        def touchScroll(element, x, y)\n+          if element\n+            execute :touchScroll, {}, :element => element,\n+                                      :xoffset => x,\n+                                      :yoffset => y\n+          else\n+            execute :touchScroll, {}, :xoffset => x, :yoffset => y\n+          end\n+        end\n+\n+        def touchFlick(xspeed, yspeed)\n+          execute :touchFlick, {}, :xspeed => xspeed, :yspeed => yspeed\n+        end\n+\n+        def touchElementFlick(element, right_by, down_by, speed)\n+          execute :touchFlick, {}, :element => element,\n+                                   :xoffset => right_by,\n+                                   :yoffset => down_by,\n+                                   :speed   => speed\n+\n+        end\n+\n+        def setScreenOrientation(orientation)\n+          execute :setScreenOrientation, {}, :orientation => orientation\n+        end\n+\n+        def getScreenOrientation\n+          execute :getScreenOrientation\n+        end\n+\n+        #\n+        # element properties\n+        #\n+\n+        def getElementTagName(element)\n+          execute :getElementTagName, :id => element\n+        end\n+\n+        def getElementAttribute(element, name)\n+          execute :getElementAttribute, :id => element, :name => name\n+        end\n+\n+        def getElementValue(element)\n+          execute :getElementProperty, :id => element, :name => 'value'\n+        end\n+\n+        def getElementText(element)\n+          execute :getElementText, :id => element\n+        end\n+\n+        def getElementLocation(element)\n+          data = execute :getElementLocation, :id => element\n+\n+          Point.new data['x'], data['y']\n+        end\n+\n+        def getElementLocationOnceScrolledIntoView(element)\n+          data = execute :getElementLocationOnceScrolledIntoView, :id => element\n+\n+          Point.new data['x'], data['y']\n+        end\n+\n+        def getElementSize(element)\n+          data = execute :getElementSize, :id => element\n+\n+          Dimension.new data['width'], data['height']\n+        end\n+\n+        def isElementEnabled(element)\n+          execute :isElementEnabled, :id => element\n+        end\n+\n+        def isElementSelected(element)\n+          execute :isElementSelected, :id => element\n+        end\n+\n+        def isElementDisplayed(element)\n+          execute :isElementDisplayed, :id => element\n+        end\n+        def getElementValueOfCssProperty(element, prop)\n+          execute :getElementCssValue, :id => element, :property_name => prop\n+        end\n+\n+        def elementEquals(element, other)\n+          element.ref == other.ref\n+        end\n+\n+        #\n+        # finding elements\n+        #\n+\n+        def getActiveElement\n+          Element.new self, element_id_from(execute(:getActiveElement))\n+        end\n+        alias_method :switchToActiveElement, :getActiveElement\n+\n+        def find_element_by(how, what, parent = nil)\n+          how, what = convert_locators(how, what)\n+\n+          if parent\n+            id = execute :findChildElement, {:id => parent}, {:using => how, :value => what}\n+          else\n+            id = execute :findElement, {}, {:using => how, :value => what}\n+          end\n+\n+          Element.new self, element_id_from(id)\n+        end\n+\n+        def find_elements_by(how, what, parent = nil)\n+          how, what = convert_locators(how, what)\n+\n+          if parent\n+            ids = execute :findChildElements, {:id => parent}, {:using => how, :value => what}\n+          else\n+            ids = execute :findElements, {}, {:using => how, :value => what}\n+          end\n+\n+          ids.map { |id| Element.new self, element_id_from(id) }\n+        end\n+\n+        private\n+\n+        def convert_locators(how, what)\n+          case how\n+          when 'class name'\n+            how = 'css selector'\n+            what = \".#{what}\"\n+          when 'id'\n+            how = 'css selector'\n+            what = \"##{what}\"\n+          when 'name'\n+            how = 'css selector'\n+            what = \"*[name='#{what}']\"\n+          when 'tag name'\n+            how = 'css selector'\n+          end\n+          return how, what\n+        end\n+\n+        #\n+        # executes a command on the remote server.\n+        #\n+        #\n+        # Returns the 'value' of the returned payload\n+        #\n+\n+        def execute(*args)\n+          result = raw_execute(*args)\n+          result.payload.key?('value') ? result['value'] : result\n+        end\n+\n+        #\n+        # executes a command on the remote server.\n+        #\n+        # @return [WebDriver::Remote::Response]\n+        #\n+\n+        def raw_execute(command, opts = {}, command_hash = nil)\n+          verb, path = COMMANDS[command] || raise(ArgumentError, \"unknown command: #{command.inspect}\")\n+          path       = path.dup\n+\n+          path[':session_id'] = @session_id if path.include?(\":session_id\")\n+\n+          begin\n+            opts.each { |key, value|\n+              path[key.inspect] = escaper.escape(value.to_s)\n+            }\n+          rescue IndexError\n+            raise ArgumentError, \"#{opts.inspect} invalid for #{command.inspect}\"\n+          end\n+\n+          puts \"-> #{verb.to_s.upcase} #{path}\" if $DEBUG\n+          http.call verb, path, command_hash\n+        end\n+\n+        def escaper\n+          @escaper ||= defined?(URI::Parser) ? URI::Parser.new : URI\n+        end\n+\n+      end # W3CBridge\n+    end # Remote\n+  end # WebDriver\n+end # Selenium\n\ndiff --git a/rb/lib/selenium/webdriver/remote/w3c_capabilities.rb b/rb/lib/selenium/webdriver/remote/w3c_capabilities.rb\nindex 0000000000..3a6504ea36 100644\n--- a/rb/lib/selenium/webdriver/remote/w3c_capabilities.rb\n+++ b/rb/lib/selenium/webdriver/remote/w3c_capabilities.rb\n@@ -0,0 +1,209 @@\n+# encoding: utf-8\n+#\n+# Licensed to the Software Freedom Conservancy (SFC) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The SFC licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+module Selenium\n+  module WebDriver\n+    module Remote\n+      #\n+      # Specification of the desired and/or actual capabilities of the browser that the\n+      # server is being asked to create.\n+      #\n+      class W3CCapabilities\n+\n+        DEFAULTS = {\n+          :browser_name => '',\n+          :browser_version => '',\n+          :platform_name => :any,\n+          :platform_version => false,\n+          :accept_ssl_certs => false,\n+          :takes_screenshot => false,\n+          :takes_element_screenshot => false,\n+          :page_load_strategy => false,\n+          :proxy => nil\n+        }\n+\n+        DEFAULTS.each_key do |key|\n+          define_method key do\n+            @capabilities.fetch(key)\n+          end\n+\n+          define_method \"#{key}=\" do |value|\n+            @capabilities[key] = value\n+          end\n+        end\n+\n+        alias_method :version, :browser_version\n+\n+        #\n+        # Convenience methods for the common choices.\n+        #\n+\n+        class << self\n+\n+          def edge(opts = {})\n+            new({\n+              :browser_name => \"MicrosoftEdge\",\n+              :platform => :windows,\n+                }.merge(opts))\n+          end\n+\n+          def firefox(opts = {})\n+            new({\n+              :browser_name => \"firefox\"\n+                }.merge(opts))\n+          end\n+\n+          def w3c?(opts = {})\n+            return true if opts[:browser_name] == :firefox_nightly\n+            w3c_opts? || Firefox::Binary.version > 43\n+          end\n+\n+          def w3c_opts?(opts = {})\n+            intersect = Remote::W3CCapabilities::DEFAULTS.keys & opts.keys\n+            common = [:takes_screenshot, :proxy]\n+            !(intersect - common).empty?\n+          end\n+\n+          #\n+          # @api private\n+          #\n+\n+          def json_create(data)\n+            data = data.dup\n+\n+            caps = new\n+            caps.browser_name = data.delete(\"browserName\")\n+            caps.browser_version = data.delete(\"browserVersion\")\n+            caps.platform_name = data.delete(\"platformName\").downcase.to_sym if data.has_key?('platform')\n+            caps.platform_version = data.delete(\"platformVersion\")\n+            caps.accept_ssl_certs = data.delete(\"acceptSslCerts\")\n+            caps.takes_screenshot = data.delete(\"takesScreenshot  \")\n+            caps.takes_element_screenshot = data.delete(\"takesElementScreenshot\")\n+            caps.page_load_strategy = data.delete(\"pageLoadStrategy\")\n+            caps.proxy = Proxy.json_create(data['proxy']) if data.has_key?('proxy')\n+\n+            # any remaining pairs will be added as is, with no conversion\n+            caps.merge!(data)\n+\n+            caps\n+          end\n+        end\n+\n+        # @param [Hash] opts\n+        # @option :browser_name             [String] required browser name\n+        # @option :browser_version          [String] required browser version number\n+        # @option :platform_name            [Symbol] one of :any, :win, :mac, or :x\n+        # @option :platform_version         [String] required platform version number\n+        # @option :accept_ssl_certs         [Boolean] does the driver accept SSL Cerfifications?\n+        # @option :takes_screenshot         [Boolean] can this driver take screenshots?\n+        # @option :takes_element_screenshot [Boolean] can this driver take element screenshots?\n+        # @option :proxy                    [Selenium::WebDriver::Proxy, Hash] proxy configuration\n+        #\n+        # @api public\n+        #\n+\n+        def initialize(opts = {})\n+          @capabilities = DEFAULTS.merge(opts)\n+          self.proxy = opts.delete(:proxy)\n+        end\n+\n+        #\n+        # Allows setting arbitrary capabilities.\n+        #\n+\n+        def []=(key, value)\n+          @capabilities[key] = value\n+        end\n+\n+        def [](key)\n+          @capabilities[key]\n+        end\n+\n+        def merge!(other)\n+          if other.respond_to?(:capabilities, true) && other.capabilities.kind_of?(Hash)\n+            @capabilities.merge! other.capabilities\n+          elsif other.kind_of? Hash\n+            @capabilities.merge! other\n+          else\n+            raise ArgumentError, \"argument should be a Hash or implement #capabilities\"\n+          end\n+        end\n+\n+        def proxy=(proxy)\n+          case proxy\n+          when Hash\n+            @capabilities[:proxy] = Proxy.new(proxy)\n+          when Proxy, nil\n+            @capabilities[:proxy] = proxy\n+          else\n+            raise TypeError, \"expected Hash or #{Proxy.name}, got #{proxy.inspect}:#{proxy.class}\"\n+          end\n+        end\n+\n+        # @api private\n+        #\n+\n+        def as_json(opts = nil)\n+          hash = {}\n+\n+          @capabilities.each do |key, value|\n+            case key\n+            when :platform\n+              hash['platform'] = value.to_s.upcase\n+            when :proxy\n+              hash['proxy'] = value.as_json if value\n+            when String, :firefox_binary\n+              hash[key.to_s] = value\n+            when Symbol\n+              hash[camel_case(key.to_s)] = value\n+            else\n+              raise TypeError, \"expected String or Symbol, got #{key.inspect}:#{key.class} / #{value.inspect}\"\n+            end\n+          end\n+\n+          hash\n+        end\n+\n+        def to_json(*args)\n+          WebDriver.json_dump as_json\n+        end\n+\n+        def ==(other)\n+          return false unless other.kind_of? self.class\n+          as_json == other.as_json\n+        end\n+\n+        alias_method :eql?, :==\n+\n+        protected\n+\n+        def capabilities\n+          @capabilities\n+        end\n+\n+        private\n+\n+        def camel_case(str)\n+          str.gsub(/_([a-z])/) { $1.upcase }\n+        end\n+\n+      end # W3CCapabilities\n+    end # Remote\n+  end # WebDriver\n+end # Selenium\n\ndiff --git a/rb/lib/selenium/webdriver/remote/w3c_commands.rb b/rb/lib/selenium/webdriver/remote/w3c_commands.rb\nindex 0000000000..0548e1bc24 100644\n--- a/rb/lib/selenium/webdriver/remote/w3c_commands.rb\n+++ b/rb/lib/selenium/webdriver/remote/w3c_commands.rb\n@@ -0,0 +1,133 @@\n+# encoding: utf-8\n+#\n+# Licensed to the Software Freedom Conservancy (SFC) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The SFC licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+class Selenium::WebDriver::Remote::W3CBridge\n+\n+  #\n+  # http://www.w3.org/TR/2015/WD-webdriver-20150918/#list-of-endpoints\n+  #\n+\n+  #\n+  # session handling\n+  #\n+\n+  command :newSession,                 :post,    \"session\"\n+  command :deleteSession,              :delete,  \"session/:session_id\"\n+\n+\n+  #\n+  # basic driver\n+  #\n+\n+  command :get,                        :post,    \"session/:session_id/url\"\n+  command :getCurrentUrl,              :get,     \"session/:session_id/url\"\n+  command :back,                       :post,    \"session/:session_id/back\"\n+  command :forward,                    :post,    \"session/:session_id/forward\"\n+  command :refresh,                    :post,    \"session/:session_id/refresh\"\n+  command :getTitle,                   :get,     \"session/:session_id/title\"\n+\n+  #\n+  # window and Frame handling\n+  #\n+\n+  command :getWindowHandle,            :get,     \"session/:session_id/window\"\n+  command :closeWindow,                :delete,  \"session/:session_id/window\"\n+  command :switchToWindow,             :post,    \"session/:session_id/window\"\n+  command :getWindowHandles,           :get,     \"session/:session_id/window/handles\"\n+  command :fullscreenWindow,           :post,    \"session/:session_id/window/window/fullscreen\"\n+  command :maximizeWindow,             :post,    \"session/:session_id/window/maximize\"\n+  command :setWindowSize,              :post,    \"session/:session_id/window/size\"\n+  command :getWindowSize,              :get,     \"session/:session_id/window/size\"\n+  command :switchToFrame,              :post,    \"session/:session_id/frame\"\n+  command :switchToParentFrame,        :post,    \"session/:session_id/frame/parent\"\n+\n+  #\n+  # element\n+  #\n+\n+  command :findElement,                :post,    \"session/:session_id/element\"\n+  command :findElements,               :post,    \"session/:session_id/elements\"\n+  command :findChildElement,           :post,    \"session/:session_id/element/:id/element\"\n+  command :findChildElements,          :post,    \"session/:session_id/element/:id/elements\"\n+  command :getActiveElement,           :post,    \"session/:session_id/element/active\"\n+  command :isElementDisplayed,         :get,     \"session/:session_id/element/:id/displayed\"\n+  command :isElementSelected,          :get,     \"session/:session_id/element/:id/selected\"\n+  command :getElementAttribute,        :get,     \"session/:session_id/element/:id/attribute/:name\"\n+  command :getElementProperty,         :get,     \"session/:session_id/element/:id/property/:name\"\n+  command :getElementCssValue,         :get,     \"session/:session_id/element/:id/css/:property_name\"\n+  command :getElementText,             :get,     \"session/:session_id/element/:id/text\"\n+  command :getElementTagName,          :get,     \"session/:session_id/element/:id/name\"\n+  command :getElementRect,             :get,     \"session/:session_id/element/:id/rect\"\n+  command :isElementEnabled,           :get,     \"session/:session_id/element/:id/enabled\"\n+\n+  #\n+  # script execution\n+  #\n+\n+  command :executeScript,              :post,    \"session/:session_id/execute/sync\"\n+  command :executeAsyncScript,         :post,    \"session/:session_id/execute/async\"\n+\n+  #\n+  # cookies\n+  #\n+\n+  command :getAllCookies,              :get,     \"session/:session_id/cookie\"\n+  command :getCookie,                  :get,     \"session/:session_id/cookie/:name\"\n+  command :addCookie,                  :post,    \"session/:session_id/cookie\"\n+  command :deleteCookie,               :delete,  \"session/:session_id/cookie/:name\"\n+\n+  #\n+  # timeouts\n+  #\n+\n+  command :setTimeout,                 :post,    \"session/:session_id/timeouts\"\n+\n+  #\n+  # actions\n+  #\n+\n+  command :actions,                    :post,    \"session/:session_id/actions\"\n+\n+\n+  #\n+  # Element Operations\n+  #\n+\n+  command :elementClick,               :post,    \"session/:session_id/element/:id/click\"\n+  command :elementTap,                 :post,    \"session/:session_id/element/:id/tap\"\n+  command :elementClear,               :post,    \"session/:session_id/element/:id/clear\"\n+  command :elementSendKeys,            :post,    \"session/:session_id/element/:id/value\"\n+\n+  #\n+  # alerts\n+  #\n+\n+  command :dismissAlert,               :post,    \"session/:session_id/alert/dismiss\"\n+  command :acceptAlert,                :post,    \"session/:session_id/alert/accept\"\n+  command :getAlertText,               :get,     \"session/:session_id/alert/text\"\n+  command :sendAlertText,              :post,    \"session/:session_id/alert/text\"\n+\n+  #\n+  # screenshot\n+  #\n+\n+  command :takeScreenshot,             :get,     \"session/:session_id/screenshot\"\n+  command :takeElementScreenshot,      :get,     \"session/:session_id/element/:id/screenshot\"\n+\n+end\n", "test_patch": "diff --git a/rb/spec/integration/selenium/webdriver/driver_spec.rb b/rb/spec/integration/selenium/webdriver/driver_spec.rb\nindex 9d9089dae0..1b843828a6 100644\n--- a/rb/spec/integration/selenium/webdriver/driver_spec.rb\n+++ b/rb/spec/integration/selenium/webdriver/driver_spec.rb\n@@ -25,9 +25,12 @@\n     expect(driver.title).to eq(\"XHTML Test Page\")\n   end\n \n-  it \"should get the page source\" do\n-    driver.navigate.to url_for(\"xhtmlTest.html\")\n-    expect(driver.page_source).to match(%r[<title>XHTML Test Page</title>]i)\n+  # Marionette BUG - AutomatedTester: \"I need to add pagesource back and add it to the spec\"\n+  not_compliant_on :w3c => true do\n+    it \"should get the page source\" do\n+      driver.navigate.to url_for(\"xhtmlTest.html\")\n+      expect(driver.page_source).to match(%r[<title>XHTML Test Page</title>]i)\n+    end\n   end\n \n   not_compliant_on :browser => :safari do\n@@ -211,10 +214,13 @@\n       expect(driver.execute_script('return [\"zero\", \"one\", \"two\"];')).to eq(%w[zero one two])\n     end\n \n-    it \"should be able to call functions on the page\" do\n-      driver.navigate.to url_for(\"javascriptPage.html\")\n-      driver.execute_script(\"displayMessage('I like cheese');\")\n-      expect(driver.find_element(:id, \"result\").text.strip).to eq(\"I like cheese\")\n+    # Marionette BUG - Not finding local javascript for execution\n+    not_compliant_on :w3c => true do\n+      it \"should be able to call functions on the page\" do\n+        driver.navigate.to url_for(\"javascriptPage.html\")\n+        driver.execute_script(\"displayMessage('I like cheese');\")\n+        expect(driver.find_element(:id, \"result\").text.strip).to eq(\"I like cheese\")\n+      end\n     end\n \n     it \"should be able to pass string arguments\" do\n@@ -277,7 +283,7 @@\n           expect {\n             # Script is expected to be async and explicitly callback, so this should timeout.\n             driver.execute_async_script \"return 1 + 2;\"\n-          }.to raise_error(Selenium::WebDriver::Error::ScriptTimeOutError)\n+          }.to raise_error(Selenium::WebDriver::Error::ScriptTimeoutError)\n         end\n       end\n     end\n\ndiff --git a/rb/spec/integration/selenium/webdriver/element_spec.rb b/rb/spec/integration/selenium/webdriver/element_spec.rb\nindex c9d655b0ae..ac8746f62c 100644\n--- a/rb/spec/integration/selenium/webdriver/element_spec.rb\n+++ b/rb/spec/integration/selenium/webdriver/element_spec.rb\n@@ -26,9 +26,12 @@\n     driver.find_element(:id, \"imageButton\").click\n   end\n \n-  it \"should submit\" do\n-    driver.navigate.to url_for(\"formPage.html\")\n-    driver.find_element(:id, \"submitButton\").submit\n+  # Marionette BUG - AutomatedTester: \"known bug with execute script\"\n+  not_compliant_on :w3c => true do\n+    it \"should submit\" do\n+      driver.navigate.to url_for(\"formPage.html\")\n+      driver.find_element(:id, \"submitButton\").submit\n+    end\n   end\n \n   it \"should send string keys\" do\n@@ -46,8 +49,12 @@\n     end\n   end\n \n+  # FIXME - Find alternate implementation for File Uploads\n+  # TODO - Figure out if/how this works on Firefox/Chrome without Remote server\n   # PhantomJS on windows issue: https://github.com/ariya/phantomjs/issues/10993\n-  not_compliant_on({:browser => [:android, :iphone, :safari, :edge]}, {:browser => :phantomjs, :platform => :windows}) do\n+  not_compliant_on({:browser => [:android, :iphone, :safari, :edge]},\n+                   {:browser => :phantomjs, :platform => :windows},\n+                   {:w3c => true}) do\n     it \"should handle file uploads\" do\n       driver.navigate.to url_for(\"formPage.html\")\n \n@@ -124,30 +131,38 @@\n     expect(driver.find_element(:class, \"header\")).to be_displayed\n   end\n \n-  it \"should get location\" do\n-    driver.navigate.to url_for(\"xhtmlTest.html\")\n-    loc = driver.find_element(:class, \"header\").location\n+  # Location not currently supported in Spec, but should be?\n+  not_compliant_on :w3c => true do\n+    it \"should get location\" do\n+      driver.navigate.to url_for(\"xhtmlTest.html\")\n+      loc = driver.find_element(:class, \"header\").location\n \n-    expect(loc.x).to be >= 1\n-    expect(loc.y).to be >= 1\n-  end\n+      expect(loc.x).to be >= 1\n+      expect(loc.y).to be >= 1\n+    end\n \n-  not_compliant_on :browser => [:iphone] do\n-    it \"should get location once scrolled into view\" do\n-      driver.navigate.to url_for(\"javascriptPage.html\")\n-      loc = driver.find_element(:id, 'keyUp').location_once_scrolled_into_view\n+    not_compliant_on :browser => [:iphone] do\n+      it \"should get location once scrolled into view\" do\n+        driver.navigate.to url_for(\"javascriptPage.html\")\n+        loc = driver.find_element(:id, 'keyUp').location_once_scrolled_into_view\n \n-      expect(loc.x).to be >= 1\n-      expect(loc.y).to be >= 0 # can be 0 if scrolled to the top\n+        expect(loc.x).to be >= 1\n+        expect(loc.y).to be >= 0 # can be 0 if scrolled to the top\n+      end\n     end\n   end\n \n-  it \"should get size\" do\n-    driver.navigate.to url_for(\"xhtmlTest.html\")\n-    size = driver.find_element(:class, \"header\").size\n+  # Marionette BUG:\n+  # GET /session/f7082a32-e685-2843-ad2c-5bb6f376dac5/element/b6ff4468-ed6f-7c44-be4b-ca5a3ea8bf26/size\n+  # did not match a known command\"\n+  not_compliant_on :w3c => true do\n+    it \"should get size\" do\n+      driver.navigate.to url_for(\"xhtmlTest.html\")\n+      size = driver.find_element(:class, \"header\").size\n \n-    expect(size.width).to be > 0\n-    expect(size.height).to be > 0\n+      expect(size.width).to be > 0\n+      expect(size.height).to be > 0\n+    end\n   end\n \n   compliant_on :driver => [:ie, :chrome, :edge] do # Firefox w/native events: issue 1771\n\ndiff --git a/rb/spec/integration/selenium/webdriver/firefox/driver_spec.rb b/rb/spec/integration/selenium/webdriver/firefox/driver_spec.rb\nindex e46af7713e..30b3b64976 100644\n--- a/rb/spec/integration/selenium/webdriver/firefox/driver_spec.rb\n+++ b/rb/spec/integration/selenium/webdriver/firefox/driver_spec.rb\n@@ -21,14 +21,16 @@ module Selenium\n   module WebDriver\n     module Firefox\n \n-      describe Driver do\n-        describe \".new\" do\n-          it \"should take a Firefox::Profile instance as argument\" do\n-            begin\n-              profile = Selenium::WebDriver::Firefox::Profile.new\n-              driver = Selenium::WebDriver.for :firefox, :profile => profile\n-            ensure\n-              driver.quit if driver\n+      not_compliant_on :w3c => true do\n+        describe Driver do\n+          describe \".new\" do\n+            it \"should take a Firefox::Profile instance as argument\" do\n+              begin\n+                profile = Selenium::WebDriver::Firefox::Profile.new\n+                driver = Selenium::WebDriver.for :firefox, :profile => profile\n+              ensure\n+                driver.quit if driver\n+              end\n             end\n           end\n         end\n\ndiff --git a/rb/spec/integration/selenium/webdriver/firefox/profile_spec.rb b/rb/spec/integration/selenium/webdriver/firefox/profile_spec.rb\nindex 75b342c60c..1879acdf2d 100644\n--- a/rb/spec/integration/selenium/webdriver/firefox/profile_spec.rb\n+++ b/rb/spec/integration/selenium/webdriver/firefox/profile_spec.rb\n@@ -141,15 +141,18 @@ def read_generated_prefs(from = nil)\n           expect(string).to include('user_pref(\"network.proxy.type\", 4)')\n         end\n \n-        it \"should be able to use the same profile more than once\" do\n-          profile['browser.startup.homepage'] = url_for(\"formPage.html\")\n-\n-          begin\n-            driver_one = WebDriver.for(:firefox, :profile => profile)\n-            driver_two = WebDriver.for(:firefox, :profile => profile)\n-          ensure\n-            driver_one.quit if driver_one\n-            driver_two.quit if driver_two\n+        # W3C does not allow more than one browser on same endpoint node\n+        not_compliant_on :w3c => true do\n+          it \"should be able to use the same profile more than once\" do\n+            profile['browser.startup.homepage'] = url_for(\"formPage.html\")\n+\n+            begin\n+              driver_one = WebDriver.for(:firefox, :profile => profile)\n+              driver_two = WebDriver.for(:firefox, :profile => profile)\n+            ensure\n+              driver_one.quit if driver_one\n+              driver_two.quit if driver_two\n+            end\n           end\n         end\n \n\ndiff --git a/rb/spec/integration/selenium/webdriver/keyboard_spec.rb b/rb/spec/integration/selenium/webdriver/keyboard_spec.rb\nindex 7d0b9ebdae..9f0d45dfdc 100644\n--- a/rb/spec/integration/selenium/webdriver/keyboard_spec.rb\n+++ b/rb/spec/integration/selenium/webdriver/keyboard_spec.rb\n@@ -22,53 +22,55 @@\n module Selenium\n   module WebDriver\n \n-      not_compliant_on({:browser => [:chrome, :android, :iphone, :safari]}) do\n-        describe Keyboard do\n-          it \"sends keys to the active element\" do\n-            driver.navigate.to url_for(\"bodyTypingTest.html\")\n+    # Marionette BUG - Interactions Not Supported\n+    not_compliant_on({:browser => [:chrome, :android, :iphone, :safari]},\n+                     {:w3c => true}) do\n+      describe Keyboard do\n+        it \"sends keys to the active element\" do\n+          driver.navigate.to url_for(\"bodyTypingTest.html\")\n \n-            driver.keyboard.send_keys \"ab\"\n+          driver.keyboard.send_keys \"ab\"\n \n-            text = driver.find_element(:id => \"body_result\").text.strip\n-            expect(text).to eq(\"keypress keypress\")\n+          text = driver.find_element(:id => \"body_result\").text.strip\n+          expect(text).to eq(\"keypress keypress\")\n \n-            expect(driver.find_element(:id => \"result\").text.strip).to be_empty\n-          end\n+          expect(driver.find_element(:id => \"result\").text.strip).to be_empty\n+        end\n \n-          it \"can send keys with shift pressed\" do\n-            driver.navigate.to url_for(\"javascriptPage.html\")\n+        it \"can send keys with shift pressed\" do\n+          driver.navigate.to url_for(\"javascriptPage.html\")\n \n-            event_input = driver.find_element(:id => \"theworks\")\n-            keylogger = driver.find_element(:id => \"result\")\n+          event_input = driver.find_element(:id => \"theworks\")\n+          keylogger = driver.find_element(:id => \"result\")\n \n-            driver.mouse.click event_input\n+          driver.mouse.click event_input\n \n-            driver.keyboard.press :shift\n-            driver.keyboard.send_keys \"ab\"\n-            driver.keyboard.release :shift\n+          driver.keyboard.press :shift\n+          driver.keyboard.send_keys \"ab\"\n+          driver.keyboard.release :shift\n \n-            expect(event_input.attribute(:value)).to eq(\"AB\")\n-            expect(keylogger.text.strip).to match(/^(focus )?keydown keydown keypress keyup keydown keypress keyup keyup$/)\n-          end\n+          expect(event_input.attribute(:value)).to eq(\"AB\")\n+          expect(keylogger.text.strip).to match(/^(focus )?keydown keydown keypress keyup keydown keypress keyup keyup$/)\n+        end\n \n-          it \"raises an ArgumentError if the pressed key is not a modifier key\" do\n-            expect { driver.keyboard.press :return }.to raise_error(ArgumentError)\n-          end\n+        it \"raises an ArgumentError if the pressed key is not a modifier key\" do\n+          expect { driver.keyboard.press :return }.to raise_error(ArgumentError)\n+        end\n \n-          it \"can press and release modifier keys\" do\n-            driver.navigate.to url_for(\"javascriptPage.html\")\n+        it \"can press and release modifier keys\" do\n+          driver.navigate.to url_for(\"javascriptPage.html\")\n \n-            event_input = driver.find_element(:id => \"theworks\")\n-            keylogger = driver.find_element(:id => \"result\")\n+          event_input = driver.find_element(:id => \"theworks\")\n+          keylogger = driver.find_element(:id => \"result\")\n \n-            driver.mouse.click event_input\n+          driver.mouse.click event_input\n \n-            driver.keyboard.press :shift\n-            expect(keylogger.text).to match(/keydown *$/)\n+          driver.keyboard.press :shift\n+          expect(keylogger.text).to match(/keydown *$/)\n \n-            driver.keyboard.release :shift\n-            expect(keylogger.text).to match(/keyup *$/)\n-          end\n+          driver.keyboard.release :shift\n+          expect(keylogger.text).to match(/keyup *$/)\n+        end\n       end # Keyboard\n     end\n   end # WebDriver\n\ndiff --git a/rb/spec/integration/selenium/webdriver/mouse_spec.rb b/rb/spec/integration/selenium/webdriver/mouse_spec.rb\nindex 8415ebc3b1..c96c9cf24b 100644\n--- a/rb/spec/integration/selenium/webdriver/mouse_spec.rb\n+++ b/rb/spec/integration/selenium/webdriver/mouse_spec.rb\n@@ -24,7 +24,9 @@ module WebDriver\n \n     describe Mouse do\n \n-      not_compliant_on :browser => [:android, :iphone, :safari] do\n+      # Marionette BUG - Interactions Not Supported\n+      not_compliant_on({:browser => [:android, :iphone, :safari]},\n+                       {:w3c => true}) do\n         it \"clicks an element\" do\n           driver.navigate.to url_for(\"formPage.html\")\n           driver.mouse.click driver.find_element(:id, \"imageButton\")\n\ndiff --git a/rb/spec/integration/selenium/webdriver/options_spec.rb b/rb/spec/integration/selenium/webdriver/options_spec.rb\nindex f7566d553d..e9b93f5c4e 100644\n--- a/rb/spec/integration/selenium/webdriver/options_spec.rb\n+++ b/rb/spec/integration/selenium/webdriver/options_spec.rb\n@@ -23,26 +23,29 @@ module Selenium\n   module WebDriver\n     describe Options do\n \n-      describe 'logs' do\n-        compliant_on :driver => [:firefox] do\n-          it 'can fetch available log types' do\n-            expect(driver.manage.logs.available_types).to eq([:browser, :driver])\n-          end\n+      # Not supported in W3C Spec\n+      not_compliant_on :w3c => true do\n+        describe 'logs' do\n+          compliant_on :driver => [:firefox] do\n+            it 'can fetch available log types' do\n+              expect(driver.manage.logs.available_types).to eq([:browser, :driver])\n+            end\n \n-          it 'can get the browser log' do\n-            driver.navigate.to url_for(\"simpleTest.html\")\n+            it 'can get the browser log' do\n+              driver.navigate.to url_for(\"simpleTest.html\")\n \n-            entries = driver.manage.logs.get(:browser)\n-            expect(entries).not_to be_empty\n-            expect(entries.first).to be_kind_of(LogEntry)\n-          end\n+              entries = driver.manage.logs.get(:browser)\n+              expect(entries).not_to be_empty\n+              expect(entries.first).to be_kind_of(LogEntry)\n+            end\n \n-          it 'can get the driver log' do\n-            driver.navigate.to url_for(\"simpleTest.html\")\n+            it 'can get the driver log' do\n+              driver.navigate.to url_for(\"simpleTest.html\")\n \n-            entries = driver.manage.logs.get(:driver)\n-            expect(entries).not_to be_empty\n-            expect(entries.first).to be_kind_of(LogEntry)\n+              entries = driver.manage.logs.get(:driver)\n+              expect(entries).not_to be_empty\n+              expect(entries.first).to be_kind_of(LogEntry)\n+            end\n           end\n         end\n       end\n@@ -81,7 +84,9 @@ module WebDriver\n             end\n           end\n \n-          not_compliant_on :browser => [:ie, :android, :iphone, :safari] do\n+          # Marionette BUG - Failed to convert expiry to Date\n+          not_compliant_on({:browser => [:ie, :android, :iphone, :safari]},\n+                           {:w3c => true}) do\n             it \"should use DateTime for expires\" do\n               driver.navigate.to url_for(\"xhtmlTest.html\")\n \n@@ -96,7 +101,6 @@ module WebDriver\n             end\n           end\n         end\n-\n       end\n     end\n   end\n\ndiff --git a/rb/spec/integration/selenium/webdriver/spec_support/guards.rb b/rb/spec/integration/selenium/webdriver/spec_support/guards.rb\nindex 2633288276..dcc3555b6b 100644\n--- a/rb/spec/integration/selenium/webdriver/spec_support/guards.rb\n+++ b/rb/spec/integration/selenium/webdriver/spec_support/guards.rb\n@@ -76,7 +76,8 @@ def current_env\n               :driver         => GlobalTestEnv.driver,\n               :platform       => Platform.os,\n               :native         => GlobalTestEnv.native_events?,\n-              :window_manager => !!ENV['DESKTOP_SESSION']\n+              :window_manager => !!ENV['DESKTOP_SESSION'],\n+              :w3c            => GlobalTestEnv.w3c?(:browser_name => GlobalTestEnv.driver)\n             }\n           end\n \n\ndiff --git a/rb/spec/integration/selenium/webdriver/spec_support/test_environment.rb b/rb/spec/integration/selenium/webdriver/spec_support/test_environment.rb\nindex 4608c7ee9d..ab37bb9c35 100644\n--- a/rb/spec/integration/selenium/webdriver/spec_support/test_environment.rb\n+++ b/rb/spec/integration/selenium/webdriver/spec_support/test_environment.rb\n@@ -35,8 +35,9 @@ def initialize\n \n         def browser\n           if driver == :remote\n-            # TODO: get rid of ENV\n             (ENV['WD_REMOTE_BROWSER'] || :firefox).to_sym\n+          elsif driver == :firefox_nightly\n+            :firefox\n           else\n             driver\n           end\n@@ -107,6 +108,10 @@ def native_events?\n           @native_events ||= !!ENV['native']\n         end\n \n+        def w3c?(opt = {})\n+          Remote::W3CCapabilities.w3c?(opt)\n+        end\n+\n         def url_for(filename)\n           url = app_server.where_is filename\n           url.sub!(\"127.0.0.1\", \"10.0.2.2\") if browser == :android\n\ndiff --git a/rb/spec/integration/selenium/webdriver/target_locator_spec.rb b/rb/spec/integration/selenium/webdriver/target_locator_spec.rb\nindex 250c45319e..aabc44ae1d 100644\n--- a/rb/spec/integration/selenium/webdriver/target_locator_spec.rb\n+++ b/rb/spec/integration/selenium/webdriver/target_locator_spec.rb\n@@ -27,9 +27,14 @@\n   let(:wait) { Selenium::WebDriver::Wait.new }\n   let(:new_window) { driver.window_handles.find {|handle| handle != driver.window_handle} }\n \n-  it \"should find the active element\" do\n-    driver.navigate.to url_for(\"xhtmlTest.html\")\n-    expect(driver.switch_to.active_element).to be_an_instance_of(WebDriver::Element)\n+  # Marionette Bug -\n+  # POST /session/f7082a32-e685-2843-ad2c-5bb6f376dac5/element/active\n+  # did not match a known command\n+  not_compliant_on :w3c => true do\n+    it \"should find the active element\" do\n+      driver.navigate.to url_for(\"xhtmlTest.html\")\n+      expect(driver.switch_to.active_element).to be_an_instance_of(WebDriver::Element)\n+    end\n   end\n \n   it \"should switch to a frame\" do\n@@ -48,7 +53,9 @@\n     expect(driver.find_element(:name, 'login')).to be_kind_of(WebDriver::Element)\n   end\n \n-  not_compliant_on :browser => [:safari, :phantomjs] do\n+  # Marionette Bug - Marionette Error: switchToParentFrame\n+  not_compliant_on({:browser => [:safari, :phantomjs]},\n+                   {:w3c => true}) do\n     it \"should switch to parent frame\" do\n       driver.navigate.to url_for(\"iframes.html\")\n \n@@ -118,60 +125,63 @@\n       end\n     end\n \n-    it \"should close current window when more than two windows exist\" do\n-      driver.navigate.to url_for(\"xhtmlTest.html\")\n-      driver.find_element(:link, \"Create a new anonymous window\").click\n-      driver.find_element(:link, \"Open new window\").click\n+    # Marionette BUG: Automatically switches browsing context to new window when it opens.\n+    not_compliant_on :w3c => true do\n+      it \"should close current window when more than two windows exist\" do\n+        driver.navigate.to url_for(\"xhtmlTest.html\")\n+        driver.find_element(:link, \"Create a new anonymous window\").click\n+        driver.find_element(:link, \"Open new window\").click\n \n-      wait.until { driver.window_handles.size == 3 }\n+        wait.until { driver.window_handles.size == 3 }\n \n-      driver.switch_to.window(driver.window_handle) {driver.close}\n-      expect(driver.window_handles.size).to eq 2\n-    end\n+        driver.switch_to.window(driver.window_handle) {driver.close}\n+        expect(driver.window_handles.size).to eq 2\n+      end\n \n-    it \"should close another window when more than two windows exist\" do\n-      driver.navigate.to url_for(\"xhtmlTest.html\")\n-      driver.find_element(:link, \"Create a new anonymous window\").click\n-      driver.find_element(:link, \"Open new window\").click\n+      it \"should close another window when more than two windows exist\" do\n+        driver.navigate.to url_for(\"xhtmlTest.html\")\n+        driver.find_element(:link, \"Create a new anonymous window\").click\n+        driver.find_element(:link, \"Open new window\").click\n \n-      wait.until { driver.window_handles.size == 3 }\n+        wait.until { driver.window_handles.size == 3 }\n \n-      window_to_close = driver.window_handles.last\n+        window_to_close = driver.window_handles.last\n \n-      driver.switch_to.window(window_to_close) { driver.close }\n-      expect(driver.window_handles.size).to eq 2\n-    end\n+        driver.switch_to.window(window_to_close) { driver.close }\n+        expect(driver.window_handles.size).to eq 2\n+      end\n \n-    it \"should iterate over open windows when current window is not closed\" do\n-      driver.navigate.to url_for(\"xhtmlTest.html\")\n-      driver.find_element(:link, \"Create a new anonymous window\").click\n-      driver.find_element(:link, \"Open new window\").click\n+      it \"should iterate over open windows when current window is not closed\" do\n+        driver.navigate.to url_for(\"xhtmlTest.html\")\n+        driver.find_element(:link, \"Create a new anonymous window\").click\n+        driver.find_element(:link, \"Open new window\").click\n+\n+        wait.until { driver.window_handles.size == 3 }\n \n-      wait.until { driver.window_handles.size == 3 }\n+        matching_window = driver.window_handles.find do |wh|\n+          driver.switch_to.window(wh) { driver.title == \"We Arrive Here\" }\n+        end\n \n-      matching_window = driver.window_handles.find do |wh|\n-        driver.switch_to.window(wh) { driver.title == \"We Arrive Here\" }\n+        driver.switch_to.window(matching_window)\n+        expect(driver.title).to eq(\"We Arrive Here\")\n       end\n \n-      driver.switch_to.window(matching_window)\n-      expect(driver.title).to eq(\"We Arrive Here\")\n-    end\n+      it \"should iterate over open windows when current window is closed\" do\n+        driver.navigate.to url_for(\"xhtmlTest.html\")\n+        driver.find_element(:link, \"Create a new anonymous window\").click\n+        driver.find_element(:link, \"Open new window\").click\n \n-    it \"should iterate over open windows when current window is closed\" do\n-      driver.navigate.to url_for(\"xhtmlTest.html\")\n-      driver.find_element(:link, \"Create a new anonymous window\").click\n-      driver.find_element(:link, \"Open new window\").click\n+        wait.until { driver.window_handles.size == 3 }\n \n-      wait.until { driver.window_handles.size == 3 }\n+        driver.close\n \n-      driver.close\n+        matching_window = driver.window_handles.find do |wh|\n+          driver.switch_to.window(wh) { driver.title == \"We Arrive Here\" }\n+        end\n \n-      matching_window = driver.window_handles.find do |wh|\n-        driver.switch_to.window(wh) { driver.title == \"We Arrive Here\" }\n+        driver.switch_to.window(matching_window)\n+        expect(driver.title).to eq(\"We Arrive Here\")\n       end\n-\n-      driver.switch_to.window(matching_window)\n-      expect(driver.title).to eq(\"We Arrive Here\")\n     end\n \n     # Edge BUG - https://connect.microsoft.com/IE/feedback/details/1850028\n@@ -211,14 +221,14 @@\n   not_compliant_on :browser => [:iphone, :safari, :phantomjs, :edge] do\n     describe \"alerts\" do\n       it \"allows the user to accept an alert\" do\n-          driver.navigate.to url_for(\"alerts.html\")\n-          driver.find_element(:id => \"alert\").click\n+        driver.navigate.to url_for(\"alerts.html\")\n+        driver.find_element(:id => \"alert\").click\n \n-          alert = wait_for_alert\n-          alert.accept\n+        alert = wait_for_alert\n+        alert.accept\n \n-          expect(driver.title).to eq(\"Testing Alerts\")\n-        end\n+        expect(driver.title).to eq(\"Testing Alerts\")\n+      end\n \n       not_compliant_on({:browser => :chrome, :platform => :macosx}) do\n         it \"allows the user to dismiss an alert\" do\n@@ -234,16 +244,22 @@\n         end\n       end\n \n-       it \"allows the user to set the value of a prompt\" do\n-        driver.navigate.to url_for(\"alerts.html\")\n-        driver.find_element(:id => \"prompt\").click\n+      # Marionette BUG - http://www.w3.org/TR/webdriver/#send-alert-text\n+      # Says message should be an array (I think), but we're getting\n+      # InvalidArgumentError: 'message' not a string\n+      # When trying a string, error: keysToSend.join is not a function\n+      not_compliant_on :w3c => true do\n+        it \"allows the user to set the value of a prompt\" do\n+          driver.navigate.to url_for(\"alerts.html\")\n+          driver.find_element(:id => \"prompt\").click\n \n-        alert = wait_for_alert\n-        alert.send_keys \"cheese\"\n-        alert.accept\n+          alert = wait_for_alert\n+          alert.send_keys \"cheese\"\n+          alert.accept\n \n-        text = driver.find_element(:id => \"text\").text\n-        expect(text).to eq(\"cheese\")\n+          text = driver.find_element(:id => \"text\").text\n+          expect(text).to eq(\"cheese\")\n+        end\n       end\n \n       it \"allows the user to get the text of an alert\" do\n@@ -264,25 +280,30 @@\n         alert = wait_for_alert\n         alert.accept\n \n-        expect { alert.text }.to raise_error(Selenium::WebDriver::Error::NoAlertPresentError)\n+        expect { alert.text }.to raise_error(Selenium::WebDriver::Error::NoSuchAlertError)\n       end\n \n       not_compliant_on :browser => :ie do\n         it \"raises NoAlertOpenError if no alert is present\" do\n-          expect { driver.switch_to.alert }.to raise_error(\n-            Selenium::WebDriver::Error::NoAlertPresentError, /alert|modal dialog/i)\n+          expect { driver.switch_to.alert }.to raise_error(Selenium::WebDriver::Error::NoSuchAlertError, /alert|modal/i)\n         end\n       end\n \n       compliant_on :browser => [:firefox, :ie] do\n-        it \"raises an UnhandledAlertError if an alert has not been dealt with\" do\n-          driver.navigate.to url_for(\"alerts.html\")\n-          driver.find_element(:id => \"alert\").click\n-          wait_for_alert\n+        # Marionette BUG - Allows driver calls with alert present\n+        # Spec says: \"If the subsequent requested command is not one listed\n+        # in this chapter, an unexpected alert open error will be returned.\"\n+        not_compliant_on :w3c => true do\n+\n+          it \"raises an UnhandledAlertError if an alert has not been dealt with\" do\n+            driver.navigate.to url_for(\"alerts.html\")\n+            driver.find_element(:id => \"alert\").click\n+            wait_for_alert\n \n-          expect { driver.title }.to raise_error(Selenium::WebDriver::Error::UnhandledAlertError, /cheese/)\n+            expect { driver.title }.to raise_error(Selenium::WebDriver::Error::UnhandledAlertError, /cheese/)\n \n-          expect(driver.title).to eq(\"Testing Alerts\") # :chrome does not auto-dismiss the alert\n+            expect(driver.title).to eq(\"Testing Alerts\") # :chrome does not auto-dismiss the alert\n+          end\n         end\n       end\n     end\n\ndiff --git a/rb/spec/integration/selenium/webdriver/timeout_spec.rb b/rb/spec/integration/selenium/webdriver/timeout_spec.rb\nindex dd9b9ee82f..f54a4fe2df 100644\n--- a/rb/spec/integration/selenium/webdriver/timeout_spec.rb\n+++ b/rb/spec/integration/selenium/webdriver/timeout_spec.rb\n@@ -63,14 +63,16 @@\n       expect(driver.find_elements(:class_name => \"redbox\")).to be_empty\n     end\n \n-    it \"should return after first attempt to find many after disabling implicit waits\" do\n-      add = driver.find_element(:id => \"adder\")\n+    not_compliant_on(:w3c => true, :platform => :windows) do\n+      it \"should return after first attempt to find many after disabling implicit waits\" do\n+        add = driver.find_element(:id => \"adder\")\n \n-      driver.manage.timeouts.implicit_wait = 3\n-      driver.manage.timeouts.implicit_wait = 0\n-      add.click\n+        driver.manage.timeouts.implicit_wait = 3\n+        driver.manage.timeouts.implicit_wait = 0\n+        add.click\n \n-      expect(driver.find_elements(:class_name => \"redbox\")).to be_empty\n+        expect(driver.find_elements(:class_name => \"redbox\")).to be_empty\n+      end\n     end\n   end\n \n\ndiff --git a/rb/spec/integration/selenium/webdriver/window_spec.rb b/rb/spec/integration/selenium/webdriver/window_spec.rb\nindex 3f2fafa4e0..e0184cada5 100644\n--- a/rb/spec/integration/selenium/webdriver/window_spec.rb\n+++ b/rb/spec/integration/selenium/webdriver/window_spec.rb\n@@ -47,33 +47,37 @@ module WebDriver\n           expect(new_size.height).to eq(target_height)\n         end\n \n-        it \"gets the position of the current window\" do\n-          pos = driver.manage.window.position\n+        # Marionette BUG -\n+        # GET /session/2146a9d2-690a-4844-a5f4-e38b02d670c3/window/:window_handle/position\n+        # did not match a known command\n+        not_compliant_on :w3c => true do\n+          it \"gets the position of the current window\" do\n+            pos = driver.manage.window.position\n \n-          expect(pos).to be_kind_of(Point)\n+            expect(pos).to be_kind_of(Point)\n \n-          expect(pos.x).to be >= 0\n-          expect(pos.y).to be >= 0\n-        end\n+            expect(pos.x).to be >= 0\n+            expect(pos.y).to be >= 0\n+          end\n \n-        it \"sets the position of the current window\" do\n-          pos = window.position\n+          it \"sets the position of the current window\" do\n+            pos = window.position\n \n-          target_x = pos.x + 10\n-          target_y = pos.y + 10\n+            target_x = pos.x + 10\n+            target_y = pos.y + 10\n \n-          window.position = Point.new(target_x, target_y)\n+            window.position = Point.new(target_x, target_y)\n \n-          new_pos = window.position\n-          expect(new_pos.x).to eq(target_x)\n-          expect(new_pos.y).to eq(target_y)\n+            new_pos = window.position\n+            expect(new_pos.x).to eq(target_x)\n+            expect(new_pos.y).to eq(target_y)\n+          end\n         end\n       end\n \n       compliant_on({:browser => :ie},\n                    {:browser => :edge},\n-                   {:browser => :firefox, :platform => [:windows, :macosx]},\n-                   {:browser => :firefox, :platform => :linux, :window_manager => true}) do\n+                   {:browser => :firefox, :platform => [:windows, :macosx]}) do\n         it \"can maximize the current window\" do\n           window.size = old_size = Dimension.new(200, 200)\n \n\ndiff --git a/rb/spec/unit/selenium/client/protocol_spec.rb b/rb/spec/unit/selenium/client/protocol_spec.rb\nindex 8ca3620864..9e443a3c0e 100644\n--- a/rb/spec/unit/selenium/client/protocol_spec.rb\n+++ b/rb/spec/unit/selenium/client/protocol_spec.rb\n@@ -57,7 +57,7 @@ class ProtocolClient\n \n     it \"succeeds when given zero args\" do\n       expect(client).to receive(:remote_control_command).with(:a_verb, [])\n-      client.string_command:a_verb\n+      client.string_command :a_verb\n     end\n   end\n \n", "instance_id": "seleniumhq__selenium-1103", "fixed_tests": {}, "failed_tests": [], "skipped_tests": [], "run_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "test_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "fix_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "f2p_tests": {}, "p2p_tests": {}, "s2p_tests": {}, "n2p_tests": {}}
{"org": "seleniumhq", "repo": "selenium", "number": 1146, "title": "Delete unused test methods.", "body": "", "state": "closed", "base": {"label": "SeleniumHQ:master", "ref": "master", "sha": "8fba765f1d723ca22c0a41834548d7e4df9c54a8"}, "resolved_issues": [], "fix_patch": "", "test_patch": "diff --git a/java/client/test/org/openqa/selenium/StaleElementReferenceTest.java b/java/client/test/org/openqa/selenium/StaleElementReferenceTest.java\nindex 37352e45c7..7a403158bf 100644\n--- a/java/client/test/org/openqa/selenium/StaleElementReferenceTest.java\n+++ b/java/client/test/org/openqa/selenium/StaleElementReferenceTest.java\n@@ -84,18 +84,4 @@ public void testRemovingAnElementDynamicallyFromTheDomShouldCauseAStaleRefExcept\n     boolean wasStale = wait.until(stalenessOf(toBeDeleted));\n     assertTrue(\"Element should be stale at this point\", wasStale);\n   }\n-\n-  private Callable<Boolean> elementToBeStale(final WebElement element) {\n-    return new Callable<Boolean>() {\n-\n-      public Boolean call() throws Exception {\n-        try {\n-          element.isDisplayed();\n-          return false;\n-        } catch (StaleElementReferenceException e) {\n-          return true;\n-        }\n-      }\n-    };\n-  }\n }\n\ndiff --git a/java/client/test/org/openqa/selenium/interactions/BasicMouseInterfaceTest.java b/java/client/test/org/openqa/selenium/interactions/BasicMouseInterfaceTest.java\nindex 80d677e657..0a0ed74f66 100644\n--- a/java/client/test/org/openqa/selenium/interactions/BasicMouseInterfaceTest.java\n+++ b/java/client/test/org/openqa/selenium/interactions/BasicMouseInterfaceTest.java\n@@ -281,20 +281,6 @@ public void testMovingIntoAnImageEnclosedInALink() {\n     wait.until(titleIs(\"We Arrive Here\"));\n   }\n \n-  @SuppressWarnings(\"unchecked\")\n-  private Map<String, Object> getElementSize(WebElement element) {\n-    return (Map<String, Object>) ((JavascriptExecutor) driver).executeScript(\n-        \"return arguments[0].getBoundingClientRect()\", element);\n-  }\n-\n-  private int getHeight(Map<String, Object> sizeRect) {\n-    if (sizeRect.containsKey(\"height\")) {\n-      return getFieldValue(sizeRect, \"height\");\n-    } else {\n-      return getFieldValue(sizeRect, \"bottom\") - getFieldValue(sizeRect, \"top\");\n-    }\n-  }\n-\n   private int getFieldValue(Map<String, Object> sizeRect, String fieldName) {\n     return (int) Double.parseDouble(sizeRect.get(fieldName).toString());\n   }\n", "instance_id": "seleniumhq__selenium-1146", "fixed_tests": {}, "failed_tests": [], "skipped_tests": [], "run_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "test_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "fix_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "f2p_tests": {}, "p2p_tests": {}, "s2p_tests": {}, "n2p_tests": {}}
{"org": "seleniumhq", "repo": "selenium", "number": 1797, "title": "rb: Extract service into shared superclass", "body": "An attempt to share service implementation between Chrome/Edge/IE/Marionette/PhantomJS to simplify code and make it easier to maintain. Basically do the same thing that is done in Python bindings.\n- [x] Refactor Chrome service to use superclass\n- [x] Refactor Edge service to use superclass\n- [x] Refactor Marionette service to use superclass\n- [x] Refactor PhantomJS service to use superclass\n- [x] Refactor IE server to use superclass (if possible)\n- [x] Run Chrome tests to see if everything is fine\n- [x] Run Edge tests to see if everything is fine\n- [x] Run Marionette tests to see if everything is fine\n- [x] Run PhantomJS tests to see if everything is fine\n- [x] Run IE tests to see if everything is fine (ran IE9 on Windows 7)\n- [x] Document all the API changes (and deprecate)\n- [x] Document all the behaviour changes\n- [x] Fix unit tests\n\n@titusfortner There is still a lot to be done here, but it would be great to hear what you think about it (and should I proceed with it at all).\n", "state": "closed", "base": {"label": "SeleniumHQ:master", "ref": "master", "sha": "051c8b110a1aec35247cd45fa4db85c6e522cdcb"}, "resolved_issues": [], "fix_patch": "diff --git a/rb/CHANGES b/rb/CHANGES\nindex e3d5d5216c..c847591d3d 100644\n--- a/rb/CHANGES\n+++ b/rb/CHANGES\n@@ -1,3 +1,10 @@\n+3.0 (Unreleased)\n+\n+Ruby:\n+  * Chrome/GeckoDriver/PhantomJS/IE/Edge drivers are refactored to use standard\n+    service class (issue 1797)\n+  * Option `:timeout` was removed from IE server (issue 1797)\n+\n 2.53.0 (2016-03-15)\n ===================\n \n\ndiff --git a/rb/lib/selenium/webdriver/chrome.rb b/rb/lib/selenium/webdriver/chrome.rb\nindex df20cbb3b8..21df6a49f7 100644\n--- a/rb/lib/selenium/webdriver/chrome.rb\n+++ b/rb/lib/selenium/webdriver/chrome.rb\n@@ -25,10 +25,22 @@\n \n module Selenium\n   module WebDriver\n-\n     module Chrome\n+      MISSING_TEXT = \"Unable to find the chromedriver executable. Please download the server from http://chromedriver.storage.googleapis.com/index.html and place it somewhere on your PATH. More info at https://github.com/SeleniumHQ/selenium/wiki/ChromeDriver.\"\n+\n       def self.driver_path=(path)\n-        Service.executable_path = path\n+        Platform.assert_executable path\n+        @driver_path = path\n+      end\n+\n+      def self.driver_path\n+        @driver_path ||= begin\n+          path = Platform.find_binary(\"chromedriver\")\n+          path or raise Error::WebDriverError, MISSING_TEXT\n+          Platform.assert_executable path\n+\n+          path\n+        end\n       end\n \n       def self.path=(path)\n\ndiff --git a/rb/lib/selenium/webdriver/chrome/bridge.rb b/rb/lib/selenium/webdriver/chrome/bridge.rb\nindex 2c8eaf4158..098c9b2eca 100644\n--- a/rb/lib/selenium/webdriver/chrome/bridge.rb\n+++ b/rb/lib/selenium/webdriver/chrome/bridge.rb\n@@ -30,7 +30,7 @@ def initialize(opts = {})\n           if opts.has_key?(:url)\n             url = opts.delete(:url)\n           else\n-            @service = Service.default_service(*extract_service_args(opts))\n+            @service = Service.new(Chrome.driver_path, Service::DEFAULT_PORT, *extract_service_args(opts))\n             @service.start\n \n             url = @service.uri\n\ndiff --git a/rb/lib/selenium/webdriver/chrome/service.rb b/rb/lib/selenium/webdriver/chrome/service.rb\nindex 68f103b63c..0f49a5b449 100644\n--- a/rb/lib/selenium/webdriver/chrome/service.rb\n+++ b/rb/lib/selenium/webdriver/chrome/service.rb\n@@ -25,75 +25,11 @@ module Chrome\n       # @api private\n       #\n \n-      class Service\n-        START_TIMEOUT       = 20\n-        SOCKET_LOCK_TIMEOUT = 45\n-        STOP_TIMEOUT        = 5\n-        DEFAULT_PORT        = 9515\n-        MISSING_TEXT        = \"Unable to find the chromedriver executable. Please download the server from http://chromedriver.storage.googleapis.com/index.html and place it somewhere on your PATH. More info at https://github.com/SeleniumHQ/selenium/wiki/ChromeDriver.\"\n-\n-        def self.executable_path\n-          @executable_path ||= (\n-            path = Platform.find_binary \"chromedriver\"\n-            path or raise Error::WebDriverError, MISSING_TEXT\n-            Platform.assert_executable path\n-\n-            path\n-          )\n-        end\n-\n-        def self.executable_path=(path)\n-          Platform.assert_executable path\n-          @executable_path = path\n-        end\n-\n-        def self.default_service(*extra_args)\n-          new executable_path, DEFAULT_PORT, *extra_args\n-        end\n-\n-        def initialize(executable_path, port, *extra_args)\n-          @executable_path = executable_path\n-          @host            = Platform.localhost\n-          @port            = Integer(port)\n-\n-          raise Error::WebDriverError, \"invalid port: #{@port}\" if @port < 1\n-\n-          @extra_args = extra_args\n-        end\n-\n-        def start\n-          Platform.exit_hook { stop } # make sure we don't leave the server running\n-\n-          socket_lock.locked do\n-            find_free_port\n-            start_process\n-            connect_until_stable\n-          end\n-        end\n-\n-        def stop\n-          return if @process.nil? || @process.exited?\n-\n-          Net::HTTP.start(@host, @port) do |http|\n-            http.open_timeout = STOP_TIMEOUT / 2\n-            http.read_timeout = STOP_TIMEOUT / 2\n-\n-            http.get(\"/shutdown\")\n-          end\n-        ensure\n-          stop_process\n-        end\n-\n-        def uri\n-          URI.parse \"http://#{@host}:#{@port}\"\n-        end\n+      class Service < WebDriver::Service\n+        DEFAULT_PORT = 9515\n \n         private\n \n-        def find_free_port\n-          @port = PortProber.above @port\n-        end\n-\n         def start_process\n           server_command = [@executable_path, \"--port=#{@port}\", *@extra_args]\n           @process       = ChildProcess.build(*server_command)\n@@ -102,25 +38,15 @@ def start_process\n           @process.start\n         end\n \n-        def stop_process\n-          @process.poll_for_exit STOP_TIMEOUT\n-        rescue ChildProcess::TimeoutError\n-          @process.stop STOP_TIMEOUT\n-        end\n-\n-        def connect_until_stable\n-          socket_poller = SocketPoller.new @host, @port, START_TIMEOUT\n-\n-          unless socket_poller.connected?\n-            raise Error::WebDriverError, \"unable to connect to chromedriver #{@host}:#{@port}\"\n-          end\n+        def stop_server\n+          connect_to_server { |http| http.get(\"/shutdown\") }\n         end\n \n-        def socket_lock\n-          @socket_lock ||= SocketLock.new(@port - 1, SOCKET_LOCK_TIMEOUT)\n+        def cannot_connect_error_text\n+          \"unable to connect to chromedriver #{@host}:#{@port}\"\n         end\n \n       end # Service\n     end # Chrome\n   end # WebDriver\n-end # Service\n+end # Selenium\n\ndiff --git a/rb/lib/selenium/webdriver/common.rb b/rb/lib/selenium/webdriver/common.rb\nindex b886d676a8..a1ee85184a 100644\n--- a/rb/lib/selenium/webdriver/common.rb\n+++ b/rb/lib/selenium/webdriver/common.rb\n@@ -23,6 +23,7 @@\n require 'selenium/webdriver/common/proxy'\n require 'selenium/webdriver/common/log_entry'\n require 'selenium/webdriver/common/file_reaper'\n+require 'selenium/webdriver/common/service'\n require 'selenium/webdriver/common/socket_lock'\n require 'selenium/webdriver/common/socket_poller'\n require 'selenium/webdriver/common/port_prober'\n\ndiff --git a/rb/lib/selenium/webdriver/common/service.rb b/rb/lib/selenium/webdriver/common/service.rb\nindex 0000000000..a156db1a54 100644\n--- a/rb/lib/selenium/webdriver/common/service.rb\n+++ b/rb/lib/selenium/webdriver/common/service.rb\n@@ -0,0 +1,129 @@\n+# encoding: utf-8\n+#\n+# Licensed to the Software Freedom Conservancy (SFC) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The SFC licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+module Selenium\n+  module WebDriver\n+\n+    #\n+    # Base class implementing default behavior of service object,\n+    # responsible for starting and stopping driver implementations.\n+    #\n+    # Subclasses must implement the following private methods:\n+    #   * #start_process\n+    #   * #stop_server\n+    #   * #cannot_connect_error_text\n+    #\n+    # @api private\n+    #\n+\n+    class Service\n+      START_TIMEOUT       = 20\n+      SOCKET_LOCK_TIMEOUT = 45\n+      STOP_TIMEOUT        = 5\n+\n+      attr_accessor :host\n+\n+      def initialize(executable_path, port, *extra_args)\n+        @executable_path = executable_path\n+        @host            = Platform.localhost\n+        @port            = Integer(port)\n+        @extra_args      = extra_args\n+\n+        raise Error::WebDriverError, \"invalid port: #{@port}\" if @port < 1\n+      end\n+\n+      def start\n+        if process_running?\n+          raise \"already started: #{uri.inspect} #{@executable_path.inspect}\"\n+        end\n+\n+        Platform.exit_hook { stop } # make sure we don't leave the server running\n+\n+        socket_lock.locked do\n+          find_free_port\n+          start_process\n+          connect_until_stable\n+        end\n+      end\n+\n+      def stop\n+        return if process_exited?\n+        stop_server\n+      ensure\n+        stop_process\n+      end\n+\n+      def uri\n+        @uri ||= URI.parse(\"http://#{@host}:#{@port}\")\n+      end\n+\n+      private\n+\n+      def connect_to_server\n+        Net::HTTP.start(@host, @port) do |http|\n+          http.open_timeout = STOP_TIMEOUT / 2\n+          http.read_timeout = STOP_TIMEOUT / 2\n+\n+          yield http\n+        end\n+      end\n+\n+      def find_free_port\n+        @port = PortProber.above(@port)\n+      end\n+\n+      def start_process\n+        raise NotImplementedError, \"subclass responsibility\"\n+      end\n+\n+      def stop_server\n+        raise NotImplementedError, \"subclass responsibility\"\n+      end\n+\n+      def stop_process\n+        @process.poll_for_exit STOP_TIMEOUT\n+      rescue ChildProcess::TimeoutError\n+        @process.stop STOP_TIMEOUT\n+      end\n+\n+      def process_running?\n+        @process && @process.alive?\n+      end\n+\n+      def process_exited?\n+        @process.nil? || @process.exited?\n+      end\n+\n+      def connect_until_stable\n+        socket_poller = SocketPoller.new @host, @port, START_TIMEOUT\n+        return if socket_poller.connected?\n+        raise Error::WebDriverError, cannot_connect_error_text\n+      end\n+\n+      def cannot_connect_error_text\n+        raise NotImplementedError, \"subclass responsibility\"\n+      end\n+\n+      def socket_lock\n+        @socket_lock ||= SocketLock.new(@port - 1, SOCKET_LOCK_TIMEOUT)\n+      end\n+\n+    end # Service\n+  end # WebDriver\n+end # Selenium\n\ndiff --git a/rb/lib/selenium/webdriver/edge.rb b/rb/lib/selenium/webdriver/edge.rb\nindex 356ac72d4e..eaa919fa34 100644\n--- a/rb/lib/selenium/webdriver/edge.rb\n+++ b/rb/lib/selenium/webdriver/edge.rb\n@@ -24,10 +24,22 @@\n \n module Selenium\n   module WebDriver\n-\n     module Edge\n+      MISSING_TEXT = \"Unable to find MicrosoftWebDriver. Please download the server from https://www.microsoft.com/en-us/download/details.aspx?id=48212. More info at https://github.com/SeleniumHQ/selenium/wiki/MicrosoftWebDriver.\"\n+\n       def self.driver_path=(path)\n-        Service.executable_path = path\n+        Platform.assert_executable path\n+        @driver_path = path\n+      end\n+\n+      def self.driver_path\n+        @driver_path ||= begin\n+          path = Platform.find_binary(\"MicrosoftWebDriver\")\n+          path or raise Error::WebDriverError, MISSING_TEXT\n+          Platform.assert_executable path\n+\n+          path\n+        end\n       end\n \n       def self.path=(path)\n\ndiff --git a/rb/lib/selenium/webdriver/edge/bridge.rb b/rb/lib/selenium/webdriver/edge/bridge.rb\nindex de54771eff..bb6c9c5798 100644\n--- a/rb/lib/selenium/webdriver/edge/bridge.rb\n+++ b/rb/lib/selenium/webdriver/edge/bridge.rb\n@@ -21,22 +21,20 @@ module Selenium\n   module WebDriver\n     module Edge\n \n+      #\n       # @api private\n+      #\n+\n       class Bridge < Remote::W3CBridge\n \n         def initialize(opts = {})\n-\n           http_client = opts.delete(:http_client)\n \n           if opts.has_key?(:url)\n             url = opts.delete(:url)\n           else\n-            @service = Service.default_service(*extract_service_args(opts))\n-\n-            if @service.instance_variable_get(\"@host\") == \"127.0.0.1\"\n-              @service.instance_variable_set(\"@host\", 'localhost')\n-            end\n-\n+            @service = Service.new(Edge.driver_path, Service::DEFAULT_PORT, *extract_service_args(opts))\n+            @service.host = 'localhost' if @service.host == '127.0.0.1'\n             @service.start\n \n             url = @service.uri\n\ndiff --git a/rb/lib/selenium/webdriver/edge/service.rb b/rb/lib/selenium/webdriver/edge/service.rb\nindex 1cfa2bdf73..36edf88764 100644\n--- a/rb/lib/selenium/webdriver/edge/service.rb\n+++ b/rb/lib/selenium/webdriver/edge/service.rb\n@@ -25,71 +25,13 @@ module Edge\n       # @api private\n       #\n \n-      class Service\n-        START_TIMEOUT       = 20\n-        SOCKET_LOCK_TIMEOUT = 45\n-        STOP_TIMEOUT        = 5\n-        DEFAULT_PORT        = 17556\n-        MISSING_TEXT        = \"Unable to find MicrosoftWebDriver. Please download the server from https://www.microsoft.com/en-us/download/details.aspx?id=48212. More info at https://github.com/SeleniumHQ/selenium/wiki/MicrosoftWebDriver.\"\n+      class Service < WebDriver::Service\n+        DEFAULT_PORT = 17556\n \n-        def self.executable_path\n-          @executable_path ||= (\n-            path = Platform.find_binary \"MicrosoftWebDriver\"\n-            path or raise Error::WebDriverError, MISSING_TEXT\n-            Platform.assert_executable path\n+        private\n \n-            path\n-          )\n-        end\n-\n-        def self.executable_path=(path)\n-          Platform.assert_executable path\n-          @executable_path = path\n-        end\n-\n-        def self.default_service(*extra_args)\n-          new executable_path, DEFAULT_PORT, *extra_args\n-        end\n-\n-        def initialize(executable_path, port, *extra_args)\n-          @executable_path = executable_path\n-          @host            = Platform.localhost\n-          @port            = Integer(port)\n-\n-          raise Error::WebDriverError, \"invalid port: #{@port}\" if @port < 1\n-\n-          @extra_args = extra_args\n-        end\n-\n-        def start\n-          Platform.exit_hook { stop } # make sure we don't leave the server running\n-\n-          socket_lock.locked do\n-            find_free_port\n-            start_process\n-            connect_until_stable\n-          end\n-        end\n-\n-        def stop\n-          return if @process.nil? || @process.exited?\n-\n-          Net::HTTP.start(@host, @port) do |http|\n-            http.open_timeout = STOP_TIMEOUT / 2\n-            http.read_timeout = STOP_TIMEOUT / 2\n-\n-            http.head(\"/shutdown\")\n-          end\n-        ensure\n-          stop_process\n-        end\n-\n-        def uri\n-          URI.parse \"http://#{@host}:#{@port}\"\n-        end\n-\n-        def find_free_port\n-          @port = PortProber.above @port\n+        def stop_server\n+          connect_to_server { |http| http.head(\"/shutdown\") }\n         end\n \n         def start_process\n@@ -100,22 +42,8 @@ def start_process\n           @process.start\n         end\n \n-        def stop_process\n-          @process.poll_for_exit STOP_TIMEOUT\n-        rescue ChildProcess::TimeoutError\n-          @process.stop STOP_TIMEOUT\n-        end\n-\n-        def connect_until_stable\n-          socket_poller = SocketPoller.new @host, @port, START_TIMEOUT\n-\n-          unless socket_poller.connected?\n-            raise Error::WebDriverError, \"unable to connect to MicrosoftWebDriver #{@host}:#{@port}\"\n-          end\n-        end\n-\n-        def socket_lock\n-          @socket_lock ||= SocketLock.new(@port - 1, SOCKET_LOCK_TIMEOUT)\n+        def cannot_connect_error_text\n+          \"unable to connect to MicrosoftWebDriver #{@host}:#{@port}\"\n         end\n \n       end # Service\n\ndiff --git a/rb/lib/selenium/webdriver/firefox.rb b/rb/lib/selenium/webdriver/firefox.rb\nindex d5b63fe8cd..8b4378708a 100644\n--- a/rb/lib/selenium/webdriver/firefox.rb\n+++ b/rb/lib/selenium/webdriver/firefox.rb\n@@ -35,13 +35,29 @@\n module Selenium\n   module WebDriver\n     module Firefox\n-\n       DEFAULT_PORT                    = 7055\n       DEFAULT_ENABLE_NATIVE_EVENTS    = Platform.os == :windows\n       DEFAULT_SECURE_SSL              = false\n       DEFAULT_ASSUME_UNTRUSTED_ISSUER = true\n       DEFAULT_LOAD_NO_FOCUS_LIB       = false\n \n+      MISSING_TEXT = \"Unable to find Mozilla Wires. Please download the executable from https://github.com/jgraham/wires/releases\"\n+\n+      def self.driver_path=(path)\n+        Platform.assert_executable path\n+        @driver_path = path\n+      end\n+\n+      def self.driver_path\n+        @driver_path ||= begin\n+          path = Platform.find_binary(\"wires\")\n+          path or raise Error::WebDriverError, MISSING_TEXT\n+          Platform.assert_executable path\n+\n+          path\n+        end\n+      end\n+\n       def self.path=(path)\n         Binary.path = path\n       end\n\ndiff --git a/rb/lib/selenium/webdriver/firefox/service.rb b/rb/lib/selenium/webdriver/firefox/service.rb\nindex 4eaec78a58..b066f13aeb 100644\n--- a/rb/lib/selenium/webdriver/firefox/service.rb\n+++ b/rb/lib/selenium/webdriver/firefox/service.rb\n@@ -24,75 +24,11 @@ module Firefox\n       #\n       # @api private\n       #\n-      class Service\n-        START_TIMEOUT       = 20\n-        SOCKET_LOCK_TIMEOUT = 45\n-        STOP_TIMEOUT        = 5\n-        DEFAULT_PORT        = 4444\n-        MISSING_TEXT        = \"Unable to find Mozilla Wires. Please download the executable from https://github.com/jgraham/wires/releases\"\n \n-        def self.executable_path\n-          @executable_path ||= (\n-            path = Platform.find_binary \"wires\"\n-            path or raise Error::WebDriverError, MISSING_TEXT\n-            Platform.assert_executable path\n+      class Service < WebDriver::Service\n+        DEFAULT_PORT = 4444\n \n-            path\n-          )\n-        end\n-\n-        def self.executable_path=(path)\n-          Platform.assert_executable path\n-          @executable_path = path\n-        end\n-\n-        def self.default_service(*extra_args)\n-          new executable_path, DEFAULT_PORT, *extra_args\n-        end\n-\n-        def initialize(executable_path, port, *extra_args)\n-          @executable_path = executable_path\n-          @host            = Platform.localhost\n-          @port            = Integer(port)\n-\n-          raise Error::WebDriverError, \"invalid port: #{@port}\" if @port < 1\n-\n-          @extra_args = extra_args\n-        end\n-\n-        def start\n-          Platform.exit_hook { stop } # make sure we don't leave the server running\n-\n-          socket_lock.locked do\n-            find_free_port\n-            start_process\n-            connect_until_stable\n-          end\n-        end\n-\n-        def stop\n-          return if @process.nil? || @process.exited?\n-\n-          Net::HTTP.start(@host, @port) do |http|\n-            http.open_timeout = STOP_TIMEOUT / 2\n-            http.read_timeout = STOP_TIMEOUT / 2\n-\n-            http.head(\"/shutdown\")\n-          end\n-        ensure\n-          stop_process\n-          if Platform.windows? && !$DEBUG\n-            @process.io.close rescue nil\n-          end\n-        end\n-\n-        def uri\n-          URI.parse \"http://#{@host}:#{@port}\"\n-        end\n-\n-        def find_free_port\n-          @port = PortProber.above @port\n-        end\n+        private\n \n         def start_process\n           server_command = [@executable_path, \"--binary=#{Firefox::Binary.path}\", \"--webdriver-port=#{@port}\", *@extra_args]\n@@ -110,24 +46,21 @@ def start_process\n         end\n \n         def stop_process\n-          @process.poll_for_exit STOP_TIMEOUT\n-        rescue ChildProcess::TimeoutError\n-          @process.stop STOP_TIMEOUT\n+          super\n+          if Platform.windows? && !$DEBUG\n+            @process.io.close rescue nil\n+          end\n         end\n \n-        def connect_until_stable\n-          @socket_poller = SocketPoller.new @host, @port, START_TIMEOUT\n-\n-          unless @socket_poller.connected?\n-            raise Error::WebDriverError, \"unable to connect to Mozilla Wires #{@host}:#{@port}\"\n-          end\n+        def stop_server\n+          connect_to_server { |http| http.head(\"/shutdown\") }\n         end\n \n-        def socket_lock\n-          @socket_lock ||= SocketLock.new(@port - 1, SOCKET_LOCK_TIMEOUT)\n+        def cannot_connect_error_text\n+          \"unable to connect to Mozilla Wires #{@host}:#{@port}\"\n         end\n \n       end # Service\n     end # Firefox\n   end # WebDriver\n-end # Service\n+end # Selenium\n\ndiff --git a/rb/lib/selenium/webdriver/firefox/w3c_bridge.rb b/rb/lib/selenium/webdriver/firefox/w3c_bridge.rb\nindex b6ca896597..7ff1b6ede1 100644\n--- a/rb/lib/selenium/webdriver/firefox/w3c_bridge.rb\n+++ b/rb/lib/selenium/webdriver/firefox/w3c_bridge.rb\n@@ -28,8 +28,9 @@ def initialize(opts = {})\n           caps = opts[:desired_capabilities] ||= Remote::W3CCapabilities.firefox\n           Binary.path = caps[:firefox_binary] if caps[:firefox_binary]\n \n-          @service = Service.default_service(*extract_service_args(opts))\n+          @service = Service.new(Firefox.driver_path, Service::DEFAULT_PORT, *extract_service_args(opts))\n           @service.start\n+\n           opts[:url] = @service.uri\n \n           super\n\ndiff --git a/rb/lib/selenium/webdriver/ie.rb b/rb/lib/selenium/webdriver/ie.rb\nindex 87f6ad9f23..b1245fb5a3 100644\n--- a/rb/lib/selenium/webdriver/ie.rb\n+++ b/rb/lib/selenium/webdriver/ie.rb\n@@ -17,23 +17,28 @@\n # specific language governing permissions and limitations\n # under the License.\n \n+require 'selenium/webdriver/ie/bridge'\n+require 'selenium/webdriver/ie/service'\n+\n module Selenium\n   module WebDriver\n-\n-    # @api private\n     module IE\n+      MISSING_TEXT = \"Unable to find standalone executable. Please download the IEDriverServer from http://selenium-release.storage.googleapis.com/index.html and place the executable on your PATH.\"\n+\n       def self.driver_path=(path)\n         Platform.assert_executable path\n         @driver_path = path\n       end\n \n       def self.driver_path\n-        @driver_path ||= nil\n-      end\n+        @driver_path ||= begin\n+          path = Platform.find_binary(\"IEDriverServer\")\n+          path or raise Error::WebDriverError, MISSING_TEXT\n+          Platform.assert_executable path\n \n+          path\n+        end\n+      end\n     end # IE\n   end # WebDriver\n end # Selenium\n-\n-require 'selenium/webdriver/ie/server'\n-require 'selenium/webdriver/ie/bridge'\n\ndiff --git a/rb/lib/selenium/webdriver/ie/bridge.rb b/rb/lib/selenium/webdriver/ie/bridge.rb\nindex b5816774a8..becc796482 100644\n--- a/rb/lib/selenium/webdriver/ie/bridge.rb\n+++ b/rb/lib/selenium/webdriver/ie/bridge.rb\n@@ -27,41 +27,28 @@ module IE\n \n       class Bridge < Remote::Bridge\n \n-        HOST            = Platform.localhost\n-        DEFAULT_PORT    = 5555\n-        DEFAULT_TIMEOUT = 30\n-\n         def initialize(opts = {})\n           caps           = opts.delete(:desired_capabilities) { Remote::Capabilities.internet_explorer }\n-          timeout        = opts.delete(:timeout) { DEFAULT_TIMEOUT }\n-          port           = opts.delete(:port) { DEFAULT_PORT }\n+          port           = opts.delete(:port) { Service::DEFAULT_PORT }\n           http_client    = opts.delete(:http_client)\n           ignore_mode    = opts.delete(:introduce_flakiness_by_ignoring_security_domains)\n           native_events  = opts.delete(:native_events) != false\n-          implementation = opts.delete(:implementation)\n-\n-          @server = Server.get(:implementation => implementation)\n \n-          @server.log_level = opts.delete(:log_level) if opts[:log_level]\n-          @server.log_file  = opts.delete(:log_file) if opts[:log_file]\n+          @service = Service.new(IE.driver_path, port, *extract_service_args(opts))\n \n           unless opts.empty?\n             raise ArgumentError, \"unknown option#{'s' if opts.size != 1}: #{opts.inspect}\"\n           end\n \n-          @port = @server.start Integer(port), timeout\n-\n-          if ignore_mode\n-            caps['ignoreProtectedModeSettings'] = true\n-          end\n+          @service.start\n \n+          caps['ignoreProtectedModeSettings'] = true if ignore_mode\n           caps['nativeEvents'] = native_events\n \n           remote_opts = {\n-            :url => @server.uri,\n+            :url => @service.uri,\n             :desired_capabilities => caps\n           }\n-\n           remote_opts[:http_client] = http_client if http_client\n \n           super(remote_opts)\n@@ -77,9 +64,18 @@ def driver_extensions\n \n         def quit\n           super\n-          nil\n         ensure\n-          @server.stop\n+          @service.stop if @service\n+        end\n+\n+        private\n+\n+        def extract_service_args(opts)\n+          args = []\n+          args << \"--log-level=#{opts.delete(:log_level).to_s.upcase}\" if opts[:log_level]\n+          args << \"--log-file=#{opts.delete(:log_file)}\" if opts[:log_file]\n+          args << \"--implementation=#{opts.delete(:implementation).to_s.upcase}\" if opts[:implementation]\n+          args\n         end\n \n       end # Bridge\n\ndiff --git a/rb/lib/selenium/webdriver/ie/server.rb b/rb/lib/selenium/webdriver/ie/server.rb\nindex 1a672206dd..0000000000 100644\n--- a/rb/lib/selenium/webdriver/ie/server.rb\n+++ b/rb/lib/selenium/webdriver/ie/server.rb\n@@ -1,133 +0,0 @@\n-# encoding: utf-8\n-#\n-# Licensed to the Software Freedom Conservancy (SFC) under one\n-# or more contributor license agreements.  See the NOTICE file\n-# distributed with this work for additional information\n-# regarding copyright ownership.  The SFC licenses this file\n-# to you under the Apache License, Version 2.0 (the\n-# \"License\"); you may not use this file except in compliance\n-# with the License.  You may obtain a copy of the License at\n-#\n-#   http://www.apache.org/licenses/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing,\n-# software distributed under the License is distributed on an\n-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-# KIND, either express or implied.  See the License for the\n-# specific language governing permissions and limitations\n-# under the License.\n-\n-module Selenium\n-  module WebDriver\n-    module IE\n-\n-      #\n-      # @api private\n-      #\n-\n-      class Server\n-\n-        STOP_TIMEOUT        = 5\n-        SOCKET_LOCK_TIMEOUT = 45\n-        MISSING_TEXT        = \"Unable to find standalone executable. Please download the IEDriverServer from http://selenium-release.storage.googleapis.com/index.html and place the executable on your PATH.\"\n-\n-        def self.get(opts = {})\n-          binary = IE.driver_path || Platform.find_binary(\"IEDriverServer\")\n-\n-          if binary\n-            new binary, opts\n-          else\n-            raise Error::WebDriverError, MISSING_TEXT\n-          end\n-        end\n-\n-        attr_accessor :log_level, :log_file\n-\n-        def initialize(binary_path, opts = {})\n-          Platform.assert_executable binary_path\n-\n-          @binary_path = binary_path\n-          @process = nil\n-\n-          opts = opts.dup\n-\n-          @log_level      = opts.delete(:log_level)\n-          @log_file       = opts.delete(:log_file)\n-          @implementation = opts.delete(:implementation)\n-\n-          unless opts.empty?\n-            raise ArgumentError, \"invalid option#{'s' if opts.size != 1}: #{opts.inspect}\"\n-          end\n-        end\n-\n-        def start(port, timeout)\n-          return @port if running?\n-\n-          @port = port\n-          socket_lock.locked do\n-            find_free_port\n-            start_process\n-            connect_until_stable(timeout)\n-          end\n-\n-          Platform.exit_hook { stop } # make sure we don't leave the server running\n-\n-          @port\n-        end\n-\n-        def stop\n-          if running?\n-            @process.stop STOP_TIMEOUT\n-          end\n-        end\n-\n-        def port\n-          @port\n-        end\n-\n-        def uri\n-          \"http://#{Platform.localhost}:#{port}\"\n-        end\n-\n-        def running?\n-          @process && @process.alive?\n-        end\n-\n-        private\n-\n-        def server_args\n-          args = [\"--port=#{@port}\"]\n-\n-          args << \"--log-level=#{@log_level.to_s.upcase}\" if @log_level\n-          args << \"--log-file=#{@log_file}\" if @log_file\n-          args << \"--implementation=#{@implementation.to_s.upcase}\" if @implementation\n-\n-          args\n-        end\n-\n-        def find_free_port\n-          @port = PortProber.above @port\n-        end\n-\n-        def start_process\n-          @process = ChildProcess.new(@binary_path, *server_args)\n-          @process.io.inherit! if $DEBUG\n-          @process.start\n-        end\n-\n-        def connect_until_stable(timeout)\n-          socket_poller = SocketPoller.new Platform.localhost, @port, timeout\n-\n-          unless socket_poller.connected?\n-            raise Error::WebDriverError, \"unable to connect to IE server within #{timeout} seconds\"\n-          end\n-        end\n-\n-        def socket_lock\n-          @socket_lock ||= SocketLock.new(@port - 1, SOCKET_LOCK_TIMEOUT)\n-        end\n-\n-      end # Server\n-    end # IE\n-  end # WebDriver\n-end # Selenium\n\ndiff --git a/rb/lib/selenium/webdriver/ie/service.rb b/rb/lib/selenium/webdriver/ie/service.rb\nindex 0000000000..cb1874d950 100644\n--- a/rb/lib/selenium/webdriver/ie/service.rb\n+++ b/rb/lib/selenium/webdriver/ie/service.rb\n@@ -0,0 +1,52 @@\n+# encoding: utf-8\n+#\n+# Licensed to the Software Freedom Conservancy (SFC) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The SFC licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+module Selenium\n+  module WebDriver\n+    module IE\n+\n+      #\n+      # @api private\n+      #\n+\n+      class Service < WebDriver::Service\n+        DEFAULT_PORT = 5555\n+\n+        private\n+\n+        def stop_server\n+          # server can only be stopped as process\n+        end\n+\n+        def start_process\n+          server_command = [@executable_path, \"--port=#{@port}\", *@extra_args]\n+          @process       = ChildProcess.new(*server_command)\n+\n+          @process.io.inherit! if $DEBUG\n+          @process.start\n+        end\n+\n+        def cannot_connect_error_text\n+          \"unable to connect to IE server #{@host}:#{@port}\"\n+        end\n+\n+      end # Server\n+    end # IE\n+  end # WebDriver\n+end # Selenium\n\ndiff --git a/rb/lib/selenium/webdriver/phantomjs.rb b/rb/lib/selenium/webdriver/phantomjs.rb\nindex 54b4b7fc2c..2e710833e8 100644\n--- a/rb/lib/selenium/webdriver/phantomjs.rb\n+++ b/rb/lib/selenium/webdriver/phantomjs.rb\n@@ -24,16 +24,22 @@\n \n module Selenium\n   module WebDriver\n-\n     module PhantomJS\n+      MISSING_TEXT = \"Unable to find phantomjs executable.\"\n \n       def self.path=(path)\n         Platform.assert_executable path\n         @path = path\n       end\n \n       def self.path\n-        @path ||= Platform.find_binary(\"phantomjs\")\n+        @path ||= begin\n+          path = Platform.find_binary(\"phantomjs\")\n+          path or raise Error::WebDriverError, MISSING_TEXT\n+          Platform.assert_executable path\n+\n+          path\n+        end\n       end\n \n     end # PhantomJS\n\ndiff --git a/rb/lib/selenium/webdriver/phantomjs/bridge.rb b/rb/lib/selenium/webdriver/phantomjs/bridge.rb\nindex d205a56578..05f9a66f23 100644\n--- a/rb/lib/selenium/webdriver/phantomjs/bridge.rb\n+++ b/rb/lib/selenium/webdriver/phantomjs/bridge.rb\n@@ -21,8 +21,10 @@ module Selenium\n   module WebDriver\n     module PhantomJS\n \n-\n+      #\n       # @api private\n+      #\n+\n       class Bridge < Remote::Bridge\n \n         def initialize(opts = {})\n@@ -33,10 +35,9 @@ def initialize(opts = {})\n             url = opts.delete(:url)\n           else\n             args = opts.delete(:args) || caps['phantomjs.cli.args']\n-            port = opts.delete(:port)\n \n-            @service = Service.default_service(port)\n-            @service.start(args)\n+            @service = Service.new(PhantomJS.path, Service::DEFAULT_PORT, *args)\n+            @service.start\n \n             url = @service.uri\n           end\n\ndiff --git a/rb/lib/selenium/webdriver/phantomjs/service.rb b/rb/lib/selenium/webdriver/phantomjs/service.rb\nindex 8199735248..c69431c635 100644\n--- a/rb/lib/selenium/webdriver/phantomjs/service.rb\n+++ b/rb/lib/selenium/webdriver/phantomjs/service.rb\n@@ -25,75 +25,13 @@ module PhantomJS\n       # @api private\n       #\n \n-      class Service\n-        START_TIMEOUT       = 20\n-        SOCKET_LOCK_TIMEOUT = 45\n-        STOP_TIMEOUT        = 5\n-        DEFAULT_PORT        = 8910\n-        MISSING_TEXT        = \"Unable to find phantomjs executable.\"\n-\n-        def self.executable_path\n-          @executable_path ||= (\n-            path = PhantomJS.path\n-            path or raise Error::WebDriverError, MISSING_TEXT\n-            Platform.assert_executable path\n-\n-            path\n-          )\n-        end\n-\n-        def self.default_service(port = nil)\n-          new executable_path, DEFAULT_PORT\n-        end\n-\n-        def initialize(executable_path, port)\n-          @host       = Platform.localhost\n-          @executable = executable_path\n-          @port       = Integer(port)\n-        end\n-\n-        def start(args = [])\n-          if @process && @process.alive?\n-            raise \"already started: #{uri.inspect} #{@executable.inspect}\"\n-          end\n-\n-          Platform.exit_hook { stop } # make sure we don't leave the server running\n-\n-          socket_lock.locked do\n-            find_free_port\n-            start_process(args)\n-            connect_until_stable\n-          end\n-        end\n-\n-        def stop\n-          return if @process.nil? || @process.exited?\n-\n-          Net::HTTP.start(@host, @port) do |http|\n-            http.open_timeout = STOP_TIMEOUT / 2\n-            http.read_timeout = STOP_TIMEOUT / 2\n-\n-            http.get(\"/shutdown\")\n-          end\n-        ensure\n-          stop_process\n-          if Platform.jruby? && !$DEBUG\n-            @process.io.close rescue nil\n-          end\n-        end\n-\n-        def find_free_port\n-          @port = PortProber.above @port\n-        end\n-\n-        def uri\n-          URI.parse \"http://#{@host}:#{@port}\"\n-        end\n+      class Service < WebDriver::Service\n+        DEFAULT_PORT = 8910\n \n         private\n \n-        def start_process(args)\n-          server_command = [@executable, \"--webdriver=#{@port}\", *args]\n+        def start_process\n+          server_command = [@executable_path, \"--webdriver=#{@port}\", *@extra_args]\n           @process = ChildProcess.build(*server_command.compact)\n \n           if $DEBUG == true\n@@ -107,24 +45,21 @@ def start_process(args)\n         end\n \n         def stop_process\n-          @process.poll_for_exit STOP_TIMEOUT\n-        rescue ChildProcess::TimeoutError\n-          @process.stop STOP_TIMEOUT\n+          super\n+          if Platform.jruby? && !$DEBUG\n+            @process.io.close rescue nil\n+          end\n         end\n \n-        def connect_until_stable\n-          socket_poller = SocketPoller.new @host, @port, START_TIMEOUT\n-\n-          unless socket_poller.connected?\n-            raise Error::WebDriverError, \"unable to connect to phantomjs @ #{uri} after #{START_TIMEOUT} seconds\"\n-          end\n+        def stop_server\n+          connect_to_server { |http| http.get(\"/shutdown\") }\n         end\n \n-        def socket_lock\n-          @socket_lock ||= SocketLock.new(@port - 1, SOCKET_LOCK_TIMEOUT)\n+        def cannot_connect_error_text\n+          \"unable to connect to phantomjs @ #{uri} after #{START_TIMEOUT} seconds\"\n         end\n \n       end # Service\n     end # PhantomJS\n   end # WebDriver\n-end # Service\n+end # Selenium\n", "test_patch": "diff --git a/rb/spec/unit/selenium/webdriver/chrome/bridge_spec.rb b/rb/spec/unit/selenium/webdriver/chrome/bridge_spec.rb\nindex 06f0eb84fe..1dc2cf8056 100644\n--- a/rb/spec/unit/selenium/webdriver/chrome/bridge_spec.rb\n+++ b/rb/spec/unit/selenium/webdriver/chrome/bridge_spec.rb\n@@ -33,8 +33,9 @@ module Chrome\n         before do\n           @default_capabilities = Remote::Capabilities.chrome.as_json\n \n+          allow(Chrome).to receive(:driver_path).and_return('/foo')\n           allow(Remote::Capabilities).to receive(:chrome).and_return(caps)\n-          allow(Service).to receive(:default_service).and_return(service)\n+          allow(Service).to receive(:new).and_return(service)\n         end\n \n         it \"sets the nativeEvents capability\" do\n@@ -94,7 +95,7 @@ module Chrome\n         end\n \n         it \"uses the user-provided server URL if given\" do\n-          expect(Service).not_to receive(:default_service)\n+          expect(Service).not_to receive(:new)\n           expect(http).to receive(:server_url=).with(URI.parse(\"http://example.com\"))\n \n           Bridge.new(:http_client => http, :url => \"http://example.com\")\n@@ -145,12 +146,11 @@ module Chrome\n         end\n \n         it 'accepts :service_log_path' do\n-          expect(Service).to receive(:default_service).with(\"--log-path=/foo/bar\")\n+          expect(Service).to receive(:new).with(Chrome.driver_path, Service::DEFAULT_PORT, \"--log-path=/foo/bar\")\n           Bridge.new(:http_client => http, :service_log_path => \"/foo/bar\")\n         end\n       end\n \n     end # Chrome\n   end # WebDriver\n end # Selenium\n-\n\ndiff --git a/rb/spec/unit/selenium/webdriver/chrome/service_spec.rb b/rb/spec/unit/selenium/webdriver/chrome/service_spec.rb\nindex 6174f0ddcc..0000000000 100644\n--- a/rb/spec/unit/selenium/webdriver/chrome/service_spec.rb\n+++ b/rb/spec/unit/selenium/webdriver/chrome/service_spec.rb\n@@ -1,64 +0,0 @@\n-# encoding: utf-8\n-#\n-# Licensed to the Software Freedom Conservancy (SFC) under one\n-# or more contributor license agreements.  See the NOTICE file\n-# distributed with this work for additional information\n-# regarding copyright ownership.  The SFC licenses this file\n-# to you under the Apache License, Version 2.0 (the\n-# \"License\"); you may not use this file except in compliance\n-# with the License.  You may obtain a copy of the License at\n-#\n-#   http://www.apache.org/licenses/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing,\n-# software distributed under the License is distributed on an\n-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-# KIND, either express or implied.  See the License for the\n-# specific language governing permissions and limitations\n-# under the License.\n-\n-require File.expand_path(\"../../spec_helper\", __FILE__)\n-\n-module Selenium\n-  module WebDriver\n-    module Chrome\n-\n-      describe Service do\n-        let(:mock_process) do\n-          double(\"ChildProcess\", :io => double.as_null_object, :start => true)\n-        end\n-\n-        # ugh.\n-        before { Service.instance_variable_set(\"@executable_path\", nil) }\n-\n-        it \"uses the user-provided path if set\" do\n-          Platform.stub(:os => :unix)\n-          allow(Platform).to receive(:assert_executable).with(\"/some/path\")\n-          Chrome.driver_path = \"/some/path\"\n-\n-          expect(ChildProcess).to receive(:build) do |*args|\n-            expect(args.first).to eq(\"/some/path\")\n-            mock_process\n-          end\n-\n-          Service.default_service.send(:start_process)\n-        end\n-\n-        it \"finds the Chrome server binary by searching PATH\" do\n-          Platform.stub(:os => :unix)\n-          expect(Platform).to receive(:find_binary).once.and_return(\"/some/path\")\n-          expect(Platform).to receive(:assert_executable).with(\"/some/path\")\n-\n-          expect(Service.executable_path).to eq(\"/some/path\")\n-        end\n-\n-        it \"raises a nice error if the server binary can't be found\" do\n-          allow(Platform).to receive(:find_binary).and_return(nil)\n-\n-          expect { Service.executable_path }.to raise_error(Error::WebDriverError, /github.com\\/SeleniumHQ/)\n-        end\n-\n-      end\n-    end # Chrome\n-  end # WebDriver\n-end # Selenium\n\ndiff --git a/rb/spec/unit/selenium/webdriver/ie/bridge_spec.rb b/rb/spec/unit/selenium/webdriver/ie/bridge_spec.rb\nindex f0671884c2..9e66279638 100644\n--- a/rb/spec/unit/selenium/webdriver/ie/bridge_spec.rb\n+++ b/rb/spec/unit/selenium/webdriver/ie/bridge_spec.rb\n@@ -26,14 +26,16 @@ module IE\n \n       describe Bridge do\n         let(:resp)    { {\"sessionId\" => \"foo\", \"value\" => @default_capabilities.as_json }}\n-        let(:server)  { double(Server, :start => 5555, :uri => \"http://example.com\") }\n+        let(:service) { double(Service, :start => nil, :uri => \"http://example.com\") }\n         let(:caps)    { {} }\n         let(:http)    { double(Remote::Http::Default, :call => resp).as_null_object   }\n \n         before do\n-          Server.stub(:get => server)\n           @default_capabilities = Remote::Capabilities.internet_explorer\n-          Remote::Capabilities.stub(:internet_explorer => caps)\n+\n+          allow(IE).to receive(:driver_path).and_return('/foo')\n+          allow(Remote::Capabilities).to receive(:internet_explorer).and_return(caps)\n+          allow(Service).to receive(:new).and_return(service)\n         end\n \n         it \"raises ArgumentError if passed invalid options\" do\n@@ -65,8 +67,7 @@ module IE\n         end\n \n         it 'sets the server log level and log file' do\n-          expect(server).to receive(:log_level=).with :trace\n-          expect(server).to receive(:log_file=).with '/foo/bar'\n+          expect(Service).to receive(:new).with(IE.driver_path, Service::DEFAULT_PORT, \"--log-level=TRACE\", \"--log-file=/foo/bar\")\n \n           Bridge.new(\n             :log_level   => :trace,\n@@ -76,7 +77,7 @@ module IE\n         end\n \n         it 'should be able to set implementation' do\n-          expect(Server).to receive(:get).with(:implementation => :vendor).and_return(server)\n+          expect(Service).to receive(:new).with(IE.driver_path, Service::DEFAULT_PORT, \"--implementation=VENDOR\")\n \n           Bridge.new(\n             :implementation => :vendor,\n@@ -111,7 +112,6 @@ module IE\n             :introduce_flakiness_by_ignoring_security_domains => true\n           )\n         end\n-\n       end\n \n     end\n\ndiff --git a/rb/spec/unit/selenium/webdriver/phantomjs/bridge_spec.rb b/rb/spec/unit/selenium/webdriver/phantomjs/bridge_spec.rb\nindex c153b3d3c9..c582d173dd 100644\n--- a/rb/spec/unit/selenium/webdriver/phantomjs/bridge_spec.rb\n+++ b/rb/spec/unit/selenium/webdriver/phantomjs/bridge_spec.rb\n@@ -30,16 +30,17 @@ module PhantomJS\n         let(:http)    { double(Remote::Http::Default, :call => resp).as_null_object   }\n \n         before do\n-          allow(Service).to receive(:default_service).and_return(service)\n+          allow(PhantomJS).to receive(:path).and_return('/foo')\n+          allow(Service).to receive(:new).and_return(service)\n         end\n \n         it 'starts the server with the given arguments' do\n-          expect(service).to receive(:start).with(%w[--foo --bar])\n+          expect(Service).to receive(:new).with(PhantomJS.path, Service::DEFAULT_PORT, *%w[--foo --bar])\n           Bridge.new(:http_client => http, :args => %w[--foo --bar])\n         end\n \n         it 'reads server arguments from desired capabilities if not given directly' do\n-          expect(service).to receive(:start).with(%w[--foo --bar])\n+          expect(Service).to receive(:new).with(PhantomJS.path, Service::DEFAULT_PORT, *%w[--foo --bar])\n \n           caps = Remote::Capabilities.phantomjs\n           caps['phantomjs.cli.args'] = %w[--foo --bar]\n@@ -59,7 +60,7 @@ module PhantomJS\n         end\n \n         it 'lets direct arguments take presedence over capabilities' do\n-          expect(service).to receive(:start).with(%w[--foo --bar])\n+          expect(Service).to receive(:new).with(PhantomJS.path, Service::DEFAULT_PORT, *%w[--foo --bar])\n \n           caps = Remote::Capabilities.phantomjs\n           caps['phantomjs.cli.args'] = %w[--baz]\n", "instance_id": "seleniumhq__selenium-1797", "fixed_tests": {}, "failed_tests": [], "skipped_tests": [], "run_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "test_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "fix_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "f2p_tests": {}, "p2p_tests": {}, "s2p_tests": {}, "n2p_tests": {}}
{"org": "seleniumhq", "repo": "selenium", "number": 2041, "title": "Find visible elements", "body": "- [ X] By placing an `X` in the preceding checkbox, I verify that I have signed the [Contributor License Agreement](https://github.com/SeleniumHQ/selenium/blob/master/CONTRIBUTING.md#step-6-sign-the-cla)\n\nAdds an expected conditions for finding visible elements as list. Right now this is only possible for the presence of elements.\n", "state": "closed", "base": {"label": "SeleniumHQ:master", "ref": "master", "sha": "65a6604a89d9f6746f629cf76a3e7431f4daa3f7"}, "resolved_issues": [], "fix_patch": "diff --git a/common/src/web/hidden_partially.html b/common/src/web/hidden_partially.html\nindex 0000000000..f0f9fe5b8a 100644\n--- a/common/src/web/hidden_partially.html\n+++ b/common/src/web/hidden_partially.html\n@@ -0,0 +1,45 @@\n+<!DOCTYPE html>\n+<html>\n+  <head>\n+    <title></title>\n+    <script type=\"text/javascript\">\n+      var next = 0;\n+\n+      function addVisibleBox() {\n+        var box = document.createElement('DIV');\n+        box.id = 'box' + next++;\n+        box.className = 'redbox';\n+        box.style.width = '150px';\n+        box.style.height = '150px';\n+        box.style.backgroundColor = 'red';\n+        box.style.border = '1px solid black';\n+        box.style.margin = '5px';\n+        box.style.visibility = 'visible'\n+\n+        window.setTimeout(function() {\n+          document.body.appendChild(box);\n+        }, 1000);\n+      }\n+\n+      function addHiddenBox() {\n+        var box = document.createElement('DIV');\n+        box.id = 'box' + next++;\n+        box.className = 'redbox';\n+        box.style.width = '150px';\n+        box.style.height = '150px';\n+        box.style.backgroundColor = 'red';\n+        box.style.border = '1px solid black';\n+        box.style.margin = '5px';\n+        box.style.visibility = 'hidden';\n+\n+        window.setTimeout(function() {\n+          document.body.appendChild(box);\n+        }, 1000);\n+      }\n+    </script>\n+  </head>\n+  <body>\n+    <input id=\"addVisible\" type=\"button\" value=\"Add a visible box!\" onclick=\"addVisibleBox()\"/>\n+    <input id=\"addHidden\" type=\"button\" value=\"Add a hidden box!\" onclick=\"addHiddenBox();\" />\n+  </body>\n+</html>\n\ndiff --git a/py/selenium/webdriver/support/expected_conditions.py b/py/selenium/webdriver/support/expected_conditions.py\nindex a9860298cf..de3ff512c0 100644\n--- a/py/selenium/webdriver/support/expected_conditions.py\n+++ b/py/selenium/webdriver/support/expected_conditions.py\n@@ -101,6 +101,18 @@ def __init__(self, locator):\n \n     def __call__(self, driver):\n         return _find_elements(driver, self.locator)\n+        \n+class visibility_of_all_elements_located(object):\n+    \"\"\" An expectation for checking that there is at least one element visible\n+    on a web page.\n+    locator is used to find the element\n+    returns the list of WebElements once they are located\n+    \"\"\"\n+    def __init__(self, locator):\n+        self.locator = locator\n+\n+    def __call__(self, driver):\n+        return [element for element in _find_elements(driver, self.locator) if _element_if_visible(element)]\n \n class text_to_be_present_in_element(object):\n     \"\"\" An expectation for checking if the given text is present in the\n", "test_patch": "diff --git a/py/test/selenium/webdriver/common/webdriverwait_tests.py b/py/test/selenium/webdriver/common/webdriverwait_tests.py\nindex 7fe23f4ea8..cb34e5ef96 100644\n--- a/py/test/selenium/webdriver/common/webdriverwait_tests.py\n+++ b/py/test/selenium/webdriver/common/webdriverwait_tests.py\n@@ -72,12 +72,25 @@ def testShouldExplicitlyWaituntilAtLeastOneElementIsFoundWhenSearchingForMany(se\n \n     def testShouldFailToFindElementsWhenExplicitWaiting(self):\n         self._loadPage(\"dynamic\")\n-        try:\n+        with self.assertRaises(TimeoutException):\n             elements = WebDriverWait(self.driver, 0.7).until(EC.presence_of_all_elements_located((By.CLASS_NAME, \"redbox\")))\n-        except TimeoutException as e:\n-            pass # we should get a timeout\n-        except Exception as e:\n-            self.fail(\"Expected TimeoutException but got \" + str(e))\n+            \n+    def testShouldWaitUntilAtLeastOneVisibleElementsIsFoundWhenSearchingForMany(self):\n+        self._loadPage(\"hidden_partially\")\n+        add_visible = self.driver.find_element_by_id(\"addVisible\")\n+        add_hidden = self.driver.find_element_by_id(\"addHidden\")\n+\n+        add_visible.click()\n+        add_visible.click()\n+        add_hidden.click()\n+\n+        elements = WebDriverWait(self.driver, 2).until(EC.visibility_of_all_elements_located((By.CLASS_NAME, \"redbox\")))\n+        self.assertTrue(len(elements) == 2)\n+\n+    def testShouldFailToFindVisibleElementsWhenExplicitWaiting(self):\n+        self._loadPage(\"hidden_partially\")\n+        with self.assertRaises(TimeoutException):\n+            elements = WebDriverWait(self.driver, 0.7).until(EC.visibility_of_all_elements_located((By.CLASS_NAME, \"redbox\")))\n \n     def testShouldWaitOnlyAsLongAsTimeoutSpecifiedWhenImplicitWaitsAreSet(self):\n         self._loadPage(\"dynamic\")\n", "instance_id": "seleniumhq__selenium-2041", "fixed_tests": {}, "failed_tests": [], "skipped_tests": [], "run_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "test_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "fix_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "f2p_tests": {}, "p2p_tests": {}, "s2p_tests": {}, "n2p_tests": {}}
{"org": "seleniumhq", "repo": "selenium", "number": 2052, "title": "visibility_of_all implies it only returns elements if all visible", "body": "- [x] By placing an `X` in the preceding checkbox, I verify that I have signed the [Contributor License Agreement](https://github.com/SeleniumHQ/selenium/blob/master/CONTRIBUTING.md#step-6-sign-the-cla)\n\nThis is not what the function does.\nvisibility_of_any in my opinion correctly conveys the usage of this expected condition.\n", "state": "closed", "base": {"label": "SeleniumHQ:master", "ref": "master", "sha": "116adb894bb28eab103f066f890a16056cd7335a"}, "resolved_issues": [], "fix_patch": "diff --git a/py/selenium/webdriver/support/expected_conditions.py b/py/selenium/webdriver/support/expected_conditions.py\nindex de3ff512c0..b6dcebe5f8 100644\n--- a/py/selenium/webdriver/support/expected_conditions.py\n+++ b/py/selenium/webdriver/support/expected_conditions.py\n@@ -102,7 +102,7 @@ def __init__(self, locator):\n     def __call__(self, driver):\n         return _find_elements(driver, self.locator)\n         \n-class visibility_of_all_elements_located(object):\n+class visibility_of_any_elements_located(object):\n     \"\"\" An expectation for checking that there is at least one element visible\n     on a web page.\n     locator is used to find the element\n", "test_patch": "diff --git a/py/test/selenium/webdriver/common/webdriverwait_tests.py b/py/test/selenium/webdriver/common/webdriverwait_tests.py\nindex cb34e5ef96..72691f5da8 100644\n--- a/py/test/selenium/webdriver/common/webdriverwait_tests.py\n+++ b/py/test/selenium/webdriver/common/webdriverwait_tests.py\n@@ -84,13 +84,13 @@ def testShouldWaitUntilAtLeastOneVisibleElementsIsFoundWhenSearchingForMany(self\n         add_visible.click()\n         add_hidden.click()\n \n-        elements = WebDriverWait(self.driver, 2).until(EC.visibility_of_all_elements_located((By.CLASS_NAME, \"redbox\")))\n+        elements = WebDriverWait(self.driver, 2).until(EC.visibility_of_any_elements_located((By.CLASS_NAME, \"redbox\")))\n         self.assertTrue(len(elements) == 2)\n \n     def testShouldFailToFindVisibleElementsWhenExplicitWaiting(self):\n         self._loadPage(\"hidden_partially\")\n         with self.assertRaises(TimeoutException):\n-            elements = WebDriverWait(self.driver, 0.7).until(EC.visibility_of_all_elements_located((By.CLASS_NAME, \"redbox\")))\n+            elements = WebDriverWait(self.driver, 0.7).until(EC.visibility_of_any_elements_located((By.CLASS_NAME, \"redbox\")))\n \n     def testShouldWaitOnlyAsLongAsTimeoutSpecifiedWhenImplicitWaitsAreSet(self):\n         self._loadPage(\"dynamic\")\n", "instance_id": "seleniumhq__selenium-2052", "fixed_tests": {}, "failed_tests": [], "skipped_tests": [], "run_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "test_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "fix_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "f2p_tests": {}, "p2p_tests": {}, "s2p_tests": {}, "n2p_tests": {}}
{"org": "seleniumhq", "repo": "selenium", "number": 2137, "title": "[js] until.alertIsPresent(): Workaround for GeckoDriver conversion error", "body": "In some occasions, Gecko driver [throws an error](https://travis-ci.org/fxbox/foxbox/jobs/131700352#L1482) while waiting on an alert to come (which eventually does). The error comes from [this particular line](https://dxr.mozilla.org/mozilla-beta/source/testing/marionette/driver.js#2708). \n\nWithout the workaround, here are the logs I get:\n\n```\n1463762217511   Marionette  TRACE   conn0 -> [0,132,\"clickElement\",{\"id\":\"9a5bd452-d252-af4e-a358-9c44f119cabf\"}]\n1463762217520   Marionette  TRACE   conn0 <- [1,132,null,{}]\n1463762217522   Marionette  TRACE   conn0 -> [0,133,\"getTextFromDialog\",{}]\n*************************\nA coding exception was thrown and uncaught in a Task.\n\nFull message: TypeError: can't convert null to object\nFull stack: GeckoDriver.prototype.getTextFromDialog@chrome://marionette/content/driver.js:2708:7\nDispatcher.prototype.execute/req<@chrome://marionette/content/dispatcher.js:126:20\nTaskImpl_run@resource://gre/modules/Task.jsm:319:40\nTaskImpl@resource://gre/modules/Task.jsm:280:3\ncreateAsyncFunction/asyncFunction@resource://gre/modules/Task.jsm:254:14\nTask_spawn@resource://gre/modules/Task.jsm:168:12\nDispatcher.prototype.execute@chrome://marionette/content/dispatcher.js:120:13\nDispatcher.prototype.onPacket@chrome://marionette/content/dispatcher.js:91:5\nDebuggerTransport.prototype._onJSONObjectReady/<@chrome://marionette/content/server.js -> resource://devtools/shared/transport/transport.js:479:9\nexports.makeInfallible/<@resource://gre/modules/commonjs/toolkit/loader.js -> resource://devtools/shared/ThreadSafeDevToolsUtils.js:101:14\nexports.makeInfallible/<@resource://gre/modules/commonjs/toolkit/loader.js -> resource://devtools/shared/ThreadSafeDevToolsUtils.js:101:14\n\n*************************\n1463762217524   Marionette  TRACE   conn0 <- [1,133,{\"error\":\"webdriver error\",\"message\":\"can't convert null to object\",\"stacktrace\":null},null]\n*************************\nA coding exception was thrown in a Promise rejection callback.\nSee https://developer.mozilla.org/Mozilla/JavaScript_code_modules/Promise.jsm/Promise\n\nFull message: TypeError: can't convert null to object\nFull stack: GeckoDriver.prototype.getTextFromDialog@chrome://marionette/content/driver.js:2708:7\nDispatcher.prototype.execute/req<@chrome://marionette/content/dispatcher.js:126:20\nTaskImpl_run@resource://gre/modules/Task.jsm:319:40\nTaskImpl@resource://gre/modules/Task.jsm:280:3\ncreateAsyncFunction/asyncFunction@resource://gre/modules/Task.jsm:254:14\nTask_spawn@resource://gre/modules/Task.jsm:168:12\nDispatcher.prototype.execute@chrome://marionette/content/dispatcher.js:120:13\nDispatcher.prototype.onPacket@chrome://marionette/content/dispatcher.js:91:5\nDebuggerTransport.prototype._onJSONObjectReady/<@chrome://marionette/content/server.js -> resource://devtools/shared/transport/transport.js:479:9\nexports.makeInfallible/<@resource://gre/modules/commonjs/toolkit/loader.js -> resource://devtools/shared/ThreadSafeDevToolsUtils.js:101:14\nexports.makeInfallible/<@resource://gre/modules/commonjs/toolkit/loader.js -> resource://devtools/shared/ThreadSafeDevToolsUtils.js:101:14\n```\n\nI'm not too sure how to tackle this issue. Nonetheless, I propose this workaround in the meantime. Does that sound okay to you guys @jleyba @AutomatedTester ? \n- [ X ] By placing an `X` in the preceding checkbox, I verify that I have signed the [Contributor License Agreement](https://github.com/SeleniumHQ/selenium/blob/master/CONTRIBUTING.md#step-6-sign-the-cla)\n", "state": "closed", "base": {"label": "SeleniumHQ:master", "ref": "master", "sha": "cc6b93571b2ce8f4af9100df34f31acdee3bd7a3"}, "resolved_issues": [{"number": 2708, "title": "Update index.js", "body": "Make TouchSequence public API in order to use functions in class TouchSequence.\n- [x] By placing an `X` in the preceding checkbox, I verify that I have signed the [Contributor License Agreement](https://github.com/SeleniumHQ/selenium/blob/master/CONTRIBUTING.md#step-6-sign-the-cla)\n", "state": "closed", "created_at": "2016-09-02T13:49:57Z", "closed_at": "2016-09-23T18:16:36Z", "labels": []}], "fix_patch": "diff --git a/javascript/node/selenium-webdriver/CHANGES.md b/javascript/node/selenium-webdriver/CHANGES.md\nindex b20930f09e..82b273c0e5 100644\n--- a/javascript/node/selenium-webdriver/CHANGES.md\n+++ b/javascript/node/selenium-webdriver/CHANGES.md\n@@ -4,6 +4,7 @@\n    `builder.Builder#usingHttpAgent()`\n * Added new wait conditions: `until.urlIs()`, `until.urlContains()`,\n    `until.urlMatches()`\n+* Added work around for [GeckoDriver bug](https://bugzilla.mozilla.org/show_bug.cgi?id=1274924) raising a type conversion error\n \n ## v2.53.2\n \n\ndiff --git a/javascript/node/selenium-webdriver/lib/until.js b/javascript/node/selenium-webdriver/lib/until.js\nindex 1b8fc6170d..e178c16dc9 100644\n--- a/javascript/node/selenium-webdriver/lib/until.js\n+++ b/javascript/node/selenium-webdriver/lib/until.js\n@@ -115,7 +115,13 @@ exports.ableToSwitchToFrame = function ableToSwitchToFrame(frame) {\n exports.alertIsPresent = function alertIsPresent() {\n   return new Condition('for alert to be present', function(driver) {\n     return driver.switchTo().alert().catch(function(e) {\n-      if (!(e instanceof error.NoSuchAlertError)) {\n+      if (!(e instanceof error.NoSuchAlertError\n+        // XXX: Workaround for GeckoDriver error `TypeError: can't convert null\n+        // to object`. For more details, see\n+        // https://github.com/SeleniumHQ/selenium/pull/2137\n+        || (e instanceof error.WebDriverError\n+          && e.message === `can't convert null to object`)\n+        )) {\n         throw e;\n       }\n     });\n", "test_patch": "diff --git a/javascript/node/selenium-webdriver/test/lib/until_test.js b/javascript/node/selenium-webdriver/test/lib/until_test.js\nindex 9ae5cf9a9a..03964a2254 100644\n--- a/javascript/node/selenium-webdriver/test/lib/until_test.js\n+++ b/javascript/node/selenium-webdriver/test/lib/until_test.js\n@@ -145,6 +145,40 @@ describe('until', function() {\n         return alert.dismiss();\n       });\n     });\n+\n+    // TODO: Remove once GeckoDriver doesn't throw this unwanted error.\n+    // See https://github.com/SeleniumHQ/selenium/pull/2137\n+    describe('workaround for GeckoDriver', function() {\n+      it('doesNotFailWhenCannotConvertNullToObject', function() {\n+        var count = 0;\n+        executor.on(CommandName.GET_ALERT_TEXT, function() {\n+          if (count++ < 3) {\n+            throw new error.WebDriverError(`can't convert null to object`);\n+          } else {\n+            return true;\n+          }\n+        }).on(CommandName.DISMISS_ALERT, () => true);\n+\n+        return driver.wait(until.alertIsPresent(), 1000).then(function(alert) {\n+          assert.equal(count, 4);\n+          return alert.dismiss();\n+        });\n+      });\n+\n+      it('keepsRaisingRegularWebdriverError', function() {\n+        var webDriverError = new error.WebDriverError;\n+\n+        executor.on(CommandName.GET_ALERT_TEXT, function() {\n+          throw webDriverError;\n+        });\n+\n+        return driver.wait(until.alertIsPresent(), 1000).then(function() {\n+          throw new Error('driver did not fail against WebDriverError');\n+        }, function(error) {\n+          assert.equal(error, webDriverError);\n+        });\n+      })\n+    });\n   });\n \n   it('testUntilTitleIs', function() {\n", "instance_id": "seleniumhq__selenium-2137", "fixed_tests": {}, "failed_tests": [], "skipped_tests": [], "run_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "test_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "fix_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "f2p_tests": {}, "p2p_tests": {}, "s2p_tests": {}, "n2p_tests": {}}
{"org": "seleniumhq", "repo": "selenium", "number": 2139, "title": "Adding new functions to until class", "body": "- [X ] By placing an `X` in the preceding checkbox, I verify that I have signed the [Contributor License Agreement](https://github.com/SeleniumHQ/selenium/blob/master/CONTRIBUTING.md#step-6-sign-the-cla)\n\n@jleyba \nAdded\nUrlIs, urlContains, urlMatches\n", "state": "closed", "base": {"label": "SeleniumHQ:master", "ref": "master", "sha": "b099b4afb41b82b392860affa2432886a6a0aaee"}, "resolved_issues": [], "fix_patch": "diff --git a/javascript/node/selenium-webdriver/lib/until.js b/javascript/node/selenium-webdriver/lib/until.js\nindex 53ef7bdb77..4f3cf4347a 100644\n--- a/javascript/node/selenium-webdriver/lib/until.js\n+++ b/javascript/node/selenium-webdriver/lib/until.js\n@@ -176,6 +176,57 @@ exports.titleMatches = function titleMatches(regex) {\n };\n \n \n+/**\n+ * Creates a condition that will wait for the current page's url to match the\n+ * given value.\n+ *\n+ * @param {string} url The expected page url.\n+ * @return {!Condition<boolean>} The new condition.\n+ */\n+exports.urlIs = function urlIs(url){\n+  return new Condition(\n+    'for url to be ' + JSON.stringify(url),\n+    function(driver) {\n+      return driver.getCurrentUrl().then(function(u) {\n+        return u === url;\n+      });\n+    });\n+};\n+\n+/**\n+ * Creates a condition that will wait for the current page's url to contain\n+ * the given substring.\n+ *\n+ * @param {string} substrUrl The substring that should be present in the page\n+ *     title.\n+ * @return {!Condition<boolean>} The new condition.\n+ */\n+exports.urlContains = function urlContains(substrUrl) {\n+  return new Condition(\n+      'for url to contain ' + JSON.stringify(substrUrl),\n+      function(driver) {\n+        return driver.getCurrentUrl().then(function(url) {\n+          return url.indexOf(substrUrl) !== -1;\n+        });\n+    });\n+};\n+\n+/**\n+ * Creates a condition that will wait for the current page's url to match the\n+ * given regular expression.\n+ *\n+ * @param {!RegExp} regex The regular expression to test against.\n+ * @return {!Condition<boolean>} The new condition.\n+ */\n+exports.urlMatches = function urlMatches(regex) {\n+  return new Condition('for url to match ' + regex, function(driver) {\n+    return driver.getCurrentUrl().then(function(url) {\n+      return regex.test(url);\n+    });\n+  });\n+};\n+\n+\n /**\n  * Creates a condition that will loop until an element is\n  * {@link ./webdriver.WebDriver#findElement found} with the given locator.\n", "test_patch": "diff --git a/javascript/node/selenium-webdriver/test/lib/until_test.js b/javascript/node/selenium-webdriver/test/lib/until_test.js\nindex 4b7822e281..b9eb7d928e 100644\n--- a/javascript/node/selenium-webdriver/test/lib/until_test.js\n+++ b/javascript/node/selenium-webdriver/test/lib/until_test.js\n@@ -174,6 +174,34 @@ describe('until', function() {\n           assert.deepStrictEqual(titles, ['google']);\n         });\n   });\n+  \n+  it('testUntilUrlIs', function() {\n+    var urls = ['http://www.foo.com', 'https://boo.com', 'http://docs.yes.com'];\n+    executor.on(CommandName.GET_CURRENT_URL, () => urls.shift());\n+\n+    return driver.wait(until.urlIs('https://boo.com'), 3000).then(function() {\n+      assert.deepStrictEqual(urls, ['http://docs.yes.com']);\n+    });\n+  });\n+  \n+  it('testUntilUrlContains', function() {\n+    var urls = ['http://foo.com', 'https://groups.froogle.com', 'http://google.com'];\n+    executor.on(CommandName.GET_CURRENT_URL, () => urls.shift());\n+\n+    return driver.wait(until.urlContains('oogle.com'), 3000).then(function() {\n+      assert.deepStrictEqual(urls, ['http://google.com']);\n+    });\n+  });\n+  \n+  it('testUntilUrlMatches', function() {\n+    var urls = ['foo', 'froogle', 'aaaabc', 'aabbbc', 'google'];\n+    executor.on(CommandName.GET_CURRENT_URL, () => urls.shift());\n+\n+    return driver.wait(until.urlMatches(/^a{2,3}b+c$/), 3000)\n+        .then(function() {\n+          assert.deepStrictEqual(urls, ['google']);\n+        });\n+  });\n \n   it('testUntilElementLocated', function() {\n     var responses = [\n", "instance_id": "seleniumhq__selenium-2139", "fixed_tests": {}, "failed_tests": [], "skipped_tests": [], "run_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "test_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "fix_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "f2p_tests": {}, "p2p_tests": {}, "s2p_tests": {}, "n2p_tests": {}}
{"org": "seleniumhq", "repo": "selenium", "number": 2141, "title": "Remove redundant generics type", "body": "Remove redundant generics type\n", "state": "closed", "base": {"label": "SeleniumHQ:master", "ref": "master", "sha": "bdabcc0d9d1b60e3e98c6ee057a3af511d87d184"}, "resolved_issues": [], "fix_patch": "diff --git a/java/client/src/org/openqa/selenium/interactions/CompositeAction.java b/java/client/src/org/openqa/selenium/interactions/CompositeAction.java\nindex 9ee6040e83..8ae463ea53 100644\n--- a/java/client/src/org/openqa/selenium/interactions/CompositeAction.java\n+++ b/java/client/src/org/openqa/selenium/interactions/CompositeAction.java\n@@ -63,7 +63,7 @@ int getNumberOfActions() {\n   }\n \n   public List<Action> asList() {\n-    ImmutableList.Builder<Action> builder = new ImmutableList.Builder<Action>();\n+    ImmutableList.Builder<Action> builder = new ImmutableList.Builder<>();\n     for (Action action : actionsList) {\n       if (action instanceof MultiAction) {\n         builder.addAll(((MultiAction) action).getActions());\n\ndiff --git a/java/client/src/org/openqa/selenium/io/TemporaryFilesystem.java b/java/client/src/org/openqa/selenium/io/TemporaryFilesystem.java\nindex bf49cd82c7..762d284e56 100644\n--- a/java/client/src/org/openqa/selenium/io/TemporaryFilesystem.java\n+++ b/java/client/src/org/openqa/selenium/io/TemporaryFilesystem.java\n@@ -29,7 +29,7 @@\n  */\n public class TemporaryFilesystem {\n \n-  private final Set<File> temporaryFiles = new CopyOnWriteArraySet<File>();\n+  private final Set<File> temporaryFiles = new CopyOnWriteArraySet<>();\n   private final File baseDir;\n   private final Thread shutdownHook = new Thread() {  // Thread safety reviewed\n     @Override\n\ndiff --git a/java/client/src/org/openqa/selenium/os/ExecutableFinder.java b/java/client/src/org/openqa/selenium/os/ExecutableFinder.java\nindex 77734bc52c..02cdc78313 100644\n--- a/java/client/src/org/openqa/selenium/os/ExecutableFinder.java\n+++ b/java/client/src/org/openqa/selenium/os/ExecutableFinder.java\n@@ -39,7 +39,7 @@ class ExecutableFinder {\n   private static final Method JDK6_CAN_EXECUTE = findJdk6CanExecuteMethod();\n \n   private final ImmutableSet.Builder<String> pathSegmentBuilder =\n-      new ImmutableSet.Builder<String>();\n+      new ImmutableSet.Builder<>();\n \n   /**\n    * Find the executable by scanning the file system and the PATH. In the case of Windows this\n\ndiff --git a/java/client/src/org/openqa/selenium/remote/RemoteLogs.java b/java/client/src/org/openqa/selenium/remote/RemoteLogs.java\nindex 8b1d3c3031..0c4e94b39f 100644\n--- a/java/client/src/org/openqa/selenium/remote/RemoteLogs.java\n+++ b/java/client/src/org/openqa/selenium/remote/RemoteLogs.java\n@@ -103,7 +103,7 @@ public Set<String> getAvailableLogTypes() {\n     Object raw = executeMethod.execute(DriverCommand.GET_AVAILABLE_LOG_TYPES, null);\n     @SuppressWarnings(\"unchecked\")\n     List<String> rawList = (List<String>) raw;\n-    ImmutableSet.Builder<String> builder = new ImmutableSet.Builder<String>();\n+    ImmutableSet.Builder<String> builder = new ImmutableSet.Builder<>();\n     for (String logType : rawList) {\n       builder.add(logType);\n     }\n\ndiff --git a/java/client/src/org/openqa/selenium/remote/RemoteWebDriver.java b/java/client/src/org/openqa/selenium/remote/RemoteWebDriver.java\nindex 745c1b0844..84ae8d3394 100644\n--- a/java/client/src/org/openqa/selenium/remote/RemoteWebDriver.java\n+++ b/java/client/src/org/openqa/selenium/remote/RemoteWebDriver.java\n@@ -169,7 +169,7 @@ private void init(Capabilities desiredCapabilities, Capabilities requiredCapabil\n     keyboard = new RemoteKeyboard(executeMethod);\n     mouse = new RemoteMouse(executeMethod);\n \n-    ImmutableSet.Builder<String> builder = new ImmutableSet.Builder<String>();\n+    ImmutableSet.Builder<String> builder = new ImmutableSet.Builder<>();\n \n     boolean isProfilingEnabled = desiredCapabilities != null &&\n         desiredCapabilities.is(CapabilityType.ENABLE_PROFILING_CAPABILITY);\n@@ -237,7 +237,7 @@ protected void startSession(Capabilities desiredCapabilities) {\n   protected void startSession(Capabilities desiredCapabilities,\n       Capabilities requiredCapabilities) {\n     ImmutableMap.Builder<String, Capabilities> paramBuilder =\n-        new ImmutableMap.Builder<String, Capabilities>();\n+        new ImmutableMap.Builder<>();\n     paramBuilder.put(\"desiredCapabilities\", desiredCapabilities);\n     if (requiredCapabilities != null) {\n       paramBuilder.put(\"requiredCapabilities\", requiredCapabilities);\n@@ -556,7 +556,7 @@ public Set<String> getWindowHandles() {\n     Object value = response.getValue();\n     try {\n       List<String> returnedValues = (List<String>) value;\n-      return new LinkedHashSet<String>(returnedValues);\n+      return new LinkedHashSet<>(returnedValues);\n     } catch (ClassCastException ex) {\n       throw new WebDriverException(\n         \"Returned value cannot be converted to List<String>: \" + value, ex);\n\ndiff --git a/java/client/src/org/openqa/selenium/safari/SafariDriverServer.java b/java/client/src/org/openqa/selenium/safari/SafariDriverServer.java\nindex 48adffa2a4..6390b91c34 100644\n--- a/java/client/src/org/openqa/selenium/safari/SafariDriverServer.java\n+++ b/java/client/src/org/openqa/selenium/safari/SafariDriverServer.java\n@@ -47,7 +47,7 @@ class SafariDriverServer {\n   private final int port;\n \n   private final BlockingQueue<WebSocketConnection> connections =\n-      new SynchronousQueue<WebSocketConnection>();\n+      new SynchronousQueue<>();\n \n   private ServerBootstrap bootstrap;\n   private Channel serverChannel;\n\ndiff --git a/java/client/src/org/openqa/selenium/safari/WebSocketConnection.java b/java/client/src/org/openqa/selenium/safari/WebSocketConnection.java\nindex 5756e3af01..7493443448 100644\n--- a/java/client/src/org/openqa/selenium/safari/WebSocketConnection.java\n+++ b/java/client/src/org/openqa/selenium/safari/WebSocketConnection.java\n@@ -50,7 +50,7 @@ class WebSocketConnection {\n   private final Channel channel;\n \n   private final AtomicReference<SettableFuture<String>> pendingResponse =\n-      new AtomicReference<SettableFuture<String>>();\n+      new AtomicReference<>();\n \n   public WebSocketConnection(Channel channel) {\n     this.channel = channel;\n\ndiff --git a/java/server/src/org/openqa/grid/internal/ProxySet.java b/java/server/src/org/openqa/grid/internal/ProxySet.java\nindex b027081f2c..f659e77aa5 100644\n--- a/java/server/src/org/openqa/grid/internal/ProxySet.java\n+++ b/java/server/src/org/openqa/grid/internal/ProxySet.java\n@@ -41,7 +41,7 @@\n @ThreadSafe\n public class ProxySet implements Iterable<RemoteProxy> {\n \n-  private final Set<RemoteProxy> proxies = new CopyOnWriteArraySet<RemoteProxy>();\n+  private final Set<RemoteProxy> proxies = new CopyOnWriteArraySet<>();\n \n   private static final Logger log = Logger.getLogger(ProxySet.class.getName());\n   private volatile boolean throwOnCapabilityNotPresent = true;\n\ndiff --git a/java/server/src/org/openqa/grid/internal/Registry.java b/java/server/src/org/openqa/grid/internal/Registry.java\nindex 843e92d32d..d3dbd667fd 100644\n--- a/java/server/src/org/openqa/grid/internal/Registry.java\n+++ b/java/server/src/org/openqa/grid/internal/Registry.java\n@@ -59,7 +59,7 @@ public class Registry {\n   private final HttpClientFactory httpClientFactory;\n   private final NewSessionRequestQueue newSessionQueue;\n   private final Matcher matcherThread = new Matcher();\n-  private final List<RemoteProxy> registeringProxies = new CopyOnWriteArrayList<RemoteProxy>();\n+  private final List<RemoteProxy> registeringProxies = new CopyOnWriteArrayList<>();\n \n   private volatile boolean stop = false;\n   // The following three variables need to be volatile because we expose a public setters\n\ndiff --git a/java/server/src/org/openqa/grid/selenium/proxy/DefaultRemoteProxy.java b/java/server/src/org/openqa/grid/selenium/proxy/DefaultRemoteProxy.java\nindex f4a26f9717..754e5b3ab4 100644\n--- a/java/server/src/org/openqa/grid/selenium/proxy/DefaultRemoteProxy.java\n+++ b/java/server/src/org/openqa/grid/selenium/proxy/DefaultRemoteProxy.java\n@@ -107,7 +107,7 @@ public HtmlRenderer getHtmlRender() {\n   private volatile boolean poll = true;\n \n   // TODO freynaud\n-  private List<RemoteException> errors = new CopyOnWriteArrayList<RemoteException>();\n+  private List<RemoteException> errors = new CopyOnWriteArrayList<>();\n   private Thread pollingThread = null;\n \n   public boolean isAlive() {\n\ndiff --git a/java/server/src/org/openqa/selenium/remote/server/CapabilitiesComparator.java b/java/server/src/org/openqa/selenium/remote/server/CapabilitiesComparator.java\nindex 3d9b6b1385..d86d996df2 100644\n--- a/java/server/src/org/openqa/selenium/remote/server/CapabilitiesComparator.java\n+++ b/java/server/src/org/openqa/selenium/remote/server/CapabilitiesComparator.java\n@@ -156,7 +156,7 @@ public int score(T value) {\n     }\n \n     static <T> CapabilityScorer<T> scoreAgainst(T value) {\n-      return new CapabilityScorer<T>(value);\n+      return new CapabilityScorer<>(value);\n     }\n   }\n \n\ndiff --git a/java/server/src/org/openqa/selenium/remote/server/DefaultSession.java b/java/server/src/org/openqa/selenium/remote/server/DefaultSession.java\nindex 90ca72458a..5ceb2a9529 100644\n--- a/java/server/src/org/openqa/selenium/remote/server/DefaultSession.java\n+++ b/java/server/src/org/openqa/selenium/remote/server/DefaultSession.java\n@@ -110,7 +110,7 @@ private DefaultSession(final DriverFactory factory, TemporaryFilesystem tempFs,\n     this.clock = clock;\n     final BrowserCreator browserCreator = new BrowserCreator(factory, capabilities);\n     final FutureTask<EventFiringWebDriver> webDriverFutureTask =\n-        new FutureTask<EventFiringWebDriver>(browserCreator);\n+        new FutureTask<>(browserCreator);\n     executor = new ThreadPoolExecutor(1, 1,\n                                       600L, TimeUnit.SECONDS,\n                                       new LinkedBlockingQueue<Runnable>());\n\ndiff --git a/java/server/src/org/openqa/selenium/remote/server/JsonHttpCommandHandler.java b/java/server/src/org/openqa/selenium/remote/server/JsonHttpCommandHandler.java\nindex 057d0de186..9e026be23c 100644\n--- a/java/server/src/org/openqa/selenium/remote/server/JsonHttpCommandHandler.java\n+++ b/java/server/src/org/openqa/selenium/remote/server/JsonHttpCommandHandler.java\n@@ -48,7 +48,7 @@ public class JsonHttpCommandHandler {\n   private final Logger log;\n   private final JsonHttpCommandCodec commandCodec;\n   private final JsonHttpResponseCodec responseCodec;\n-  private final Map<String, ResultConfig> configs = new LinkedHashMap<String, ResultConfig>();\n+  private final Map<String, ResultConfig> configs = new LinkedHashMap<>();\n   private final ErrorCodes errorCodes = new ErrorCodes();\n \n   public JsonHttpCommandHandler(DriverSessions sessions, Logger log) {\n\ndiff --git a/java/server/src/org/openqa/selenium/remote/server/handler/SendKeys.java b/java/server/src/org/openqa/selenium/remote/server/handler/SendKeys.java\nindex 7ef0589462..17791de895 100644\n--- a/java/server/src/org/openqa/selenium/remote/server/handler/SendKeys.java\n+++ b/java/server/src/org/openqa/selenium/remote/server/handler/SendKeys.java\n@@ -28,7 +28,7 @@\n \n public class SendKeys extends WebElementHandler<Void> implements JsonParametersAware {\n \n-  private final List<CharSequence> keys = new CopyOnWriteArrayList<CharSequence>();\n+  private final List<CharSequence> keys = new CopyOnWriteArrayList<>();\n \n   public SendKeys(Session session) {\n     super(session);\n\ndiff --git a/java/server/src/org/openqa/selenium/remote/server/handler/WebDriverHandler.java b/java/server/src/org/openqa/selenium/remote/server/handler/WebDriverHandler.java\nindex fbe491013a..03939b0bf2 100644\n--- a/java/server/src/org/openqa/selenium/remote/server/handler/WebDriverHandler.java\n+++ b/java/server/src/org/openqa/selenium/remote/server/handler/WebDriverHandler.java\n@@ -40,7 +40,7 @@ protected WebDriverHandler(Session session) {\n \n   @Override\n   public final T handle() throws Exception {\n-    FutureTask<T> future = new FutureTask<T>(this);\n+    FutureTask<T> future = new FutureTask<>(this);\n     try {\n       return getSession().execute(future);\n     } catch (ExecutionException e) {\n\ndiff --git a/java/server/src/org/openqa/selenium/remote/server/handler/interactions/SendKeyToActiveElement.java b/java/server/src/org/openqa/selenium/remote/server/handler/interactions/SendKeyToActiveElement.java\nindex 02e7def21f..953e8bd679 100644\n--- a/java/server/src/org/openqa/selenium/remote/server/handler/interactions/SendKeyToActiveElement.java\n+++ b/java/server/src/org/openqa/selenium/remote/server/handler/interactions/SendKeyToActiveElement.java\n@@ -30,7 +30,7 @@\n \n public class SendKeyToActiveElement extends WebDriverHandler<Void> implements JsonParametersAware {\n \n-  private final List<CharSequence> keys = new CopyOnWriteArrayList<CharSequence>();\n+  private final List<CharSequence> keys = new CopyOnWriteArrayList<>();\n \n   public SendKeyToActiveElement(Session session) {\n     super(session);\n\ndiff --git a/java/server/src/org/openqa/selenium/remote/server/log/DefaultPerSessionLogHandler.java b/java/server/src/org/openqa/selenium/remote/server/log/DefaultPerSessionLogHandler.java\nindex ba988daaaa..55b11d84a3 100644\n--- a/java/server/src/org/openqa/selenium/remote/server/log/DefaultPerSessionLogHandler.java\n+++ b/java/server/src/org/openqa/selenium/remote/server/log/DefaultPerSessionLogHandler.java\n@@ -276,7 +276,7 @@ public synchronized LogEntries getSessionLog(SessionId sessionId) throws IOExcep\n   public synchronized List<SessionId> getLoggedSessions() {\n     // TODO: Find a solution that can handle large numbers of sessions, maybe by\n     // reading them from disc.\n-    ImmutableList.Builder<SessionId> builder = new ImmutableList.Builder<SessionId>();\n+    ImmutableList.Builder<SessionId> builder = new ImmutableList.Builder<>();\n     builder.addAll(perSessionDriverEntries.keySet());\n     return builder.build();\n   }\n", "test_patch": "diff --git a/java/client/test/org/openqa/selenium/remote/RemoteLogsTest.java b/java/client/test/org/openqa/selenium/remote/RemoteLogsTest.java\nindex 4703827b60..a80acf57a8 100644\n--- a/java/client/test/org/openqa/selenium/remote/RemoteLogsTest.java\n+++ b/java/client/test/org/openqa/selenium/remote/RemoteLogsTest.java\n@@ -60,7 +60,7 @@ public void createMocksAndRemoteLogs() {\n \n   @Test\n   public void canGetProfilerLogs() {\n-    List<LogEntry> entries = new ArrayList<LogEntry>();\n+    List<LogEntry> entries = new ArrayList<>();\n     entries.add(new LogEntry(Level.INFO, 0, \"hello\"));\n     when(localLogs.get(LogType.PROFILER)).thenReturn(new LogEntries(entries));\n \n@@ -79,7 +79,7 @@ public void canGetProfilerLogs() {\n \n   @Test\n   public void canGetLocalProfilerLogsIfNoRemoteProfilerLogSupport() {\n-    List<LogEntry> entries = new ArrayList<LogEntry>();\n+    List<LogEntry> entries = new ArrayList<>();\n     entries.add(new LogEntry(Level.INFO, 0, \"hello\"));\n     when(localLogs.get(LogType.PROFILER)).thenReturn(new LogEntries(entries));\n \n@@ -97,7 +97,7 @@ public void canGetLocalProfilerLogsIfNoRemoteProfilerLogSupport() {\n \n   @Test\n   public void canGetClientLogs() {\n-    List<LogEntry> entries = new ArrayList<LogEntry>();\n+    List<LogEntry> entries = new ArrayList<>();\n     entries.add(new LogEntry(Level.SEVERE, 0, \"hello\"));\n     when(localLogs.get(LogType.CLIENT)).thenReturn(new LogEntries(entries));\n \n@@ -127,20 +127,20 @@ public void canGetServerLogs() {\n \n   @Test\n   public void canGetAvailableLogTypes() {\n-    List<String> remoteAvailableLogTypes = new ArrayList<String>();\n+    List<String> remoteAvailableLogTypes = new ArrayList<>();\n     remoteAvailableLogTypes.add(LogType.PROFILER);\n     remoteAvailableLogTypes.add(LogType.SERVER);\n \n     when(executeMethod.execute(DriverCommand.GET_AVAILABLE_LOG_TYPES, null))\n         .thenReturn(remoteAvailableLogTypes);\n \n-    Set<String> localAvailableLogTypes = new HashSet<String>();\n+    Set<String> localAvailableLogTypes = new HashSet<>();\n     localAvailableLogTypes.add(LogType.PROFILER);\n     localAvailableLogTypes.add(LogType.CLIENT);\n \n     when(localLogs.getAvailableLogTypes()).thenReturn(localAvailableLogTypes);\n \n-    Set<String> expected = new HashSet<String>();\n+    Set<String> expected = new HashSet<>();\n     expected.add(LogType.CLIENT);\n     expected.add(LogType.PROFILER);\n     expected.add(LogType.SERVER);\n\ndiff --git a/java/client/test/org/openqa/selenium/support/ui/ExpectedConditionsTest.java b/java/client/test/org/openqa/selenium/support/ui/ExpectedConditionsTest.java\nindex eff4e21685..0df53661bb 100644\n--- a/java/client/test/org/openqa/selenium/support/ui/ExpectedConditionsTest.java\n+++ b/java/client/test/org/openqa/selenium/support/ui/ExpectedConditionsTest.java\n@@ -100,7 +100,7 @@ public class ExpectedConditionsTest {\n   public void setUpMocks() {\n     MockitoAnnotations.initMocks(this);\n \n-    wait = new FluentWait<WebDriver>(mockDriver, mockClock, mockSleeper)\n+    wait = new FluentWait<>(mockDriver, mockClock, mockSleeper)\n       .withTimeout(1, TimeUnit.SECONDS)\n       .pollingEvery(250, TimeUnit.MILLISECONDS);\n   }\n\ndiff --git a/java/client/test/org/openqa/selenium/support/ui/FluentWaitTest.java b/java/client/test/org/openqa/selenium/support/ui/FluentWaitTest.java\nindex 8d5a3abe26..43a3838ac1 100644\n--- a/java/client/test/org/openqa/selenium/support/ui/FluentWaitTest.java\n+++ b/java/client/test/org/openqa/selenium/support/ui/FluentWaitTest.java\n@@ -67,7 +67,7 @@ public void shouldWaitUntilReturnValueOfConditionIsNotNull() throws InterruptedE\n     when(mockClock.isNowBefore(2L)).thenReturn(true);\n     when(mockCondition.apply(mockDriver)).thenReturn(null, ARBITRARY_VALUE);\n \n-    Wait<WebDriver> wait = new FluentWait<WebDriver>(mockDriver, mockClock, mockSleeper)\n+    Wait<WebDriver> wait = new FluentWait<>(mockDriver, mockClock, mockSleeper)\n       .withTimeout(0, TimeUnit.MILLISECONDS)\n       .pollingEvery(2, TimeUnit.SECONDS)\n       .ignoring(NoSuchElementException.class, NoSuchFrameException.class);\n@@ -82,7 +82,7 @@ public void shouldWaitUntilABooleanResultIsTrue() throws InterruptedException {\n     when(mockClock.isNowBefore(2L)).thenReturn(true);\n     when(mockCondition.apply(mockDriver)).thenReturn(false, false, true);\n \n-    Wait<WebDriver> wait = new FluentWait<WebDriver>(mockDriver, mockClock, mockSleeper)\n+    Wait<WebDriver> wait = new FluentWait<>(mockDriver, mockClock, mockSleeper)\n       .withTimeout(0, TimeUnit.MILLISECONDS)\n       .pollingEvery(2, TimeUnit.SECONDS)\n       .ignoring(NoSuchElementException.class, NoSuchFrameException.class);\n@@ -98,7 +98,7 @@ public void checksTimeoutAfterConditionSoZeroTimeoutWaitsCanSucceed() {\n     when(mockClock.isNowBefore(2L)).thenReturn(false);\n     when(mockCondition.apply(mockDriver)).thenReturn(null);\n \n-    Wait<WebDriver> wait = new FluentWait<WebDriver>(mockDriver, mockClock, mockSleeper)\n+    Wait<WebDriver> wait = new FluentWait<>(mockDriver, mockClock, mockSleeper)\n       .withTimeout(0, TimeUnit.MILLISECONDS);\n     try {\n       wait.until(mockCondition);\n@@ -117,7 +117,7 @@ public void canIgnoreMultipleExceptions() throws InterruptedException {\n       .thenThrow(new NoSuchFrameException(\"\"))\n       .thenReturn(ARBITRARY_VALUE);\n \n-    Wait<WebDriver> wait = new FluentWait<WebDriver>(mockDriver, mockClock, mockSleeper)\n+    Wait<WebDriver> wait = new FluentWait<>(mockDriver, mockClock, mockSleeper)\n       .withTimeout(0, TimeUnit.MILLISECONDS)\n       .pollingEvery(2, TimeUnit.SECONDS)\n       .ignoring(NoSuchElementException.class, NoSuchFrameException.class);\n@@ -134,7 +134,7 @@ public void propagatesUnIgnoredExceptions() {\n     when(mockClock.laterBy(0L)).thenReturn(2L);\n     when(mockCondition.apply(mockDriver)).thenThrow(exception);\n \n-    Wait<WebDriver> wait = new FluentWait<WebDriver>(mockDriver, mockClock, mockSleeper)\n+    Wait<WebDriver> wait = new FluentWait<>(mockDriver, mockClock, mockSleeper)\n       .withTimeout(0, TimeUnit.MILLISECONDS)\n       .pollingEvery(2, TimeUnit.SECONDS)\n       .ignoring(NoSuchElementException.class, NoSuchFrameException.class);\n@@ -157,7 +157,7 @@ public void timeoutMessageIncludesLastIgnoredException() {\n       .thenReturn(null);\n     when(mockClock.isNowBefore(2L)).thenReturn(false);\n \n-    Wait<WebDriver> wait = new FluentWait<WebDriver>(mockDriver, mockClock, mockSleeper)\n+    Wait<WebDriver> wait = new FluentWait<>(mockDriver, mockClock, mockSleeper)\n       .withTimeout(0, TimeUnit.MILLISECONDS)\n       .pollingEvery(2, TimeUnit.SECONDS)\n       .ignoring(NoSuchWindowException.class);\n@@ -179,7 +179,7 @@ public void timeoutMessageIncludesCustomMessage() {\n     when(mockCondition.apply(mockDriver)).thenReturn(null);\n     when(mockClock.isNowBefore(2L)).thenReturn(false);\n \n-    Wait<WebDriver> wait = new FluentWait<WebDriver>(mockDriver, mockClock, mockSleeper)\n+    Wait<WebDriver> wait = new FluentWait<>(mockDriver, mockClock, mockSleeper)\n       .withTimeout(0, TimeUnit.MILLISECONDS)\n       .withMessage(\"Expected custom timeout message\");\n \n@@ -203,7 +203,7 @@ public void timeoutMessageIncludesCustomMessageEvaluatedOnFailure() {\n     when(mockCondition.apply(mockDriver)).thenReturn(null);\n     when(mockClock.isNowBefore(2L)).thenReturn(false);\n \n-    Wait<WebDriver> wait = new FluentWait<WebDriver>(mockDriver, mockClock, mockSleeper)\n+    Wait<WebDriver> wait = new FluentWait<>(mockDriver, mockClock, mockSleeper)\n       .withTimeout(0, TimeUnit.MILLISECONDS)\n       .withMessage(new Supplier<String>() {\n         @Override\n@@ -258,7 +258,7 @@ public void canIgnoreThrowables() {\n     when(mockCondition.apply(mockDriver)).thenThrow(exception);\n     when(mockClock.isNowBefore(2L)).thenReturn(false);\n \n-    Wait<WebDriver> wait = new FluentWait<WebDriver>(mockDriver, mockClock, mockSleeper)\n+    Wait<WebDriver> wait = new FluentWait<>(mockDriver, mockClock, mockSleeper)\n       .withTimeout(0, TimeUnit.MILLISECONDS)\n       .pollingEvery(2, TimeUnit.SECONDS)\n       .ignoring(AssertionError.class);\n\ndiff --git a/java/client/test/org/openqa/selenium/testing/drivers/OutOfProcessSeleniumServer.java b/java/client/test/org/openqa/selenium/testing/drivers/OutOfProcessSeleniumServer.java\nindex 14222162fa..87960c0a93 100644\n--- a/java/client/test/org/openqa/selenium/testing/drivers/OutOfProcessSeleniumServer.java\n+++ b/java/client/test/org/openqa/selenium/testing/drivers/OutOfProcessSeleniumServer.java\n@@ -69,7 +69,7 @@ public OutOfProcessSeleniumServer start() {\n     String localAddress = new NetworkUtils().getPrivateLocalAddress();\n     baseUrl = String.format(\"http://%s:%d\", localAddress, port);\n \n-    List<String> cmdLine = new LinkedList<String>();\n+    List<String> cmdLine = new LinkedList<>();\n     cmdLine.add(\"java\");\n     cmdLine.add(\"-cp\");\n     cmdLine.add(classPath);\n\ndiff --git a/java/server/src/org/openqa/selenium/server/htmlrunner/HTMLTestResults.java b/java/server/src/org/openqa/selenium/server/htmlrunner/HTMLTestResults.java\nindex d99a2e7660..cf798837e4 100644\n--- a/java/server/src/org/openqa/selenium/server/htmlrunner/HTMLTestResults.java\n+++ b/java/server/src/org/openqa/selenium/server/htmlrunner/HTMLTestResults.java\n@@ -240,7 +240,7 @@ public String decode(String string) {\n     }\n \n     public List decodeListOfStrings(List list) {\n-      List<String> decodedList = new LinkedList<String>();\n+      List<String> decodedList = new LinkedList<>();\n \n       for (Object o : list) {\n         decodedList.add(decode((String) o));\n\ndiff --git a/java/server/test/org/openqa/selenium/remote/server/SessionCleanerTest.java b/java/server/test/org/openqa/selenium/remote/server/SessionCleanerTest.java\nindex 4af4cd0fb7..aef988a2b1 100644\n--- a/java/server/test/org/openqa/selenium/remote/server/SessionCleanerTest.java\n+++ b/java/server/test/org/openqa/selenium/remote/server/SessionCleanerTest.java\n@@ -89,7 +89,7 @@ private Runnable getRunnableThatMakesSessionBusy(final Session session,\n     return new Runnable(){\n       public void run(){\n         try {\n-          session.execute(new FutureTask<Object>(new Callable<Object>()\n+          session.execute(new FutureTask<>(new Callable<Object>()\n          {\n           public Object call() {\n             try {\n", "instance_id": "seleniumhq__selenium-2141", "fixed_tests": {}, "failed_tests": [], "skipped_tests": [], "run_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "test_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "fix_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "f2p_tests": {}, "p2p_tests": {}, "s2p_tests": {}, "n2p_tests": {}}
{"org": "seleniumhq", "repo": "selenium", "number": 2142, "title": "Remove unneeded 'else'", "body": "Remove unneeded 'else'\n", "state": "closed", "base": {"label": "SeleniumHQ:master", "ref": "master", "sha": "a1b0fbd60337117a1d3d36f22cc633fc670fbfd8"}, "resolved_issues": [], "fix_patch": "diff --git a/java/client/src/com/thoughtworks/selenium/condition/Condition.java b/java/client/src/com/thoughtworks/selenium/condition/Condition.java\nindex 729ddbd1e4..a143002f4c 100644\n--- a/java/client/src/com/thoughtworks/selenium/condition/Condition.java\n+++ b/java/client/src/com/thoughtworks/selenium/condition/Condition.java\n@@ -73,16 +73,13 @@ private String simulateStringDotFormatMethod(String message, Object[] args) {\n         }\n       }\n       throw new RuntimeException(\"String.format(..) can't be that hard to call\");\n-    } else {\n-      String msg = \"\";\n-      msg = message;\n-      for (int i = 0; i < args.length; i++) {\n-        msg = msg + \" \" + args[i];\n-      }\n-      return msg;\n-\n     }\n-\n+    String msg = \"\";\n+    msg = message;\n+    for (int i = 0; i < args.length; i++) {\n+      msg = msg + \" \" + args[i];\n+    }\n+    return msg;\n   }\n \n   // drop these for var-args in another year.\n\ndiff --git a/java/client/src/com/thoughtworks/selenium/condition/Text.java b/java/client/src/com/thoughtworks/selenium/condition/Text.java\nindex 7b5e42c0ee..0255d66c2a 100644\n--- a/java/client/src/com/thoughtworks/selenium/condition/Text.java\n+++ b/java/client/src/com/thoughtworks/selenium/condition/Text.java\n@@ -49,8 +49,7 @@ public Text(String expectedText, String locator) {\n   public boolean isTrue(ConditionRunner.Context context) {\n     if (null == locator) {\n       return context.getSelenium().isTextPresent(expectedText);\n-    } else {\n-      return context.getSelenium().getText(locator).equalsIgnoreCase(expectedText);\n     }\n+    return context.getSelenium().getText(locator).equalsIgnoreCase(expectedText);\n   }\n }\n\ndiff --git a/java/client/src/com/thoughtworks/selenium/webdriven/WebDriverCommandProcessor.java b/java/client/src/com/thoughtworks/selenium/webdriven/WebDriverCommandProcessor.java\nindex 944812105b..7075232677 100644\n--- a/java/client/src/com/thoughtworks/selenium/webdriven/WebDriverCommandProcessor.java\n+++ b/java/client/src/com/thoughtworks/selenium/webdriven/WebDriverCommandProcessor.java\n@@ -95,10 +95,9 @@ public void start(Object o) {\n     if (driver != null) {\n       if (maker != null) {\n         throw new SeleniumException(\"You may not start more than one session at a time\");\n-      } else {\n-        // The command processor was instantiated with an already started driver\n-        return;\n       }\n+      // The command processor was instantiated with an already started driver\n+      return;\n     }\n \n     driver = maker.get();\n\ndiff --git a/java/client/src/com/thoughtworks/selenium/webdriven/commands/CaptureScreenshotToString.java b/java/client/src/com/thoughtworks/selenium/webdriven/commands/CaptureScreenshotToString.java\nindex 5a94e8d229..85881202e2 100644\n--- a/java/client/src/com/thoughtworks/selenium/webdriven/commands/CaptureScreenshotToString.java\n+++ b/java/client/src/com/thoughtworks/selenium/webdriven/commands/CaptureScreenshotToString.java\n@@ -30,8 +30,7 @@ protected String handleSeleneseCommand(WebDriver driver, String locator, String\n     if (driver instanceof TakesScreenshot) {\n       TakesScreenshot tsDriver = (TakesScreenshot) driver;\n       return tsDriver.getScreenshotAs(OutputType.BASE64);\n-    } else {\n-      throw new UnsupportedOperationException(\"WebDriver does not implement TakeScreenshot\");\n     }\n+    throw new UnsupportedOperationException(\"WebDriver does not implement TakeScreenshot\");\n   }\n }\n\ndiff --git a/java/client/src/com/thoughtworks/selenium/webdriven/commands/GetValue.java b/java/client/src/com/thoughtworks/selenium/webdriven/commands/GetValue.java\nindex f3a968f926..a4e3599dad 100644\n--- a/java/client/src/com/thoughtworks/selenium/webdriven/commands/GetValue.java\n+++ b/java/client/src/com/thoughtworks/selenium/webdriven/commands/GetValue.java\n@@ -42,9 +42,8 @@ protected String handleSeleneseCommand(WebDriver driver, String locator, String\n     {\n       if (element.getAttribute(\"checked\") == null) {\n         return \"off\";\n-      } else {\n-        return \"on\";\n       }\n+      return \"on\";\n     }\n \n     return element.getAttribute(\"value\");\n\ndiff --git a/java/client/src/org/openqa/selenium/firefox/FirefoxDriver.java b/java/client/src/org/openqa/selenium/firefox/FirefoxDriver.java\nindex 570296f0f8..386d8bcd1a 100644\n--- a/java/client/src/org/openqa/selenium/firefox/FirefoxDriver.java\n+++ b/java/client/src/org/openqa/selenium/firefox/FirefoxDriver.java\n@@ -228,11 +228,10 @@ private static final CommandExecutor createCommandExecutor(Capabilities desiredC\n     Object marionette = desiredCapabilities.getCapability(MARIONETTE);\n     if (marionette instanceof Boolean && !(Boolean) marionette) {\n       return new LazyCommandExecutor(binary, profile);\n-    } else {\n-      GeckoDriverService.Builder builder = new GeckoDriverService.Builder();\n-      builder.usingPort(0);\n-      return new DriverCommandExecutor(builder.build());\n     }\n+    GeckoDriverService.Builder builder = new GeckoDriverService.Builder();\n+    builder.usingPort(0);\n+    return new DriverCommandExecutor(builder.build());\n   }\n \n   @Override\n\ndiff --git a/java/client/src/org/openqa/selenium/firefox/Preferences.java b/java/client/src/org/openqa/selenium/firefox/Preferences.java\nindex 2cfc4c1b70..1eed347c63 100644\n--- a/java/client/src/org/openqa/selenium/firefox/Preferences.java\n+++ b/java/client/src/org/openqa/selenium/firefox/Preferences.java\n@@ -181,10 +181,8 @@ public void writeTo(Writer writer) throws IOException {\n   private String valueAsPreference(Object value) {\n     if (value instanceof String) {\n       return \"\\\"\" + escapeValueAsPreference((String) value) + \"\\\"\";\n-    } else {\n-      return escapeValueAsPreference(String.valueOf(value));\n     }\n-\n+    return escapeValueAsPreference(String.valueOf(value));\n   }\n \n   private String escapeValueAsPreference(String value) {\n\ndiff --git a/java/client/src/org/openqa/selenium/lift/Finders.java b/java/client/src/org/openqa/selenium/lift/Finders.java\nindex 444faa6222..26a3af7000 100644\n--- a/java/client/src/org/openqa/selenium/lift/Finders.java\n+++ b/java/client/src/org/openqa/selenium/lift/Finders.java\n@@ -133,9 +133,8 @@ public Collection<WebElement> findFrom(WebDriver context) {\n           Iterator<WebElement> iter = collection.iterator();\n           iter.hasNext();\n           return Collections.singletonList(iter.next());\n-        } else {\n-          return collection;\n         }\n+        return collection;\n       }\n \n       @Override\n\ndiff --git a/java/client/src/org/openqa/selenium/lift/find/BaseFinder.java b/java/client/src/org/openqa/selenium/lift/find/BaseFinder.java\nindex 6d7bb29c5d..1423423fcb 100644\n--- a/java/client/src/org/openqa/selenium/lift/find/BaseFinder.java\n+++ b/java/client/src/org/openqa/selenium/lift/find/BaseFinder.java\n@@ -39,9 +39,8 @@ public Collection<S> findFrom(T context) {\n \n     if (matchers.isEmpty()) {\n       return found;\n-    } else {\n-      return allMatching(matchers, found);\n     }\n+    return allMatching(matchers, found);\n   }\n \n   public Finder<S, T> with(Matcher<S> matcher) {\n\ndiff --git a/java/client/src/org/openqa/selenium/os/ProcessUtils.java b/java/client/src/org/openqa/selenium/os/ProcessUtils.java\nindex a8d0018d30..ac3ee3d038 100644\n--- a/java/client/src/org/openqa/selenium/os/ProcessUtils.java\n+++ b/java/client/src/org/openqa/selenium/os/ProcessUtils.java\n@@ -79,9 +79,8 @@ private static int waitForProcessDeath(Process p, long timeout) {\n   public static int killProcess(Process process) {\n     if (thisIsWindows()) {\n       return killWinProcess(process);\n-    } else {\n-      return killUnixProcess(process);\n     }\n+    return killUnixProcess(process);\n   }\n \n   private static int killUnixProcess(Process process) {\n\ndiff --git a/java/client/src/org/openqa/selenium/remote/Augmenter.java b/java/client/src/org/openqa/selenium/remote/Augmenter.java\nindex 5afdf7e668..39cf954128 100644\n--- a/java/client/src/org/openqa/selenium/remote/Augmenter.java\n+++ b/java/client/src/org/openqa/selenium/remote/Augmenter.java\n@@ -67,11 +67,10 @@ protected RemoteWebDriver extractRemoteWebDriver(WebDriver driver) {\n             \"org.openqa.selenium.remote.RemoteWebDriver$$EnhancerByCGLIB\")) {\n       return (RemoteWebDriver) driver;\n \n-    } else {\n-      logger.warning(\"Augmenter should be applied to the instances of @Augmentable classes \" +\n-                     \"or previously augmented instances only\");\n-      return null;\n     }\n+    logger.warning(\"Augmenter should be applied to the instances of @Augmentable classes \" +\n+        \"or previously augmented instances only\");\n+    return null;\n   }\n \n   private void copyFields(Class<?> clazz, Object source, Object target) {\n\ndiff --git a/java/client/src/org/openqa/selenium/remote/BeanToJsonConverter.java b/java/client/src/org/openqa/selenium/remote/BeanToJsonConverter.java\nindex 655a31705a..ba48bf4e24 100644\n--- a/java/client/src/org/openqa/selenium/remote/BeanToJsonConverter.java\n+++ b/java/client/src/org/openqa/selenium/remote/BeanToJsonConverter.java\n@@ -218,12 +218,11 @@ private JsonElement convertObject(Object toConvert, int maxDepth) throws Excepti\n         Object res = toJson.invoke(toConvert);\n         if (res instanceof JsonElement) {\n           return (JsonElement) res;\n-        } else {\n-          try {\n-            return new JsonParser().parse((String) res);\n-          } catch (JsonParseException e) {\n-            return new JsonPrimitive((String) res);\n-          }\n+        }\n+        try {\n+          return new JsonParser().parse((String) res);\n+        } catch (JsonParseException e) {\n+          return new JsonPrimitive((String) res);\n         }\n       } catch (IllegalArgumentException e) {\n         throw new WebDriverException(e);\n\ndiff --git a/java/client/src/org/openqa/selenium/remote/HttpSessionId.java b/java/client/src/org/openqa/selenium/remote/HttpSessionId.java\nindex 569b5bc606..b909124c5e 100644\n--- a/java/client/src/org/openqa/selenium/remote/HttpSessionId.java\n+++ b/java/client/src/org/openqa/selenium/remote/HttpSessionId.java\n@@ -26,10 +26,8 @@ public static String getSessionId(String uri) {\n       int nextSlash = uri.indexOf(\"/\", sessionIndex);\n       if (nextSlash != -1) {\n         return uri.substring(sessionIndex, nextSlash);\n-      } else {\n-        return uri.substring(sessionIndex);\n       }\n-\n+      return uri.substring(sessionIndex);\n     }\n     return null;\n   }\n\ndiff --git a/java/client/src/org/openqa/selenium/remote/JdkAugmenter.java b/java/client/src/org/openqa/selenium/remote/JdkAugmenter.java\nindex 220de8a2b8..1f0edced1e 100644\n--- a/java/client/src/org/openqa/selenium/remote/JdkAugmenter.java\n+++ b/java/client/src/org/openqa/selenium/remote/JdkAugmenter.java\n@@ -134,9 +134,8 @@ public Object handleInvocation(Object proxy, Method method, Object[] args) throw\n         System.out.println(\"Method: \" + method + \"all handlers: \" + handlers.keySet());\n         if (null == handler) {\n           return method.invoke(realInstance, args);\n-        } else {\n-          return handler.invoke(new RemoteExecuteMethod(driver), proxy, method, args);\n         }\n+        return handler.invoke(new RemoteExecuteMethod(driver), proxy, method, args);\n       } catch (InvocationTargetException i) {\n         throw i.getCause();\n       }\n\ndiff --git a/java/client/src/org/openqa/selenium/remote/JsonToBeanConverter.java b/java/client/src/org/openqa/selenium/remote/JsonToBeanConverter.java\nindex 054d701264..0189964665 100644\n--- a/java/client/src/org/openqa/selenium/remote/JsonToBeanConverter.java\n+++ b/java/client/src/org/openqa/selenium/remote/JsonToBeanConverter.java\n@@ -155,9 +155,8 @@ private <T> T convert(Class<T> clazz, Object source, int depth) {\n           ? new JsonParser().parse((String) source).getAsJsonObject() : (JsonElement) source;\n       if (json.isJsonPrimitive()) {\n         return (T) new SessionId(json.getAsString());\n-      } else {\n-        return (T) new SessionId(json.getAsJsonObject().get(\"value\").getAsString());\n       }\n+      return (T) new SessionId(json.getAsJsonObject().get(\"value\").getAsString());\n     }\n \n     if (Capabilities.class.isAssignableFrom(clazz)) {\n@@ -248,9 +247,8 @@ private Object convertJsonPrimitive(JsonPrimitive json) {\n     } else if (json.isNumber()) {\n       if (json.getAsLong() == json.getAsDouble()) {\n         return json.getAsLong();\n-      } else {\n-        return json.getAsDouble();\n       }\n+      return json.getAsDouble();\n     } else if (json.isString()) {\n       return json.getAsString();\n     } else {\n@@ -263,19 +261,17 @@ private Enum convertEnum(Class clazz, Object text) {\n     if (clazz.isEnum()) {\n       if (text instanceof JsonElement) {\n         return Enum.valueOf(clazz, (String) convertJsonPrimitive((JsonElement) text));\n-      } else {\n-        return Enum.valueOf(clazz, String.valueOf(text));\n       }\n+      return Enum.valueOf(clazz, String.valueOf(text));\n     }\n \n     Class[] allClasses = clazz.getClasses();\n     for (Class current : allClasses) {\n       if (current.isEnum()) {\n         if (text instanceof JsonElement) {\n           return Enum.valueOf(current, (String) convertJsonPrimitive((JsonElement) text));\n-        } else {\n-          return Enum.valueOf(current, String.valueOf(text));\n         }\n+        return Enum.valueOf(current, String.valueOf(text));\n       }\n     }\n \n\ndiff --git a/java/client/src/org/openqa/selenium/remote/RemoteWebDriver.java b/java/client/src/org/openqa/selenium/remote/RemoteWebDriver.java\nindex 745c1b0844..eae8e9ab3c 100644\n--- a/java/client/src/org/openqa/selenium/remote/RemoteWebDriver.java\n+++ b/java/client/src/org/openqa/selenium/remote/RemoteWebDriver.java\n@@ -341,9 +341,8 @@ public String getCurrentUrl() {\n     Response response = execute(DriverCommand.GET_CURRENT_URL);\n     if (response == null || response.getValue() == null) {\n       throw new WebDriverException(\"Remote browser did not respond to getCurrentUrl\");\n-    } else {\n-      return response.getValue().toString();\n     }\n+    return response.getValue().toString();\n   }\n \n   public <X> X getScreenshotAs(OutputType<X> outputType) throws WebDriverException {\n@@ -426,17 +425,15 @@ static String cssEscape(String using) {\n   public WebElement findElementById(String using) {\n     if (getW3CStandardComplianceLevel() == 0) {\n       return findElement(\"id\", using);\n-    } else {\n-      return findElementByCssSelector(\"#\" + cssEscape(using));\n     }\n+    return findElementByCssSelector(\"#\" + cssEscape(using));\n   }\n \n   public List<WebElement> findElementsById(String using) {\n     if (getW3CStandardComplianceLevel() == 0) {\n       return findElements(\"id\", using);\n-    } else {\n-      return findElementsByCssSelector(\"#\" + cssEscape(using));\n     }\n+    return findElementsByCssSelector(\"#\" + cssEscape(using));\n   }\n \n   public WebElement findElementByLinkText(String using) {\n@@ -458,49 +455,43 @@ public List<WebElement> findElementsByPartialLinkText(String using) {\n   public WebElement findElementByTagName(String using) {\n     if (getW3CStandardComplianceLevel() == 0) {\n       return findElement(\"tag name\", using);\n-    } else {\n-      return findElementByCssSelector(using);\n     }\n+    return findElementByCssSelector(using);\n   }\n \n   public List<WebElement> findElementsByTagName(String using) {\n     if (getW3CStandardComplianceLevel() == 0) {\n       return findElements(\"tag name\", using);\n-    } else {\n-      return findElementsByCssSelector(using);\n     }\n+    return findElementsByCssSelector(using);\n   }\n \n   public WebElement findElementByName(String using) {\n     if (getW3CStandardComplianceLevel() == 0) {\n       return findElement(\"name\", using);\n-    } else {\n-      return findElementByCssSelector(\"*[name='\" + using + \"']\");\n     }\n+    return findElementByCssSelector(\"*[name='\" + using + \"']\");\n   }\n \n   public List<WebElement> findElementsByName(String using) {\n     if (getW3CStandardComplianceLevel() == 0) {\n       return findElements(\"name\", using);\n-    } else {\n-      return findElementsByCssSelector(\"*[name='\" + using + \"']\");\n     }\n+    return findElementsByCssSelector(\"*[name='\" + using + \"']\");\n   }\n \n   public WebElement findElementByClassName(String using) {\n     if (getW3CStandardComplianceLevel() == 0) {\n       return findElement(\"class name\", using);\n-    } else {\n-      return findElementByCssSelector(\".\" + cssEscape(using));\n     }\n+    return findElementByCssSelector(\".\" + cssEscape(using));\n   }\n \n   public List<WebElement> findElementsByClassName(String using) {\n     if (getW3CStandardComplianceLevel() == 0) {\n       return findElements(\"class name\", using);\n-    } else {\n-      return findElementsByCssSelector(\".\" + cssEscape(using));\n     }\n+    return findElementsByCssSelector(\".\" + cssEscape(using));\n   }\n \n   public WebElement findElementByCssSelector(String using) {\n@@ -524,12 +515,11 @@ public List<WebElement> findElementsByXPath(String using) {\n   public String getPageSource() {\n     if (getW3CStandardComplianceLevel() == 0) {\n       return (String) execute(DriverCommand.GET_PAGE_SOURCE).getValue();\n-    } else {\n-      String script = \"var source = document.documentElement.outerHTML; \\n\"\n-                      + \"if (!source) { source = new XMLSerializer().serializeToString(document); }\\n\"\n-                      + \"return source;\";\n-      return (String) executeScript(script);\n     }\n+    String script = \"var source = document.documentElement.outerHTML; \\n\"\n+                    + \"if (!source) { source = new XMLSerializer().serializeToString(document); }\\n\"\n+                    + \"return source;\";\n+    return (String) executeScript(script);\n   }\n \n   public void close() {\n@@ -1029,22 +1019,21 @@ public WebDriver window(String windowHandleOrName) {\n       if (getW3CStandardComplianceLevel() == 0) {\n         execute(DriverCommand.SWITCH_TO_WINDOW, ImmutableMap.of(\"name\", windowHandleOrName));\n         return RemoteWebDriver.this;\n-      } else {\n-        try {\n-          execute(DriverCommand.SWITCH_TO_WINDOW, ImmutableMap.of(\"handle\", windowHandleOrName));\n-          return RemoteWebDriver.this;\n-        } catch (NoSuchWindowException nsw) {\n-          // simulate search by name\n-          String original = getWindowHandle();\n-          for (String handle : getWindowHandles()) {\n-            switchTo().window(handle);\n-            if (windowHandleOrName.equals(executeScript(\"return window.name\"))) {\n-              return RemoteWebDriver.this; // found by name\n-            }\n+      }\n+      try {\n+        execute(DriverCommand.SWITCH_TO_WINDOW, ImmutableMap.of(\"handle\", windowHandleOrName));\n+        return RemoteWebDriver.this;\n+      } catch (NoSuchWindowException nsw) {\n+        // simulate search by name\n+        String original = getWindowHandle();\n+        for (String handle : getWindowHandles()) {\n+          switchTo().window(handle);\n+          if (windowHandleOrName.equals(executeScript(\"return window.name\"))) {\n+            return RemoteWebDriver.this; // found by name\n           }\n-          switchTo().window(original);\n-          throw nsw;\n         }\n+        switchTo().window(original);\n+        throw nsw;\n       }\n     }\n \n\ndiff --git a/java/client/src/org/openqa/selenium/remote/RemoteWebElement.java b/java/client/src/org/openqa/selenium/remote/RemoteWebElement.java\nindex 76a1c7c041..1ce7931263 100644\n--- a/java/client/src/org/openqa/selenium/remote/RemoteWebElement.java\n+++ b/java/client/src/org/openqa/selenium/remote/RemoteWebElement.java\n@@ -230,17 +230,15 @@ protected List<WebElement> findElements(String using, String value) {\n   public WebElement findElementById(String using) {\n     if (parent.getW3CStandardComplianceLevel() == 0) {\n       return findElement(\"id\", using);\n-    } else {\n-      return findElementByCssSelector(\"#\" + RemoteWebDriver.cssEscape(using));\n     }\n+    return findElementByCssSelector(\"#\" + RemoteWebDriver.cssEscape(using));\n   }\n \n   public List<WebElement> findElementsById(String using) {\n     if (parent.getW3CStandardComplianceLevel() == 0) {\n       return findElements(\"id\", using);\n-    } else {\n-      return findElementsByCssSelector(\"#\" + RemoteWebDriver.cssEscape(using));\n     }\n+    return findElementsByCssSelector(\"#\" + RemoteWebDriver.cssEscape(using));\n   }\n \n   public WebElement findElementByLinkText(String using) {\n@@ -254,33 +252,29 @@ public List<WebElement> findElementsByLinkText(String using) {\n   public WebElement findElementByName(String using) {\n     if (parent.getW3CStandardComplianceLevel() == 0) {\n       return findElement(\"name\", using);\n-    } else {\n-      return findElementByCssSelector(\"*[name='\" + using + \"']\");\n     }\n+    return findElementByCssSelector(\"*[name='\" + using + \"']\");\n   }\n \n   public List<WebElement> findElementsByName(String using) {\n     if (parent.getW3CStandardComplianceLevel() == 0) {\n       return findElements(\"name\", using);\n-    } else {\n-      return findElementsByCssSelector(\"*[name='\" + using + \"']\");\n     }\n+    return findElementsByCssSelector(\"*[name='\" + using + \"']\");\n   }\n \n   public WebElement findElementByClassName(String using) {\n     if (parent.getW3CStandardComplianceLevel() == 0) {\n       return findElement(\"class name\", using);\n-    } else {\n-      return findElementByCssSelector(\".\" + RemoteWebDriver.cssEscape(using));\n     }\n+    return findElementByCssSelector(\".\" + RemoteWebDriver.cssEscape(using));\n   }\n \n   public List<WebElement> findElementsByClassName(String using) {\n     if (parent.getW3CStandardComplianceLevel() == 0) {\n       return findElements(\"class name\", using);\n-    } else {\n-      return findElementsByCssSelector(\".\" + RemoteWebDriver.cssEscape(using));\n     }\n+    return findElementsByCssSelector(\".\" + RemoteWebDriver.cssEscape(using));\n   }\n \n   public WebElement findElementByCssSelector(String using) {\n@@ -310,17 +304,15 @@ public List<WebElement> findElementsByPartialLinkText(String using) {\n   public WebElement findElementByTagName(String using) {\n     if (parent.getW3CStandardComplianceLevel() == 0) {\n       return findElement(\"tag name\", using);\n-    } else {\n-      return findElementByCssSelector(using);\n     }\n+    return findElementByCssSelector(using);\n   }\n \n   public List<WebElement> findElementsByTagName(String using) {\n     if (parent.getW3CStandardComplianceLevel() == 0) {\n       return findElements(\"tag name\", using);\n-    } else {\n-      return findElementsByCssSelector(using);\n     }\n+    return findElementsByCssSelector(using);\n   }\n \n   protected Response execute(String command, Map<String, ?> parameters) {\n@@ -421,15 +413,12 @@ public Point inViewPort() {\n           @SuppressWarnings(\"unchecked\")\n           Map<String, Number> mapped = (Map<String, Number>) response.getValue();\n           return new Point(mapped.get(\"x\").intValue(), mapped.get(\"y\").intValue());\n-\n-        } else {\n-          @SuppressWarnings(\"unchecked\")\n-          Map<String, Number> mapped = (Map<String, Number>) parent.executeScript(\n-            \"return arguments[0].getBoundingClientRect()\", RemoteWebElement.this);\n-\n-          return new Point(mapped.get(\"x\").intValue(), mapped.get(\"y\").intValue());\n         }\n+        @SuppressWarnings(\"unchecked\")\n+        Map<String, Number> mapped = (Map<String, Number>) parent.executeScript(\n+            \"return arguments[0].getBoundingClientRect()\", RemoteWebElement.this);\n \n+        return new Point(mapped.get(\"x\").intValue(), mapped.get(\"y\").intValue());\n       }\n \n       public Point onPage() {\n\ndiff --git a/java/client/src/org/openqa/selenium/support/events/EventFiringWebDriver.java b/java/client/src/org/openqa/selenium/support/events/EventFiringWebDriver.java\nindex 18f9256c60..dda3a3605b 100644\n--- a/java/client/src/org/openqa/selenium/support/events/EventFiringWebDriver.java\n+++ b/java/client/src/org/openqa/selenium/support/events/EventFiringWebDriver.java\n@@ -153,9 +153,8 @@ public EventFiringWebDriver unregister(WebDriverEventListener eventListener) {\n   public WebDriver getWrappedDriver() {\n     if (driver instanceof WrapsDriver) {\n       return ((WrapsDriver) driver).getWrappedDriver();\n-    } else {\n-      return driver;\n     }\n+    return driver;\n   }\n \n   public void get(String url) {\n@@ -293,29 +292,26 @@ private WebElement createWebElement(WebElement from) {\n   public Keyboard getKeyboard() {\n     if (driver instanceof HasInputDevices) {\n       return new EventFiringKeyboard(driver, dispatcher);\n-    } else {\n-      throw new UnsupportedOperationException(\"Underlying driver does not implement advanced\"\n-          + \" user interactions yet.\");\n     }\n+    throw new UnsupportedOperationException(\"Underlying driver does not implement advanced\"\n+        + \" user interactions yet.\");\n   }\n \n   public Mouse getMouse() {\n     if (driver instanceof HasInputDevices) {\n       return new EventFiringMouse(driver, dispatcher);\n-    } else {\n-      throw new UnsupportedOperationException(\"Underlying driver does not implement advanced\"\n-          + \" user interactions yet.\");\n     }\n+    throw new UnsupportedOperationException(\"Underlying driver does not implement advanced\"\n+        + \" user interactions yet.\");\n   }\n \n   public TouchScreen getTouch() {\n     if (driver instanceof HasTouchScreen) {\n       return new EventFiringTouch(driver, dispatcher);\n-    } else {\n-      throw new UnsupportedOperationException(\"Underlying driver does not implement advanced\"\n-          + \" user interactions yet.\");\n     }\n-  }\n+    throw new UnsupportedOperationException(\"Underlying driver does not implement advanced\"\n+        + \" user interactions yet.\");\n+ }\n \n   private class EventFiringWebElement implements WebElement, WrapsElement, WrapsDriver, Locatable {\n \n\ndiff --git a/java/client/src/org/openqa/selenium/support/pagefactory/internal/LocatingElementHandler.java b/java/client/src/org/openqa/selenium/support/pagefactory/internal/LocatingElementHandler.java\nindex 992678f427..6950c3bcac 100644\n--- a/java/client/src/org/openqa/selenium/support/pagefactory/internal/LocatingElementHandler.java\n+++ b/java/client/src/org/openqa/selenium/support/pagefactory/internal/LocatingElementHandler.java\n@@ -40,7 +40,7 @@ public Object invoke(Object object, Method method, Object[] objects) throws Thro\n       if (\"toString\".equals(method.getName())) {\n         return \"Proxy element for: \" + locator.toString();\n       }\n-      else throw e;\n+      throw e;\n     }\n \n     if (\"getWrappedElement\".equals(method.getName())) {\n\ndiff --git a/java/client/src/org/openqa/selenium/support/ui/ExpectedConditions.java b/java/client/src/org/openqa/selenium/support/ui/ExpectedConditions.java\nindex 381dc6566c..50f419cd6c 100644\n--- a/java/client/src/org/openqa/selenium/support/ui/ExpectedConditions.java\n+++ b/java/client/src/org/openqa/selenium/support/ui/ExpectedConditions.java\n@@ -415,9 +415,8 @@ public Boolean apply(WebDriver driver) {\n           String elementText = element.getAttribute(\"value\");\n           if (elementText != null) {\n             return elementText.contains(text);\n-          } else {\n-            return false;\n           }\n+          return false;\n         } catch (StaleElementReferenceException e) {\n           return null;\n         }\n@@ -449,9 +448,8 @@ public Boolean apply(WebDriver driver) {\n           String elementText = findElement(locator, driver).getAttribute(\"value\");\n           if (elementText != null) {\n             return elementText.contains(text);\n-          } else {\n-            return false;\n           }\n+          return false;\n         } catch (StaleElementReferenceException e) {\n           return null;\n         }\n@@ -654,9 +652,8 @@ public WebElement apply(WebDriver driver) {\n         try {\n           if (element != null && element.isEnabled()) {\n             return element;\n-          } else {\n-            return null;\n           }\n+          return null;\n         } catch (StaleElementReferenceException e) {\n           return null;\n         }\n@@ -688,9 +685,8 @@ public WebElement apply(WebDriver driver) {\n         try {\n           if (element != null && element.isEnabled()) {\n             return element;\n-          } else {\n-            return null;\n           }\n+          return null;\n         } catch (StaleElementReferenceException e) {\n           return null;\n         }\n@@ -1537,9 +1533,8 @@ public Object apply(WebDriver driver) {\n         }\n         if (value instanceof String) {\n           return ((String) value).isEmpty() ? null : value;\n-        } else {\n-          return value;\n         }\n+        return value;\n       }\n \n       @Override\n\ndiff --git a/java/server/src/org/openqa/grid/internal/BaseRemoteProxy.java b/java/server/src/org/openqa/grid/internal/BaseRemoteProxy.java\nindex ac6228f05d..3235886d43 100644\n--- a/java/server/src/org/openqa/grid/internal/BaseRemoteProxy.java\n+++ b/java/server/src/org/openqa/grid/internal/BaseRemoteProxy.java\n@@ -193,9 +193,8 @@ private String getPath(DesiredCapabilities capability) {\n         default:\n           throw new GridException(\"Protocol not supported.\");\n       }\n-    } else {\n-      return type;\n     }\n+    return type;\n   }\n \n   public void setupTimeoutListener() {\n@@ -406,9 +405,8 @@ public static <T extends RemoteProxy> T getNewInstance(\n       if (proxy instanceof RemoteProxy) {\n         ((RemoteProxy) proxy).setupTimeoutListener();\n         return (T) proxy;\n-      } else {\n-        throw new InvalidParameterException(\"Error: \" + proxy.getClass() + \" isn't a remote proxy\");\n       }\n+      throw new InvalidParameterException(\"Error: \" + proxy.getClass() + \" isn't a remote proxy\");\n     } catch (InvocationTargetException e) {\n       throw new InvalidParameterException(\"Error: \" + e.getTargetException().getMessage());\n     } catch (Exception e) {\n\ndiff --git a/java/server/src/org/openqa/grid/internal/ExternalSessionKey.java b/java/server/src/org/openqa/grid/internal/ExternalSessionKey.java\nindex abf3dce382..e54895bff8 100644\n--- a/java/server/src/org/openqa/grid/internal/ExternalSessionKey.java\n+++ b/java/server/src/org/openqa/grid/internal/ExternalSessionKey.java\n@@ -119,10 +119,8 @@ public static ExternalSessionKey fromJsonResponseBody(String responseBody) {\n   public static ExternalSessionKey fromResponseBody(String responseBody) throws NewSessionException {\n     if (responseBody != null && responseBody.startsWith(\"OK,\")) {\n       return new ExternalSessionKey(responseBody.replace(\"OK,\", \"\"));\n-    }else {\n-      throw new NewSessionException(\"The server returned an error : \"+responseBody);\n     }\n-\n+    throw new NewSessionException(\"The server returned an error : \"+responseBody);\n   }\n \n   public static ExternalSessionKey fromString(String keyString){\n\ndiff --git a/java/server/src/org/openqa/grid/internal/ProxySet.java b/java/server/src/org/openqa/grid/internal/ProxySet.java\nindex b027081f2c..86396c7575 100644\n--- a/java/server/src/org/openqa/grid/internal/ProxySet.java\n+++ b/java/server/src/org/openqa/grid/internal/ProxySet.java\n@@ -172,19 +172,15 @@ public void verifyAbilityToHandleDesiredCapabilities(Map<String, Object> desired\n       if (throwOnCapabilityNotPresent) {\n         throw new GridException(\"Empty pool of VM for setup \"\n                                 + new DesiredCapabilities(desiredCapabilities));\n-      } else {\n-        log.warning(\"Empty pool of nodes.\");\n       }\n-\n+      log.warning(\"Empty pool of nodes.\");\n     }\n     if (!hasCapability(desiredCapabilities)) {\n       if (throwOnCapabilityNotPresent) {\n         throw new CapabilityNotPresentOnTheGridException(desiredCapabilities);\n-      } else {\n-        log.warning(\"grid doesn't contain \" + new DesiredCapabilities(desiredCapabilities) +\n-                    \" at the moment.\");\n       }\n-\n+      log.warning(\"grid doesn't contain \" + new DesiredCapabilities(desiredCapabilities) +\n+          \" at the moment.\");\n     }\n   }\n \n", "test_patch": "diff --git a/java/client/test/com/thoughtworks/selenium/HttpCommandProcessorUnitTest.java b/java/client/test/com/thoughtworks/selenium/HttpCommandProcessorUnitTest.java\nindex 5583ac01a7..64af5ecd6d 100644\n--- a/java/client/test/com/thoughtworks/selenium/HttpCommandProcessorUnitTest.java\n+++ b/java/client/test/com/thoughtworks/selenium/HttpCommandProcessorUnitTest.java\n@@ -143,29 +143,26 @@ protected HttpURLConnection getHttpUrlConnection(URL urlForServlet)\n         throws IOException {\n       if (throwIoeOnGetConnection) {\n         throw new IOException(\"injected exception\");\n-      } else {\n-        return super.getHttpUrlConnection(urlForServlet);\n       }\n+      return super.getHttpUrlConnection(urlForServlet);\n     }\n \n     @Override\n     protected Writer getOutputStreamWriter(HttpURLConnection conn)\n         throws IOException {\n       if (throwIoeOnGetOutputStream) {\n         throw new IOException(\"injected exception\");\n-      } else {\n-        return new StringWriter(1024);\n       }\n+      return new StringWriter(1024);\n     }\n \n     @Override\n     protected Reader getInputStreamReader(HttpURLConnection conn)\n         throws IOException {\n       if (throwIoeOnGetInputStream) {\n         throw new IOException(\"injected exception\");\n-      } else {\n-        return new StringReader(responseString);\n       }\n+      return new StringReader(responseString);\n     }\n \n     @Override\n\ndiff --git a/java/client/test/org/openqa/selenium/WaitingConditions.java b/java/client/test/org/openqa/selenium/WaitingConditions.java\nindex 2574d8071c..c03fd3ca7b 100644\n--- a/java/client/test/org/openqa/selenium/WaitingConditions.java\n+++ b/java/client/test/org/openqa/selenium/WaitingConditions.java\n@@ -196,9 +196,8 @@ public String apply(WebDriver driver) {\n         if (currentWindowHandles.size() > originalHandles.size()) {\n           currentWindowHandles.removeAll(originalHandles);\n           return currentWindowHandles.iterator().next();\n-        } else {\n-          return null;\n         }\n+        return null;\n       }\n     };\n \n\ndiff --git a/java/client/test/org/openqa/selenium/atoms/JavaScriptLoader.java b/java/client/test/org/openqa/selenium/atoms/JavaScriptLoader.java\nindex e9d3ed8cc3..31194bc8f3 100644\n--- a/java/client/test/org/openqa/selenium/atoms/JavaScriptLoader.java\n+++ b/java/client/test/org/openqa/selenium/atoms/JavaScriptLoader.java\n@@ -38,13 +38,12 @@ static String loadResource(String resourcePath, String resourceTask) throws IOEx\n     URL resourceUrl = JavaScriptLoader.class.getResource(resourcePath);\n     if (resourceUrl != null) {\n       return Resources.toString(resourceUrl, Charsets.UTF_8);\n-    } else {\n-      new Build().of(resourceTask).go();\n-\n-      File topDir = InProject.locate(\"Rakefile\").getParentFile();\n-      File builtFile = new File(topDir, taskToBuildOutput(resourceTask));\n-      return Files.toString(builtFile, Charsets.UTF_8);\n     }\n+    new Build().of(resourceTask).go();\n+\n+    File topDir = InProject.locate(\"Rakefile\").getParentFile();\n+    File builtFile = new File(topDir, taskToBuildOutput(resourceTask));\n+    return Files.toString(builtFile, Charsets.UTF_8);\n   }\n \n   static String taskToBuildOutput(String taskName) {\n\ndiff --git a/java/client/test/org/openqa/selenium/testing/drivers/TestIgnorance.java b/java/client/test/org/openqa/selenium/testing/drivers/TestIgnorance.java\nindex ef7d515fd0..41941559a0 100644\n--- a/java/client/test/org/openqa/selenium/testing/drivers/TestIgnorance.java\n+++ b/java/client/test/org/openqa/selenium/testing/drivers/TestIgnorance.java\n@@ -150,9 +150,8 @@ private boolean isIgnoredDueToBeingOnSauce(Description method) {\n                       || method.getTestClass().getAnnotation(NeedsLocalEnvironment.class) != null;\n     if (SauceDriver.shouldUseSauce()) {\n       return isLocal;\n-    } else {\n-      return Boolean.getBoolean(\"local_only\") && !isLocal;\n     }\n+    return Boolean.getBoolean(\"local_only\") && !isLocal;\n   }\n \n   private boolean isIgnoredDueToJavascript(JavascriptEnabled enabled) {\n\ndiff --git a/java/server/src/org/openqa/grid/internal/ActiveTestSessions.java b/java/server/src/org/openqa/grid/internal/ActiveTestSessions.java\nindex 88f629a18a..2ba486108e 100644\n--- a/java/server/src/org/openqa/grid/internal/ActiveTestSessions.java\n+++ b/java/server/src/org/openqa/grid/internal/ActiveTestSessions.java\n@@ -103,12 +103,11 @@ public TestSession getExistingSession(ExternalSessionKey externalkey) {\n           String msg = \"Session [\" + keyId + \"] was terminated due to \" + sessionTerminationReason;\n           log.fine(msg);\n           throw new GridException(msg);\n-      } else {\n-          String msg = \"Session [\" + keyId + \"] not available and is not among the last 1000 terminated sessions.\\n\"\n-                  + \"Active sessions are\" + this.unmodifiableSet();\n-          log.fine(msg);\n-          throw new GridException(msg);\n       }\n+      String msg = \"Session [\" + keyId + \"] not available and is not among the last 1000 terminated sessions.\\n\"\n+          + \"Active sessions are\" + this.unmodifiableSet();\n+      log.fine(msg);\n+      throw new GridException(msg);\n     }\n     return sessionByExternalKey;\n   }\n\ndiff --git a/java/server/src/org/openqa/grid/internal/TestSession.java b/java/server/src/org/openqa/grid/internal/TestSession.java\nindex 961383fd49..c9dd16ef8e 100644\n--- a/java/server/src/org/openqa/grid/internal/TestSession.java\n+++ b/java/server/src/org/openqa/grid/internal/TestSession.java\n@@ -140,10 +140,8 @@ public void setExternalKey(ExternalSessionKey externalKey) {\n   public long getInactivityTime() {\n     if (ignoreTimeout) {\n       return 0;\n-    } else {\n-      return timeSource.currentTimeInMillis() - lastActivity;\n     }\n-\n+    return timeSource.currentTimeInMillis() - lastActivity;\n   }\n \n   public boolean isOrphaned() {\n@@ -330,11 +328,10 @@ private byte[] updateHubIfNewWebDriverSession(\n           }\n           setExternalKey(key);\n           return consumedData;\n-        } else {\n-          throw new GridException(\n-              \"new session request for webdriver should contain a location header \"\n-              + \"or an 'application/json;charset=UTF-8' response body with the session ID.\");\n         }\n+        throw new GridException(\n+            \"new session request for webdriver should contain a location header \"\n+            + \"or an 'application/json;charset=UTF-8' response body with the session ID.\");\n       }\n       ExternalSessionKey key = ExternalSessionKey.fromWebDriverRequest(h.getValue());\n       setExternalKey(key);\n\ndiff --git a/java/server/src/org/openqa/grid/internal/TestSlot.java b/java/server/src/org/openqa/grid/internal/TestSlot.java\nindex ace2b2b6d0..a1183f4b27 100644\n--- a/java/server/src/org/openqa/grid/internal/TestSlot.java\n+++ b/java/server/src/org/openqa/grid/internal/TestSlot.java\n@@ -106,17 +106,15 @@ public TestSession getNewSession(Map<String, Object> desiredCapabilities) {\n       lock.lock();\n       if (currentSession != null) {\n         return null;\n-      } else {\n-        if (matches(desiredCapabilities)) {\n-          log.info(\"Trying to create a new session on test slot \" + this.capabilities);\n-          TestSession session = new TestSession(this, desiredCapabilities, new DefaultTimeSource());\n-          currentSession = session;\n-          lastSessionStart = System.currentTimeMillis();\n-          return session;\n-        } else {\n-          return null;\n-        }\n       }\n+      if (matches(desiredCapabilities)) {\n+        log.info(\"Trying to create a new session on test slot \" + this.capabilities);\n+        TestSession session = new TestSession(this, desiredCapabilities, new DefaultTimeSource());\n+        currentSession = session;\n+        lastSessionStart = System.currentTimeMillis();\n+        return session;\n+      }\n+      return null;\n     } finally {\n       lock.unlock();\n     }\n@@ -182,10 +180,9 @@ boolean startReleaseProcess() {\n       lock.lock();\n       if (beingReleased) {\n         return false;\n-      } else {\n-        beingReleased = true;\n-        return true;\n       }\n+      beingReleased = true;\n+      return true;\n     } finally {\n       lock.unlock();\n     }\n", "instance_id": "seleniumhq__selenium-2142", "fixed_tests": {}, "failed_tests": [], "skipped_tests": [], "run_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "test_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "fix_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "f2p_tests": {}, "p2p_tests": {}, "s2p_tests": {}, "n2p_tests": {}}
{"org": "seleniumhq", "repo": "selenium", "number": 2143, "title": "Space before curly bracket", "body": "Space before curly bracket\n", "state": "closed", "base": {"label": "SeleniumHQ:master", "ref": "master", "sha": "a1b0fbd60337117a1d3d36f22cc633fc670fbfd8"}, "resolved_issues": [], "fix_patch": "diff --git a/java/client/src/com/thoughtworks/selenium/webdriven/commands/AlertOverride.java b/java/client/src/com/thoughtworks/selenium/webdriven/commands/AlertOverride.java\nindex c6a7088651..10d1cab119 100644\n--- a/java/client/src/com/thoughtworks/selenium/webdriven/commands/AlertOverride.java\n+++ b/java/client/src/com/thoughtworks/selenium/webdriven/commands/AlertOverride.java\n@@ -77,7 +77,7 @@ public void replaceAlertMethod(WebDriver driver) {\n       );\n   }\n \n-  private void checkOverridesEnabled(){\n+  private void checkOverridesEnabled() {\n     checkState(enableOverrides,\n           \"Selenium alert overrides have been disabled; please use the underlying WebDriver API\");\n   }\n\ndiff --git a/java/client/src/org/openqa/selenium/firefox/FirefoxProfile.java b/java/client/src/org/openqa/selenium/firefox/FirefoxProfile.java\nindex 34bb8a3cc7..d3c16037e2 100644\n--- a/java/client/src/org/openqa/selenium/firefox/FirefoxProfile.java\n+++ b/java/client/src/org/openqa/selenium/firefox/FirefoxProfile.java\n@@ -148,23 +148,23 @@ private boolean getBooleanPreference(Preferences prefs, String key, boolean defa\n \n   public String getStringPreference(String key, String defaultValue) {\n     Object preference = additionalPrefs.getPreference(key);\n-    if(preference != null && preference instanceof String){\n+    if(preference != null && preference instanceof String) {\n       return (String) preference;\n     }\n     return defaultValue;\n   }\n \n   public int getIntegerPreference(String key, int defaultValue) {\n     Object preference = additionalPrefs.getPreference(key);\n-    if(preference != null && preference instanceof Integer){\n+    if(preference != null && preference instanceof Integer) {\n       return (Integer) preference;\n     }\n     return defaultValue;\n   }\n \n   public boolean getBooleanPreference(String key, boolean defaultValue) {\n     Object preference = additionalPrefs.getPreference(key);\n-    if(preference != null && preference instanceof Boolean){\n+    if(preference != null && preference instanceof Boolean) {\n       return (Boolean) preference;\n     }\n     return defaultValue;\n\ndiff --git a/java/client/src/org/openqa/selenium/internal/SocketLock.java b/java/client/src/org/openqa/selenium/internal/SocketLock.java\nindex 4c2c27195a..26fe3f9859 100644\n--- a/java/client/src/org/openqa/selenium/internal/SocketLock.java\n+++ b/java/client/src/org/openqa/selenium/internal/SocketLock.java\n@@ -135,7 +135,7 @@ private boolean isLockFree(InetSocketAddress address) throws IOException {\n    * Gets the port number that is being-locked.\n    * @return port locked\n    */\n-  public int getLockPort(){\n+  public int getLockPort() {\n     return this.address.getPort();\n   }\n }\n\ndiff --git a/java/client/src/org/openqa/selenium/net/PortProber.java b/java/client/src/org/openqa/selenium/net/PortProber.java\nindex 0b97d312cd..c48081f3d3 100644\n--- a/java/client/src/org/openqa/selenium/net/PortProber.java\n+++ b/java/client/src/org/openqa/selenium/net/PortProber.java\n@@ -42,7 +42,7 @@ public class PortProber {\n \n     if (current.is(Platform.LINUX)) {\n        ephemeralRangeDetector = LinuxEphemeralPortRangeDetector.getInstance();\n-     } else if (current.is(Platform.XP)){\n+     } else if (current.is(Platform.XP)) {\n        ephemeralRangeDetector = new OlderWindowsVersionEphemeralPortDetector();\n     } else {\n        ephemeralRangeDetector = new FixedIANAPortRange();\n\ndiff --git a/java/client/src/org/openqa/selenium/remote/RemoteWebDriver.java b/java/client/src/org/openqa/selenium/remote/RemoteWebDriver.java\nindex 745c1b0844..fd082a93ff 100644\n--- a/java/client/src/org/openqa/selenium/remote/RemoteWebDriver.java\n+++ b/java/client/src/org/openqa/selenium/remote/RemoteWebDriver.java\n@@ -667,7 +667,7 @@ protected Response execute(String driverCommand, Map<String, ?> parameters) {\n       // {\"ELEMENT\": id} to RemoteWebElements.\n       Object value = converter.apply(response.getValue());\n       response.setValue(value);\n-    } catch (SessionNotFoundException e){\n+    } catch (SessionNotFoundException e) {\n       throw e;\n     } catch (Exception e) {\n       log(sessionId, command.getName(), command, When.EXCEPTION);\n\ndiff --git a/java/client/src/org/openqa/selenium/support/events/EventFiringWebDriver.java b/java/client/src/org/openqa/selenium/support/events/EventFiringWebDriver.java\nindex 18f9256c60..9af78ed198 100644\n--- a/java/client/src/org/openqa/selenium/support/events/EventFiringWebDriver.java\n+++ b/java/client/src/org/openqa/selenium/support/events/EventFiringWebDriver.java\n@@ -80,7 +80,7 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl\n                 method.invoke(eventListener, args);\n               }\n               return null;\n-              } catch (InvocationTargetException e){\n+              } catch (InvocationTargetException e) {\n                 throw e.getTargetException();\n               }\n             }\n\ndiff --git a/java/client/src/org/openqa/selenium/support/pagefactory/DefaultElementLocator.java b/java/client/src/org/openqa/selenium/support/pagefactory/DefaultElementLocator.java\nindex cf460688e2..b05d9d7d59 100644\n--- a/java/client/src/org/openqa/selenium/support/pagefactory/DefaultElementLocator.java\n+++ b/java/client/src/org/openqa/selenium/support/pagefactory/DefaultElementLocator.java\n@@ -91,7 +91,7 @@ public List<WebElement> findElements() {\n   }\n \n   @Override\n-  public String toString(){\n+  public String toString() {\n     return this.getClass().getSimpleName() + \" '\" + by + \"'\";\n   }\n }\n\ndiff --git a/java/server/src/org/openqa/grid/common/SeleniumProtocol.java b/java/server/src/org/openqa/grid/common/SeleniumProtocol.java\nindex da9928150b..dbb8db5646 100644\n--- a/java/server/src/org/openqa/grid/common/SeleniumProtocol.java\n+++ b/java/server/src/org/openqa/grid/common/SeleniumProtocol.java\n@@ -20,7 +20,7 @@\n public enum SeleniumProtocol {\n   Selenium, WebDriver;\n \n-  public boolean isSelenium(){\n+  public boolean isSelenium() {\n     return Selenium.equals(this);\n   }\n }\n\ndiff --git a/java/server/src/org/openqa/grid/internal/BaseRemoteProxy.java b/java/server/src/org/openqa/grid/internal/BaseRemoteProxy.java\nindex ac6228f05d..f99017007f 100644\n--- a/java/server/src/org/openqa/grid/internal/BaseRemoteProxy.java\n+++ b/java/server/src/org/openqa/grid/internal/BaseRemoteProxy.java\n@@ -293,7 +293,7 @@ private void cleanUpSlot(TestSlot slot) {\n                     + \" has TIMED OUT due to client inactivity and will be released.\");\n             try {\n               ((TimeoutListener) proxy).beforeRelease(session);\n-            } catch(IllegalStateException ignore){\n+            } catch(IllegalStateException ignore) {\n               log.log(Level.WARNING, ignore.getMessage());\n             }\n             registry.terminate(session, SessionTerminationReason.TIMEOUT);\n@@ -305,7 +305,7 @@ private void cleanUpSlot(TestSlot slot) {\n               \"session \" + session + \" has been ORPHANED and will be released\");\n           try {\n             ((TimeoutListener) proxy).beforeRelease(session);\n-          } catch(IllegalStateException ignore){\n+          } catch(IllegalStateException ignore) {\n             log.log(Level.WARNING, ignore.getMessage());\n           }\n           registry.terminate(session, SessionTerminationReason.ORPHAN);\n\ndiff --git a/java/server/src/org/openqa/grid/internal/DefaultTimeSource.java b/java/server/src/org/openqa/grid/internal/DefaultTimeSource.java\nindex 0c99d7ad8a..c1332239f9 100644\n--- a/java/server/src/org/openqa/grid/internal/DefaultTimeSource.java\n+++ b/java/server/src/org/openqa/grid/internal/DefaultTimeSource.java\n@@ -21,7 +21,7 @@\n  * Provides access to System time.\n  */\n public class DefaultTimeSource implements TimeSource {\n-  public long currentTimeInMillis(){\n+  public long currentTimeInMillis() {\n     return System.currentTimeMillis();\n   }\n }\n\ndiff --git a/java/server/src/org/openqa/grid/internal/ExternalSessionKey.java b/java/server/src/org/openqa/grid/internal/ExternalSessionKey.java\nindex abf3dce382..5f478e8903 100644\n--- a/java/server/src/org/openqa/grid/internal/ExternalSessionKey.java\n+++ b/java/server/src/org/openqa/grid/internal/ExternalSessionKey.java\n@@ -60,7 +60,7 @@ public int hashCode() {\n     return key.hashCode();\n   }\n \n-  public static ExternalSessionKey fromSe1Request(String piece){\n+  public static ExternalSessionKey fromSe1Request(String piece) {\n     if (piece.startsWith(\"sessionId=\")) {\n       return new ExternalSessionKey(piece.replace(\"sessionId=\", \"\"));\n     }\n@@ -73,7 +73,7 @@ public static ExternalSessionKey fromSe1Request(String piece){\n    * @param path The path to the session\n    * @return the ExternalSessionKey provided by the remote., or null if the url didn't contain a session id\n    */\n-  public static ExternalSessionKey fromWebDriverRequest(String path){\n+  public static ExternalSessionKey fromWebDriverRequest(String path) {\n       int sessionIndex = path.indexOf(\"/session/\");\n       if (sessionIndex != -1) {\n         sessionIndex += \"/session/\".length();\n@@ -125,11 +125,11 @@ public static ExternalSessionKey fromResponseBody(String responseBody) throws Ne\n \n   }\n \n-  public static ExternalSessionKey fromString(String keyString){\n+  public static ExternalSessionKey fromString(String keyString) {\n     return new ExternalSessionKey(keyString);\n   }\n \n-  public static ExternalSessionKey fromJSON(String keyString){\n+  public static ExternalSessionKey fromJSON(String keyString) {\n     return new ExternalSessionKey(keyString);\n   }\n \n\ndiff --git a/java/server/src/org/openqa/grid/internal/NewSessionRequestQueue.java b/java/server/src/org/openqa/grid/internal/NewSessionRequestQueue.java\nindex feb4d28003..623569f53c 100644\n--- a/java/server/src/org/openqa/grid/internal/NewSessionRequestQueue.java\n+++ b/java/server/src/org/openqa/grid/internal/NewSessionRequestQueue.java\n@@ -121,7 +121,7 @@ public synchronized int getNewSessionRequestCount() {\n     return newSessionRequests.size();\n   }\n \n-  public synchronized void stop(){\n+  public synchronized void stop() {\n     for (RequestHandler newSessionRequest : newSessionRequests) {\n       newSessionRequest.stop();\n     }\n\ndiff --git a/java/server/src/org/openqa/grid/internal/utils/SelfRegisteringRemote.java b/java/server/src/org/openqa/grid/internal/utils/SelfRegisteringRemote.java\nindex e10434bd81..12a9ba6627 100644\n--- a/java/server/src/org/openqa/grid/internal/utils/SelfRegisteringRemote.java\n+++ b/java/server/src/org/openqa/grid/internal/utils/SelfRegisteringRemote.java\n@@ -61,7 +61,7 @@ public SelfRegisteringRemote(RegistrationRequest config) {\n \n     try {\n       GridHubConfiguration hubConfiguration = getHubConfiguration();\n-      if (hubConfiguration.timeout != null){\n+      if (hubConfiguration.timeout != null) {\n         nodeConfig.getConfiguration().timeout = hubConfiguration.timeout;\n       }\n       if (hubConfiguration.browserTimeout != null) {\n\ndiff --git a/java/server/src/org/openqa/grid/web/Hub.java b/java/server/src/org/openqa/grid/web/Hub.java\nindex f0a6968844..e4cc95620f 100644\n--- a/java/server/src/org/openqa/grid/web/Hub.java\n+++ b/java/server/src/org/openqa/grid/web/Hub.java\n@@ -105,7 +105,7 @@ public Hub(GridHubConfiguration gridHubConfiguration) {\n \n   private void initServer() {\n     try {\n-      if (config.jettyMaxThreads>0){\n+      if (config.jettyMaxThreads>0) {\n         QueuedThreadPool pool = new QueuedThreadPool();\n         pool.setMaxThreads(config.jettyMaxThreads);\n         server = new Server(pool);\n\ndiff --git a/java/server/src/org/openqa/grid/web/servlet/HubStatusServlet.java b/java/server/src/org/openqa/grid/web/servlet/HubStatusServlet.java\nindex 72d608b325..b59a9b59c6 100644\n--- a/java/server/src/org/openqa/grid/web/servlet/HubStatusServlet.java\n+++ b/java/server/src/org/openqa/grid/web/servlet/HubStatusServlet.java\n@@ -107,7 +107,7 @@ private JsonObject getResponse(HttpServletRequest request) throws IOException {\n \n         Registry registry = getRegistry();\n         JsonElement config = registry.getConfiguration().toJson();\n-        for (Map.Entry<String, JsonElement> entry : config.getAsJsonObject().entrySet()){\n+        for (Map.Entry<String, JsonElement> entry : config.getAsJsonObject().entrySet()) {\n           if (keysToReturn == null || keysToReturn.isEmpty() || keysToReturn.contains(entry.getKey())) {\n             res.add(entry.getKey(), entry.getValue());\n           }\n\ndiff --git a/java/server/src/org/openqa/grid/web/servlet/handler/RequestHandler.java b/java/server/src/org/openqa/grid/web/servlet/handler/RequestHandler.java\nindex 681390e2ec..a1f33d36d4 100644\n--- a/java/server/src/org/openqa/grid/web/servlet/handler/RequestHandler.java\n+++ b/java/server/src/org/openqa/grid/web/servlet/handler/RequestHandler.java\n@@ -131,7 +131,7 @@ public void process() {\n         } catch (ClientGoneException e) {\n           log.log(Level.WARNING, \"The client is gone for session \" + session + \", terminating\");\n           registry.terminate(session, SessionTerminationReason.CLIENT_GONE);\n-        } catch (SocketTimeoutException e){\n+        } catch (SocketTimeoutException e) {\n           log.log(Level.SEVERE, \"Socket timed out for session \" + session + \", \" + e.getMessage());\n           registry.terminate(session, SessionTerminationReason.SO_TIMEOUT);\n         } catch (Throwable t) {\n\ndiff --git a/java/server/src/org/openqa/grid/web/servlet/handler/SeleniumBasedRequest.java b/java/server/src/org/openqa/grid/web/servlet/handler/SeleniumBasedRequest.java\nindex 74580a681a..b56e271053 100644\n--- a/java/server/src/org/openqa/grid/web/servlet/handler/SeleniumBasedRequest.java\n+++ b/java/server/src/org/openqa/grid/web/servlet/handler/SeleniumBasedRequest.java\n@@ -151,7 +151,7 @@ public BufferedReader getReader() throws IOException {\n \n   @Override\n   public int getContentLength() {\n-    if (body == null){\n+    if (body == null) {\n       return 0;\n     }else {\n       return body.length;\n@@ -179,7 +179,7 @@ public void setBody(byte[] content) {\n     setAttribute(\"Content-Length\", content.length);\n   }\n \n-  public long getCreationTime(){\n+  public long getCreationTime() {\n     return timestamp;\n   }\n \n\ndiff --git a/java/server/src/org/openqa/grid/web/servlet/handler/SeleniumBasedResponse.java b/java/server/src/org/openqa/grid/web/servlet/handler/SeleniumBasedResponse.java\nindex 5d00dc47b8..064103389a 100644\n--- a/java/server/src/org/openqa/grid/web/servlet/handler/SeleniumBasedResponse.java\n+++ b/java/server/src/org/openqa/grid/web/servlet/handler/SeleniumBasedResponse.java\n@@ -37,7 +37,7 @@ public SeleniumBasedResponse(HttpServletResponse response) {\n   }\n \n   public String getForwardedContent() {\n-    if (forwardedContent == null){\n+    if (forwardedContent == null) {\n       return null;\n     }\n     Charset charset = Charset.forName(encoding);\n\ndiff --git a/java/server/src/org/openqa/selenium/remote/server/DefaultSession.java b/java/server/src/org/openqa/selenium/remote/server/DefaultSession.java\nindex 90ca72458a..2167d323d5 100644\n--- a/java/server/src/org/openqa/selenium/remote/server/DefaultSession.java\n+++ b/java/server/src/org/openqa/selenium/remote/server/DefaultSession.java\n@@ -165,7 +165,7 @@ public void close() {\n \n \n   public <X> X execute(final FutureTask<X> future) throws Exception {\n-/*    if (executor.isShutdown()){\n+/*    if (executor.isShutdown()) {\n          throw new WebDriverException(sessionId + \" is closed for further execution\");\n     } */\n     executor.execute(new Runnable() {\n\ndiff --git a/java/server/src/org/openqa/selenium/remote/server/KnownElements.java b/java/server/src/org/openqa/selenium/remote/server/KnownElements.java\nindex 0a07e80b9e..2ad8736118 100644\n--- a/java/server/src/org/openqa/selenium/remote/server/KnownElements.java\n+++ b/java/server/src/org/openqa/selenium/remote/server/KnownElements.java\n@@ -62,7 +62,7 @@ public Object invoke(Object object, Method method, Object[] objects) throws Thro\n         } else {\n           try {\n           return method.invoke(element, objects);\n-          } catch (InvocationTargetException e){\n+          } catch (InvocationTargetException e) {\n             throw e.getTargetException();\n           }\n         }\n\ndiff --git a/java/server/src/org/openqa/selenium/remote/server/SessionCleaner.java b/java/server/src/org/openqa/selenium/remote/server/SessionCleaner.java\nindex eb64bf71e8..31156f29f7 100644\n--- a/java/server/src/org/openqa/selenium/remote/server/SessionCleaner.java\n+++ b/java/server/src/org/openqa/selenium/remote/server/SessionCleaner.java\n@@ -49,10 +49,10 @@ class SessionCleaner extends Thread {   // Thread safety reviewed\n     this.clientGoneTimeout = clientGoneTimeout;\n     this.insideBrowserTimeout = insideBrowserTimeout;\n     this.driverSessions = driverSessions;\n-    if (clientGoneTimeout == 0 && insideBrowserTimeout == 0){\n+    if (clientGoneTimeout == 0 && insideBrowserTimeout == 0) {\n       throw new IllegalStateException(\"SessionCleaner not supposed to start when no timeouts specified\");\n     }\n-    if (insideBrowserTimeout > 0 && insideBrowserTimeout < 60000){\n+    if (insideBrowserTimeout > 0 && insideBrowserTimeout < 60000) {\n       log.warning(\"The specified browser timeout is TOO LOW for safe operations and may have \" +\n                   \"other side-effects\\n. Please specify a slightly higher browserTimeout.\");\n     }\n@@ -95,7 +95,7 @@ void checkExpiry() {\n         }\n         if (inUse && session.isTimedOut(insideBrowserTimeout)) {\n           WebDriver driver = session.getDriver();\n-          if (driver instanceof EventFiringWebDriver){\n+          if (driver instanceof EventFiringWebDriver) {\n             driver = ((EventFiringWebDriver)driver).getWrappedDriver();\n           }\n           if (driver instanceof Killable) {\n\ndiff --git a/java/server/src/org/openqa/selenium/remote/server/rest/ResultConfig.java b/java/server/src/org/openqa/selenium/remote/server/rest/ResultConfig.java\nindex ee770b9379..43ec3bb0d3 100644\n--- a/java/server/src/org/openqa/selenium/remote/server/rest/ResultConfig.java\n+++ b/java/server/src/org/openqa/selenium/remote/server/rest/ResultConfig.java\n@@ -156,7 +156,7 @@ private void throwUpIfSessionTerminated(SessionId sessId) throws SessionNotFound\n     if (sessId == null) return;\n     Session session = sessions.get(sessId);\n     final boolean isTerminated = session == null;\n-    if (isTerminated){\n+    if (isTerminated) {\n       throw new SessionNotFoundException();\n     }\n   }\n", "test_patch": "diff --git a/java/client/test/org/openqa/selenium/environment/webserver/SleepingServlet.java b/java/client/test/org/openqa/selenium/environment/webserver/SleepingServlet.java\nindex 4f1de85857..72c9582d79 100644\n--- a/java/client/test/org/openqa/selenium/environment/webserver/SleepingServlet.java\n+++ b/java/client/test/org/openqa/selenium/environment/webserver/SleepingServlet.java\n@@ -48,11 +48,11 @@ protected void doGet(HttpServletRequest request, HttpServletResponse response)\n         String.format(RESPONSE_STRING_FORMAT, duration));\n   }\n \n-  private void reallySleep(long timeout){\n+  private void reallySleep(long timeout) {\n       long start = System.currentTimeMillis();\n       try {\n-          Thread.sleep( timeout);\n-          while ( (System.currentTimeMillis() - start) < timeout){\n+          Thread.sleep(timeout);\n+          while ( (System.currentTimeMillis() - start) < timeout) {\n               Thread.sleep( 20);\n           }\n       } catch (InterruptedException ignore) {\n\ndiff --git a/java/client/test/org/openqa/selenium/net/LinuxEphemeralPortRangeDetectorTest.java b/java/client/test/org/openqa/selenium/net/LinuxEphemeralPortRangeDetectorTest.java\nindex 8b78d710f1..40174bb1f3 100644\n--- a/java/client/test/org/openqa/selenium/net/LinuxEphemeralPortRangeDetectorTest.java\n+++ b/java/client/test/org/openqa/selenium/net/LinuxEphemeralPortRangeDetectorTest.java\n@@ -48,7 +48,7 @@ public void decodeEphemeralPorts() throws Exception {\n   }\n \n   @Test\n-  public void currentValues(){\n+  public void currentValues() {\n     LinuxEphemeralPortRangeDetector detector = LinuxEphemeralPortRangeDetector.getInstance();\n     assertTrue( detector.getLowestEphemeralPort() > 1024);\n     assertTrue( detector.getHighestEphemeralPort() < 65536);\n\ndiff --git a/java/server/src/org/openqa/grid/internal/TestSession.java b/java/server/src/org/openqa/grid/internal/TestSession.java\nindex 961383fd49..b1261d129c 100644\n--- a/java/server/src/org/openqa/grid/internal/TestSession.java\n+++ b/java/server/src/org/openqa/grid/internal/TestSession.java\n@@ -196,7 +196,7 @@ public String toString() {\n   private HttpClient getClient() {\n     Registry reg = slot.getProxy().getRegistry();\n     int browserTimeout = reg.getConfiguration().browserTimeout;\n-    if (browserTimeout > 0){\n+    if (browserTimeout > 0) {\n       final int selenium_server_cleanup_cycle = browserTimeout / 10;\n       browserTimeout += (selenium_server_cleanup_cycle + MAX_NETWORK_LATENCY);\n       browserTimeout *=2; // Lets not let this happen too often\n\ndiff --git a/java/server/test/org/openqa/grid/e2e/node/BrowserTimeOutTest.java b/java/server/test/org/openqa/grid/e2e/node/BrowserTimeOutTest.java\nindex 080b9f99b0..150cd2042b 100644\n--- a/java/server/test/org/openqa/grid/e2e/node/BrowserTimeOutTest.java\n+++ b/java/server/test/org/openqa/grid/e2e/node/BrowserTimeOutTest.java\n@@ -76,7 +76,7 @@ public void testWebDriverTimesOut() throws InterruptedException, MalformedURLExc\n \n     try {\n       driver.get(url);\n-    } catch(WebDriverException ignore){\n+    } catch(WebDriverException ignore) {\n     } finally {\n       RegistryTestHelper.waitForActiveTestSessionCount(hub.getRegistry(), 0);\n     }\n\ndiff --git a/java/server/test/org/openqa/grid/internal/ActiveTestSessionsTest.java b/java/server/test/org/openqa/grid/internal/ActiveTestSessionsTest.java\nindex 2eff2ac908..225714f277 100644\n--- a/java/server/test/org/openqa/grid/internal/ActiveTestSessionsTest.java\n+++ b/java/server/test/org/openqa/grid/internal/ActiveTestSessionsTest.java\n@@ -81,7 +81,7 @@ public void testGetTerminatedSession() throws Exception {\n     try {\n       activeTestSessions.getExistingSession(testSession.getExternalKey());\n       fail(\"should have thrown a session has been orphaned.\");\n-    }  catch (GridException e){\n+    }  catch (GridException e) {\n       assertTrue(e.getMessage().contains(SessionTerminationReason.ORPHAN.toString()));\n     }\n \n\ndiff --git a/java/server/test/org/openqa/grid/internal/LoadBalancedTests.java b/java/server/test/org/openqa/grid/internal/LoadBalancedTests.java\nindex 94916117f6..206992f1f7 100644\n--- a/java/server/test/org/openqa/grid/internal/LoadBalancedTests.java\n+++ b/java/server/test/org/openqa/grid/internal/LoadBalancedTests.java\n@@ -151,7 +151,7 @@ public void newSessionSpreadOnAllProxiesAccordingToTheResource() {\n \n \n     //release and check the resource are freed.\n-    for (TestSession session : sessions){\n+    for (TestSession session : sessions) {\n       registry.terminateSynchronousFOR_TEST_ONLY(session);\n     }\n     assertEquals(50, proxy1.getResourceUsageInPercent(), 0f);\n\ndiff --git a/java/server/test/org/openqa/grid/internal/ProxySetTest.java b/java/server/test/org/openqa/grid/internal/ProxySetTest.java\nindex 59491c98fa..ec49ee56c7 100644\n--- a/java/server/test/org/openqa/grid/internal/ProxySetTest.java\n+++ b/java/server/test/org/openqa/grid/internal/ProxySetTest.java\n@@ -94,7 +94,7 @@ public void testProxySortingByIdle() throws Exception {\n \n   }\n \n-  public StubbedRemoteProxy buildStubbedRemoteProxy(Registry registry, int totalUsed){\n+  public StubbedRemoteProxy buildStubbedRemoteProxy(Registry registry, int totalUsed) {\n     GridNodeConfiguration config = new GridNodeConfiguration();\n     config.host = \"remote_host\";\n     config.port = totalUsed;\n@@ -123,7 +123,7 @@ public StubbedRemoteProxy(RegistrationRequest request,\n     }\n \n \n-    public void setTotalUsed(int count){\n+    public void setTotalUsed(int count) {\n       this.testsRunning = count;\n     }\n \n\ndiff --git a/java/server/test/org/openqa/grid/internal/TestThreadCounter.java b/java/server/test/org/openqa/grid/internal/TestThreadCounter.java\nindex d7127eba61..3f018cf984 100644\n--- a/java/server/test/org/openqa/grid/internal/TestThreadCounter.java\n+++ b/java/server/test/org/openqa/grid/internal/TestThreadCounter.java\n@@ -59,7 +59,7 @@ public void run() {\n \n   public void waitUntilDone(int done) {\n     int i = 0;\n-    while (done != completed.get() && i++ < 20){\n+    while (done != completed.get() && i++ < 20) {\n       if (i > 20) throw new RuntimeException(\"Time out waiting for completion\");\n       try {\n         Thread.sleep(50);\n@@ -72,7 +72,7 @@ public void waitUntilDone(int done) {\n \n   public void waitUntilStarted(int num) {\n     int i = 0;\n-    while (num != started.get() && i++ < 20){\n+    while (num != started.get() && i++ < 20) {\n       if (i > 20) throw new RuntimeException(\"Time out waiting for completion\");\n       try {\n         Thread.sleep(50);\n", "instance_id": "seleniumhq__selenium-2143", "fixed_tests": {}, "failed_tests": [], "skipped_tests": [], "run_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "test_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "fix_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "f2p_tests": {}, "p2p_tests": {}, "s2p_tests": {}, "n2p_tests": {}}
{"org": "seleniumhq", "repo": "selenium", "number": 2185, "title": "[js] Fix timeouts' url", "body": "## Steps to reproduce\n1. Follow steps in this branch https://github.com/JohanLorenzo/geckodriver-bugs/tree/cant-set-timeout\n## Results\n\n```\n  1) timeouts \"before all\" hook:\n     Uncaught UnknownCommandError: POST /session/68afbb72-991b-49ed-b09b-7d4767978232/timeouts/async_script did not match a known command\n```\n\nGeckoDriver (wires) is more strict about the URLs that you provide to it. They should comply with http://w3c.github.io/webdriver/webdriver-spec.html\\#set-timeout . In this case we should not have `/timeouts/async_script`, but only `/timeouts`. \n\nr? @jleyba \n- [ X ] By placing an `X` in the preceding checkbox, I verify that I have signed the [Contributor License Agreement](https://github.com/SeleniumHQ/selenium/blob/master/CONTRIBUTING.md#step-6-sign-the-cla)\n", "state": "closed", "base": {"label": "SeleniumHQ:master", "ref": "master", "sha": "3f8481bfe3bf8724ce33240da8e2b81bbf9fdc0d"}, "resolved_issues": [], "fix_patch": "diff --git a/javascript/node/selenium-webdriver/CHANGES.md b/javascript/node/selenium-webdriver/CHANGES.md\nindex 8b50a20fba..dc8c5ee3b3 100644\n--- a/javascript/node/selenium-webdriver/CHANGES.md\n+++ b/javascript/node/selenium-webdriver/CHANGES.md\n@@ -6,6 +6,7 @@\n    `until.urlMatches()`\n * Added work around for [GeckoDriver bug](https://bugzilla.mozilla.org/show_bug.cgi?id=1274924) raising a type conversion error\n * Removed the mandatory use of Firefox Dev Edition, when using Marionette driver\n+* Fixed timeouts' URL\n \n ## v2.53.2\n \n\ndiff --git a/javascript/node/selenium-webdriver/lib/http.js b/javascript/node/selenium-webdriver/lib/http.js\nindex 0b36b0addb..9391d949a8 100644\n--- a/javascript/node/selenium-webdriver/lib/http.js\n+++ b/javascript/node/selenium-webdriver/lib/http.js\n@@ -168,8 +168,6 @@ const COMMAND_MAP = new Map([\n     [cmd.Name.EXECUTE_ASYNC_SCRIPT, post('/session/:sessionId/execute_async')],\n     [cmd.Name.SCREENSHOT, get('/session/:sessionId/screenshot')],\n     [cmd.Name.SET_TIMEOUT, post('/session/:sessionId/timeouts')],\n-    [cmd.Name.SET_SCRIPT_TIMEOUT, post('/session/:sessionId/timeouts/async_script')],\n-    [cmd.Name.IMPLICITLY_WAIT, post('/session/:sessionId/timeouts/implicit_wait')],\n     [cmd.Name.MOVE_TO, post('/session/:sessionId/moveto')],\n     [cmd.Name.CLICK, post('/session/:sessionId/click')],\n     [cmd.Name.DOUBLE_CLICK, post('/session/:sessionId/doubleclick')],\n\ndiff --git a/javascript/node/selenium-webdriver/lib/webdriver.js b/javascript/node/selenium-webdriver/lib/webdriver.js\nindex e401d8b21d..9a74405019 100644\n--- a/javascript/node/selenium-webdriver/lib/webdriver.js\n+++ b/javascript/node/selenium-webdriver/lib/webdriver.js\n@@ -1284,10 +1284,7 @@ class Timeouts {\n    *     when the implicit wait timeout has been set.\n    */\n   implicitlyWait(ms) {\n-    return this.driver_.schedule(\n-        new command.Command(command.Name.IMPLICITLY_WAIT).\n-            setParameter('ms', ms < 0 ? 0 : ms),\n-        'WebDriver.manage().timeouts().implicitlyWait(' + ms + ')');\n+    return this._scheduleCommand(ms, 'implicit', 'implicitlyWait');\n   }\n \n   /**\n@@ -1300,10 +1297,7 @@ class Timeouts {\n    *     when the script timeout has been set.\n    */\n   setScriptTimeout(ms) {\n-    return this.driver_.schedule(\n-        new command.Command(command.Name.SET_SCRIPT_TIMEOUT).\n-            setParameter('ms', ms < 0 ? 0 : ms),\n-        'WebDriver.manage().timeouts().setScriptTimeout(' + ms + ')');\n+    return this._scheduleCommand(ms, 'script', 'setScriptTimeout');\n   }\n \n   /**\n@@ -1316,11 +1310,15 @@ class Timeouts {\n    *     when the timeout has been set.\n    */\n   pageLoadTimeout(ms) {\n+    return this._scheduleCommand(ms, 'page load', 'pageLoadTimeout');\n+  }\n+\n+  _scheduleCommand(ms, timeoutIdentifier, timeoutName) {\n     return this.driver_.schedule(\n         new command.Command(command.Name.SET_TIMEOUT).\n-            setParameter('type', 'page load').\n+            setParameter('type', timeoutIdentifier).\n             setParameter('ms', ms),\n-        'WebDriver.manage().timeouts().pageLoadTimeout(' + ms + ')');\n+        `WebDriver.manage().timeouts().${timeoutName}(${ms})`);\n   }\n }\n \n", "test_patch": "diff --git a/javascript/node/selenium-webdriver/test/element_finding_test.js b/javascript/node/selenium-webdriver/test/element_finding_test.js\nindex 3d56b542db..b6a4919a26 100644\n--- a/javascript/node/selenium-webdriver/test/element_finding_test.js\n+++ b/javascript/node/selenium-webdriver/test/element_finding_test.js\n@@ -235,6 +235,22 @@ test.suite(function(env) {\n             });\n       });\n \n+      test.it('should implicitly wait', function() {\n+        var TIMEOUT_IN_MS = 1000;\n+        var EPSILON = TIMEOUT_IN_MS / 2;\n+\n+        driver.manage().timeouts().implicitlyWait(TIMEOUT_IN_MS);\n+        driver.get(Pages.formPage);\n+\n+        var start = new Date();\n+        driver.findElement(By.id('nonExistantButton')).\n+            then(fail, function(e) {\n+              var end = new Date();\n+              assert(e).instanceOf(error.NoSuchElementError);\n+              assert(end - start).closeTo(TIMEOUT_IN_MS, EPSILON);\n+            });\n+      });\n+\n       test.it('should be able to find multiple matches', function() {\n         driver.get(Pages.xhtmlTestPage);\n         driver.findElements(By.className('nameC')).then(function(elements) {\n\ndiff --git a/javascript/node/selenium-webdriver/test/execute_script_test.js b/javascript/node/selenium-webdriver/test/execute_script_test.js\nindex 9b1f44fb0b..860370df03 100644\n--- a/javascript/node/selenium-webdriver/test/execute_script_test.js\n+++ b/javascript/node/selenium-webdriver/test/execute_script_test.js\n@@ -18,6 +18,7 @@\n 'use strict';\n \n var path = require('path');\n+var fail = require('assert').fail;\n \n var webdriver = require('..'),\n     Browser = webdriver.Browser,\n@@ -322,6 +323,38 @@ test.suite(function(env) {\n             .equalTo('<div class=\"request\">GET /common/echo HTTP/1.1</div>');\n       });\n     });\n+\n+    describe('async timeouts', function() {\n+      var TIMEOUT_IN_MS = 200;\n+      var ACCEPTABLE_WAIT = TIMEOUT_IN_MS / 10;\n+      var TOO_LONG_WAIT = TIMEOUT_IN_MS * 10;\n+\n+      before(function() {\n+        return driver.manage().timeouts().setScriptTimeout(TIMEOUT_IN_MS)\n+      });\n+\n+      test.it('does not fail if script execute in time', function() {\n+        return executeTimeOutScript(ACCEPTABLE_WAIT);\n+      });\n+\n+      test.it('fails if script took too long', function() {\n+        return executeTimeOutScript(TOO_LONG_WAIT)\n+          .then(function() {\n+            fail('it should have timed out');\n+          }).catch(function(e) {\n+            assert(e.name).equalTo('ScriptTimeoutError');\n+            assert(e.message).contains('Timed out waiting for async script \\\n+result after');\n+          });\n+      });\n+\n+      function executeTimeOutScript(sleepTime) {\n+        return driver.executeAsyncScript(function(sleepTime) {\n+          var callback = arguments[arguments.length - 1];\n+          setTimeout(callback, sleepTime)\n+        }, sleepTime);\n+      }\n+    })\n   });\n \n   function verifyJson(expected) {\n", "instance_id": "seleniumhq__selenium-2185", "fixed_tests": {}, "failed_tests": [], "skipped_tests": [], "run_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "test_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "fix_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "f2p_tests": {}, "p2p_tests": {}, "s2p_tests": {}, "n2p_tests": {}}
{"org": "seleniumhq", "repo": "selenium", "number": 2407, "title": "Add Switch Context extension commands to Marionette for the Node.js bindings", "body": "The Switch Context command allows running WebDriver commands against\nthe chrome/XUL context in Firefox.\n", "state": "closed", "base": {"label": "SeleniumHQ:master", "ref": "master", "sha": "ef3b8e2e4152304d976fdcaae71155544aa4dd55"}, "resolved_issues": [], "fix_patch": "diff --git a/javascript/node/selenium-webdriver/firefox/index.js b/javascript/node/selenium-webdriver/firefox/index.js\nindex 96f37b430e..9f18de7430 100644\n--- a/javascript/node/selenium-webdriver/firefox/index.js\n+++ b/javascript/node/selenium-webdriver/firefox/index.js\n@@ -117,9 +117,11 @@ const Binary = require('./binary').Binary,\n     Profile = require('./profile').Profile,\n     decodeProfile = require('./profile').decode,\n     executors = require('../executors'),\n+    http = require('../http'),\n     httpUtil = require('../http/util'),\n     io = require('../io'),\n     capabilities = require('../lib/capabilities'),\n+    command = require('../lib/command'),\n     logging = require('../lib/logging'),\n     promise = require('../lib/promise'),\n     webdriver = require('../lib/webdriver'),\n@@ -266,6 +268,23 @@ class Options {\n   }\n }\n \n+\n+/**\n+ * Enum of available command contexts.\n+ *\n+ * Command contexts are specific to Marionette, and may be used with the\n+ * {@link #context=} method. Contexts allow you to direct all subsequent\n+ * commands to either \"content\" (default) or \"chrome\". The latter gives\n+ * you elevated security permissions.\n+ *\n+ * @enum {string}\n+ */\n+const Context = {\n+  CONTENT: \"content\",\n+  CHROME: \"chrome\",\n+};\n+\n+\n const GECKO_DRIVER_EXE =\n     process.platform === 'win32' ? 'geckodriver.exe' : 'geckodriver';\n \n@@ -365,6 +384,36 @@ function normalizeProxyConfiguration(config) {\n }\n \n \n+/** @enum {string} */\n+const ExtensionCommand = {\n+  GET_CONTEXT: 'getContext',\n+  SET_CONTEXT: 'setContext',\n+};\n+\n+\n+/**\n+ * Creates a command executor with support for Marionette's custom commands.\n+ * @param {!Promise<string>} url The server's URL.\n+ * @param {!command.Executor} The new command executor.\n+ */\n+function createExecutor(url) {\n+  return new command.DeferredExecutor(url.then(url => {\n+    let client = new http.HttpClient(url);\n+    let executor = new http.Executor(client);\n+\n+    executor.defineCommand(\n+        ExtensionCommand.GET_CONTEXT,\n+        'GET',\n+        '/session/:sessionId/moz/context');\n+    executor.defineCommand(\n+        ExtensionCommand.SET_CONTEXT,\n+        'POST',\n+        '/session/:sessionId/moz/context');\n+\n+    return executor;\n+  }));\n+}\n+\n /**\n  * A WebDriver client for Firefox.\n  */\n@@ -457,7 +506,7 @@ class Driver extends webdriver.WebDriver {\n       };\n     }\n \n-    let executor = executors.createExecutor(serverUrl);\n+    let executor = createExecutor(serverUrl);\n     let driver = webdriver.WebDriver.createSession(executor, caps, opt_flow);\n     super(driver.getSession(), executor, driver.controlFlow());\n \n@@ -476,13 +525,46 @@ class Driver extends webdriver.WebDriver {\n    */\n   setFileDetector() {\n   }\n+\n+  /**\n+   * Get the context that is currently in effect.\n+   *\n+   * @return {!promise.Promise<Context>} Current context.\n+   */\n+  getContext() {\n+    return this.schedule(\n+        new command.Command(ExtensionCommand.GET_CONTEXT),\n+        'get WebDriver.context');\n+  }\n+\n+  /**\n+   * Changes target context for commands between chrome- and content.\n+   *\n+   * Changing the current context has a stateful impact on all subsequent\n+   * commands. The {@link Context.CONTENT} context has normal web\n+   * platform document permissions, as if you would evaluate arbitrary\n+   * JavaScript. The {@link Context.CHROME} context gets elevated\n+   * permissions that lets you manipulate the browser chrome itself,\n+   * with full access to the XUL toolkit.\n+   *\n+   * Use your powers wisely.\n+   *\n+   * @param {!promise.Promise<void>} ctx The context to switch to.\n+   */\n+  setContext(ctx) {\n+    return this.schedule(\n+        new command.Command(ExtensionCommand.SET_CONTEXT)\n+            .setParameter(\"context\", ctx),\n+        'set WebDriver.context');\n+  }\n }\n \n \n // PUBLIC API\n \n \n exports.Binary = Binary;\n+exports.Context = Context;\n exports.Driver = Driver;\n exports.Options = Options;\n exports.Profile = Profile;\n", "test_patch": "diff --git a/javascript/node/selenium-webdriver/lib/test/index.js b/javascript/node/selenium-webdriver/lib/test/index.js\nindex 474fd3c26a..4374380750 100644\n--- a/javascript/node/selenium-webdriver/lib/test/index.js\n+++ b/javascript/node/selenium-webdriver/lib/test/index.js\n@@ -147,6 +147,10 @@ function TestEnvironment(browserName, server) {\n     return server || remoteUrl;\n   };\n \n+  this.isMarionette = function() {\n+    return !noMarionette;\n+  };\n+\n   this.browsers = function(var_args) {\n     var browsersToIgnore = Array.prototype.slice.apply(arguments, [0]);\n     return browsers(browserName, browsersToIgnore);\n\ndiff --git a/javascript/node/selenium-webdriver/test/firefox/firefox_test.js b/javascript/node/selenium-webdriver/test/firefox/firefox_test.js\nindex 3a89a350ea..6f3f4b3d95 100644\n--- a/javascript/node/selenium-webdriver/test/firefox/firefox_test.js\n+++ b/javascript/node/selenium-webdriver/test/firefox/firefox_test.js\n@@ -22,7 +22,9 @@ var path = require('path');\n var firefox = require('../../firefox'),\n     io = require('../../io'),\n     test = require('../../lib/test'),\n-    assert = require('../../testing/assert');\n+    assert = require('../../testing/assert'),\n+    Context = require('../../firefox').Context,\n+    error = require('../..').error;\n \n \n var JETPACK_EXTENSION = path.join(__dirname,\n@@ -148,5 +150,39 @@ test.suite(function(env) {\n       });\n     });\n \n+    describe('context switching', function() {\n+      var driver;\n+\n+      test.beforeEach(function() {\n+        driver = env.builder().build();\n+      });\n+\n+      test.afterEach(function() {\n+        if (driver) {\n+          driver.quit();\n+        }\n+      });\n+\n+      test.ignore(() => !env.isMarionette).\n+      it('can get context', function() {\n+        assert(driver.getContext()).equalTo(Context.CONTENT);\n+      });\n+\n+      test.ignore(() => !env.isMarionette).\n+      it('can set context', function() {\n+        driver.setContext(Context.CHROME);\n+        assert(driver.getContext()).equalTo(Context.CHROME);\n+        driver.setContext(Context.CONTENT);\n+        assert(driver.getContext()).equalTo(Context.CONTENT);\n+      });\n+\n+      test.ignore(() => !env.isMarionette).\n+      it('throws on unknown context', function() {\n+        driver.setContext(\"foo\").then(assert.fail, function(e) {\n+          assert(e).instanceOf(error.InvalidArgumentError);\n+        });\n+      });\n+    });\n+\n   });\n }, {browsers: ['firefox']});\n", "instance_id": "seleniumhq__selenium-2407", "fixed_tests": {}, "failed_tests": [], "skipped_tests": [], "run_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "test_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "fix_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "f2p_tests": {}, "p2p_tests": {}, "s2p_tests": {}, "n2p_tests": {}}
{"org": "seleniumhq", "repo": "selenium", "number": 2556, "title": "Preserve the protocol in grid when forwarding connections", "body": "- [X ] By placing an `X` in the preceding checkbox, I verify that I have signed the [Contributor License Agreement](https://github.com/SeleniumHQ/selenium/blob/master/CONTRIBUTING.md#step-6-sign-the-cla)\n", "state": "closed", "base": {"label": "SeleniumHQ:master", "ref": "master", "sha": "887548cfd70acca455120effc07ff5c7d264d7ed"}, "resolved_issues": [], "fix_patch": "diff --git a/java/server/src/org/openqa/grid/internal/BaseRemoteProxy.java b/java/server/src/org/openqa/grid/internal/BaseRemoteProxy.java\nindex 2c63cb2db6..e87bda8d28 100644\n--- a/java/server/src/org/openqa/grid/internal/BaseRemoteProxy.java\n+++ b/java/server/src/org/openqa/grid/internal/BaseRemoteProxy.java\n@@ -483,7 +483,7 @@ public JsonObject getStatus() throws GridException {\n     String url = getRemoteHost().toExternalForm() + \"/wd/hub/status\";\n     BasicHttpRequest r = new BasicHttpRequest(\"GET\", url);\n     HttpClient client = getHttpClientFactory().getGridHttpClient(config.nodeStatusCheckTimeout, config.nodeStatusCheckTimeout);\n-    HttpHost host = new HttpHost(getRemoteHost().getHost(), getRemoteHost().getPort());\n+    HttpHost host = new HttpHost(getRemoteHost().getHost(), getRemoteHost().getPort(), getRemoteHost().getProtocol());\n     HttpResponse response;\n     String existingName = Thread.currentThread().getName();\n     HttpEntity entity = null;\n", "test_patch": "diff --git a/java/server/src/org/openqa/grid/internal/TestSession.java b/java/server/src/org/openqa/grid/internal/TestSession.java\nindex 9ca122b912..0e1f13a5f5 100644\n--- a/java/server/src/org/openqa/grid/internal/TestSession.java\n+++ b/java/server/src/org/openqa/grid/internal/TestSession.java\n@@ -362,7 +362,7 @@ private HttpResponse sendRequestToNode(HttpRequest proxyRequest) throws ClientPr\n                                                                           IOException {\n     HttpClient client = getClient();\n     URL remoteURL = slot.getRemoteURL();\n-    HttpHost host = new HttpHost(remoteURL.getHost(), remoteURL.getPort());\n+    HttpHost host = new HttpHost(remoteURL.getHost(), remoteURL.getPort(), remoteURL.getProtocol());\n \n     return client.execute(host, proxyRequest);\n   }\n", "instance_id": "seleniumhq__selenium-2556", "fixed_tests": {}, "failed_tests": [], "skipped_tests": [], "run_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "test_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "fix_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "f2p_tests": {}, "p2p_tests": {}, "s2p_tests": {}, "n2p_tests": {}}
{"org": "seleniumhq", "repo": "selenium", "number": 2582, "title": "[js] Fix typo in execute_script_test.js", "body": "- [X] By placing an `X` in the preceding checkbox, I verify that I have signed the [Contributor License Agreement](https://github.com/SeleniumHQ/selenium/blob/master/CONTRIBUTING.md#step-6-sign-the-cla)\n", "state": "closed", "base": {"label": "SeleniumHQ:master", "ref": "master", "sha": "62f83f52873083dd5c484a158dfcafa3d114ec4a"}, "resolved_issues": [], "fix_patch": "", "test_patch": "diff --git a/javascript/node/selenium-webdriver/test/execute_script_test.js b/javascript/node/selenium-webdriver/test/execute_script_test.js\nindex b01916d594..98ed82dc0d 100644\n--- a/javascript/node/selenium-webdriver/test/execute_script_test.js\n+++ b/javascript/node/selenium-webdriver/test/execute_script_test.js\n@@ -47,7 +47,7 @@ test.suite(function(env) {\n \n     test.it('fails if script throws', function() {\n       execute('throw new Error(\"boom\")')\n-          .then(function() { throw shoudlHaveFailed; })\n+          .then(function() { throw shouldHaveFailed; })\n           .catch(function(e) {\n             // The java WebDriver server adds a bunch of crap to error messages.\n             // Error message will just be \"JavaScript error\" for IE.\n@@ -57,7 +57,7 @@ test.suite(function(env) {\n \n     test.it('fails if script does not parse', function() {\n       execute('throw function\\\\*')\n-          .then(function() { throw shoudlHaveFailed; })\n+          .then(function() { throw shouldHaveFailed; })\n           .catch(function(e) {\n             assert(e).notEqualTo(shouldHaveFailed);\n           });\n", "instance_id": "seleniumhq__selenium-2582", "fixed_tests": {}, "failed_tests": [], "skipped_tests": [], "run_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "test_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "fix_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "f2p_tests": {}, "p2p_tests": {}, "s2p_tests": {}, "n2p_tests": {}}
{"org": "seleniumhq", "repo": "selenium", "number": 2598, "title": "[js] remove unused require in test", "body": "- [x ] By placing an `X` in the preceding checkbox, I verify that I have signed the [Contributor License Agreement](https://github.com/SeleniumHQ/selenium/blob/master/CONTRIBUTING.md#step-6-sign-the-cla)\n", "state": "closed", "base": {"label": "SeleniumHQ:master", "ref": "master", "sha": "77e455dc363f3f2618a4df6c3695abe4822109d1"}, "resolved_issues": [], "fix_patch": "", "test_patch": "diff --git a/javascript/node/selenium-webdriver/test/execute_script_test.js b/javascript/node/selenium-webdriver/test/execute_script_test.js\nindex 98ed82dc0d..2ee150ed8b 100644\n--- a/javascript/node/selenium-webdriver/test/execute_script_test.js\n+++ b/javascript/node/selenium-webdriver/test/execute_script_test.js\n@@ -17,7 +17,6 @@\n \n 'use strict';\n \n-var path = require('path');\n var fail = require('assert').fail;\n \n var webdriver = require('..'),\n", "instance_id": "seleniumhq__selenium-2598", "fixed_tests": {}, "failed_tests": [], "skipped_tests": [], "run_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "test_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "fix_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "f2p_tests": {}, "p2p_tests": {}, "s2p_tests": {}, "n2p_tests": {}}
{"org": "seleniumhq", "repo": "selenium", "number": 2669, "title": "Js - Add support for Safari 10 safaridriver", "body": "- [x] By placing an `X` in the preceding checkbox, I verify that I have signed the [Contributor License Agreement](https://github.com/SeleniumHQ/selenium/blob/master/CONTRIBUTING.md#step-6-sign-the-cla)\n\nWIP. 6 tests are failing.\n\n```\n  1) [safari] finding elements By.linkText() works on XHTML pages:\n     NoSuchElementError: An element could not be located on the page using the given search parameters.\n      at WebDriverError (lib/error.js:27:10)\n      at NoSuchElementError (lib/error.js:168:10)\n      at Object.checkLegacyResponse (lib/error.js:505:15)\n      at parseHttpResponse (lib/http.js:398:13)\n      at lib/http.js:330:11\n  From: Task: WebDriver.findElement(By(link text, Foo))\n      at Driver.schedule (lib/webdriver.js:414:17)\n      at Driver.findElement (lib/webdriver.js:901:17)\n      at Context.<anonymous> (test/element_finding_test.js:161:25)\n      at testing/index.js:153:19\n      at new ManagedPromise (lib/promise.js:1029:7)\n      at controlFlowExecute (testing/index.js:138:14)\n      at TaskQueue.execute_ (lib/promise.js:2742:14)\n      at TaskQueue.executeNext_ (lib/promise.js:2725:21)\n      at lib/promise.js:2642:25\n      at lib/promise.js:639:7\n  From: Task: WebElement.getText()\n      at Driver.schedule (lib/webdriver.js:414:17)\n      at WebElementPromise.schedule_ (lib/webdriver.js:1820:25)\n      at WebElementPromise.getText (lib/webdriver.js:2084:17)\n      at Context.<anonymous> (test/element_finding_test.js:162:19)\n      at testing/index.js:153:19\n      at new ManagedPromise (lib/promise.js:1029:7)\n      at controlFlowExecute (testing/index.js:138:14)\n      at TaskQueue.execute_ (lib/promise.js:2742:14)\n      at TaskQueue.executeNext_ (lib/promise.js:2725:21)\n      at lib/promise.js:2642:25\n      at lib/promise.js:639:7\n  From: Task: [safari] finding elements By.linkText() works on XHTML pages\n      at Context.ret (testing/index.js:137:10)\n\n  2) [safari] finding elements by custom locator handles single element result:\n\n      AssertionError: 'Update a\\n        div' === 'Update a div'\n      + expected - actual\n\n      -Update a\n      -        div\n      +Update a div\n\n      at testing/assert.js:342:14\n      at ManagedPromise.invokeCallback_ (lib/promise.js:1315:14)\n      at TaskQueue.execute_ (lib/promise.js:2742:14)\n      at TaskQueue.executeNext_ (lib/promise.js:2725:21)\n      at lib/promise.js:2595:27\n      at lib/promise.js:639:7\n  From: Task: [safari] finding elements by custom locator handles single element result\n      at Context.ret (testing/index.js:137:10)\n\n  3) [safari] executeScript; parameters; can return arguments object as array:\n     AssertionError: undefined === 3\n      at testing/assert.js:342:14\n      at evaluate (testing/assert.js:92:3)\n      at Assertion.isEqualTo (testing/assert.js:341:12)\n      at Assertion.equalTo (testing/assert.js:325:17)\n      at test/execute_script_test.js:212:30\n      at ManagedPromise.invokeCallback_ (lib/promise.js:1315:14)\n      at TaskQueue.execute_ (lib/promise.js:2742:14)\n      at TaskQueue.executeNext_ (lib/promise.js:2725:21)\n      at lib/promise.js:2595:27\n      at lib/promise.js:639:7\n  From: Task: [safari] executeScript; parameters; can return arguments object as array\n      at Context.ret (testing/index.js:137:10)\n\n  4) [safari] should follow meta redirects:\n\n      AssertionError: 'Some test page' === 'We Arrive Here'\n      + expected - actual\n\n      -Some test page\n      +We Arrive Here\n\n      at testing/assert.js:342:14\n      at ManagedPromise.invokeCallback_ (lib/promise.js:1315:14)\n      at TaskQueue.execute_ (lib/promise.js:2742:14)\n      at TaskQueue.executeNext_ (lib/promise.js:2725:21)\n      at lib/promise.js:2595:27\n      at lib/promise.js:639:7\n  From: Task: [safari] should follow meta redirects\n      at Context.ret (testing/index.js:137:10)\n\n  5) [safari] dynamically removing elements from the DOM trigger a StaleElementReferenceError:\n\n  UnsupportedOperationError\n      at WebDriverError (lib/error.js:27:10)\n      at UnsupportedOperationError (lib/error.js:319:10)\n      at parseHttpResponse (lib/http.js:408:11)\n      at lib/http.js:330:11\n  From: Task: WebElement.isDisplayed()\n      at Driver.schedule (lib/webdriver.js:414:17)\n      at WebElementPromise.schedule_ (lib/webdriver.js:1820:25)\n      at WebElementPromise.isDisplayed (lib/webdriver.js:2169:17)\n      at Context.<anonymous> (test/stale_element_test.js:43:28)\n      at testing/index.js:153:19\n      at new ManagedPromise (lib/promise.js:1029:7)\n      at controlFlowExecute (testing/index.js:138:14)\n      at TaskQueue.execute_ (lib/promise.js:2742:14)\n      at TaskQueue.executeNext_ (lib/promise.js:2725:21)\n      at lib/promise.js:2642:25\n      at lib/promise.js:639:7\n  From: Task: [safari] dynamically removing elements from the DOM trigger a StaleElementReferenceError\n      at Context.ret (testing/index.js:137:10)\n\n  6) [safari] can set the window position from a frame:\n     Error: Wait timed out after 1000ms\n      at lib/promise.js:2183:22\n      at ManagedPromise.invokeCallback_ (lib/promise.js:1315:14)\n      at TaskQueue.execute_ (lib/promise.js:2742:14)\n      at TaskQueue.executeNext_ (lib/promise.js:2725:21)\n      at lib/promise.js:2595:27\n      at lib/promise.js:639:7\n  From: Task: <anonymous wait>\n      at ControlFlow.wait (lib/promise.js:2171:17)\n      at Driver.wait (lib/webdriver.js:749:29)\n      at test/window_test.js:106:16\n      at ManagedPromise.invokeCallback_ (lib/promise.js:1315:14)\n      at TaskQueue.execute_ (lib/promise.js:2742:14)\n      at TaskQueue.executeNext_ (lib/promise.js:2725:21)\n      at lib/promise.js:2595:27\n      at lib/promise.js:639:7\n  From: Task: [safari] can set the window position from a frame\n      at Context.ret (testing/index.js:137:10)\n      at testing/index.js:80:5\n      at ManagedPromise.invokeCallback_ (lib/promise.js:1315:14)\n      at TaskQueue.execute_ (lib/promise.js:2742:14)\n      at TaskQueue.executeNext_ (lib/promise.js:2725:21)\n      at lib/promise.js:2595:27\n      at lib/promise.js:639:7\n```\n", "state": "closed", "base": {"label": "SeleniumHQ:master", "ref": "master", "sha": "fbc82cdddf3267c11716815fb508bd0365aeb3a6"}, "resolved_issues": [], "fix_patch": "diff --git a/javascript/node/selenium-webdriver/CHANGES.md b/javascript/node/selenium-webdriver/CHANGES.md\nindex cd14a7a3e8..0e2097bdf1 100644\n--- a/javascript/node/selenium-webdriver/CHANGES.md\n+++ b/javascript/node/selenium-webdriver/CHANGES.md\n@@ -4,6 +4,9 @@\n   recovering from an unhandled promise rejection.\n * Added the `firefox.ServiceBuilder` class, which may be used to customize the\n   geckodriver used for `firefox.Driver` instances.\n+* Added support for Safari 10 safaridriver. safaridriver may be disabled\n+  via tha API, `safari.Options#useLegacyDriver`, to use the safari\n+  extension driver.\n \n ### API Changes\n \n\ndiff --git a/javascript/node/selenium-webdriver/README.md b/javascript/node/selenium-webdriver/README.md\nindex 51b9bcfc3c..0b70aeddcd 100644\n--- a/javascript/node/selenium-webdriver/README.md\n+++ b/javascript/node/selenium-webdriver/README.md\n@@ -11,16 +11,23 @@ Selenium may be installed via npm with\n     npm install selenium-webdriver\n \n You will need to download additional components to work with each of the major\n-browsers. The drivers for Chrome, Firefox, PhantomJS, Opera, and \n+browsers. The drivers for Chrome, Firefox, Safari, PhantomJS, Opera, and\n Microsoft's IE and Edge web browsers are all standalone executables that should\n-be placed on your system [PATH]. The SafariDriverbrowser extension should be\n-installed in your browser before using Selenium; we recommend disabling the\n-extension when using the browser without Selenium or installing the extension in\n-a profile only used for testing.\n+be placed on your system [PATH]. Apple's safaridriver is shipped with\n+Safari 10 in macOS Sierra. You will need to enable Remote Automation in\n+the Develop menu of Safari 10 before testing.\n \n > **NOTE:**  Mozilla's [geckodriver] is only required for Firefox 47+.\n > Everything you need for Firefox 38-46 is included with this package.\n \n+> **NOTE:**  Apple's [safaridriver] is preferred for testing Safari 10+.\n+> To test versions of Safari prior to Safari 10, The\n+> [SafariDriver.safariextz][release] browser extension should be\n+> installed in your browser before using Selenium. We recommend\n+> disabling the extension when using the browser without Selenium\n+> or installing the extension in a profile only used for testing.\n+\n+\n | Browser           | Component                          |\n | ----------------- | ---------------------------------- |\n | Chrome            | [chromedriver(.exe)][chrome]       |\n@@ -29,7 +36,7 @@ a profile only used for testing.\n | Firefox 47+       | [geckodriver(.exe)][geckodriver]   |\n | PhantomJS         | [phantomjs(.exe)][phantomjs]       |\n | Opera             | [operadriver(.exe)][opera]         |\n-| Safari            | [SafariDriver.safariextz][release] |\n+| Safari            | [safaridriver]                     |\n \n ## Usage\n \n@@ -229,3 +236,4 @@ under the License.\n [reduction]: http://www.webkit.org/quality/reduction.html\n [release]: http://selenium-release.storage.googleapis.com/index.html\n [users]: https://groups.google.com/forum/#!forum/selenium-users\n+[safaridriver]: https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_10_0.html#//apple_ref/doc/uid/TP40014305-CH11-DontLinkElementID_28\n\ndiff --git a/javascript/node/selenium-webdriver/index.js b/javascript/node/selenium-webdriver/index.js\nindex a2be0ea220..3b6cc47f2b 100644\n--- a/javascript/node/selenium-webdriver/index.js\n+++ b/javascript/node/selenium-webdriver/index.js\n@@ -440,6 +440,14 @@ class Builder {\n     return this;\n   }\n \n+  /**\n+   * @return {safari.Options} the Safari specific options currently configured\n+   *     for this instance.\n+   */\n+  getSafariOptions() {\n+    return this.safariOptions_;\n+  }\n+\n   /**\n    * Sets the control flow that created drivers should execute actions in. If\n    * the flow is never set, or is set to {@code null}, it will use the active\n\ndiff --git a/javascript/node/selenium-webdriver/safari.js b/javascript/node/selenium-webdriver/safari.js\nindex feb51ad21a..bbfff06e8b 100644\n--- a/javascript/node/selenium-webdriver/safari.js\n+++ b/javascript/node/selenium-webdriver/safari.js\n@@ -16,12 +16,26 @@\n // under the License.\n \n /**\n- * @fileoverview Defines a WebDriver client for Safari. Before using this\n- * module, you must install the\n+ * @fileoverview Defines a WebDriver client for Safari.\n+ *\n+ *\n+ * __Testing Older Versions of Safari__\n+ *\n+ * To test versions of Safari prior to Safari 10.0, you must install the\n  * [latest version](http://selenium-release.storage.googleapis.com/index.html)\n  * of the SafariDriver browser extension; using Safari for normal browsing is\n  * not recommended once the extension has been installed. You can, and should,\n  * disable the extension when the browser is not being used with WebDriver.\n+ *\n+ * You must also enable the use of legacy driver using the {@link Options} class.\n+ *\n+ *     let options = new safari.Options()\n+ *       .useLegacyDriver(true);\n+ *\n+ *     let driver = new (require('selenium-webdriver')).Builder()\n+ *       .forBrowser('safari')\n+ *       .setSafariOptions(options)\n+ *       .build();\n  */\n \n 'use strict';\n@@ -47,6 +61,8 @@ const Session = require('./lib/session').Session;\n const Symbols = require('./lib/symbols');\n const webdriver = require('./lib/webdriver');\n const portprober = require('./net/portprober');\n+const remote = require('./remote');\n+const http_ = require('./http');\n \n \n /** @const */\n@@ -106,7 +122,7 @@ var Host;\n \n \n /**\n- * A basic HTTP/WebSocket server used to communicate with the SafariDriver\n+ * A basic HTTP/WebSocket server used to communicate with the legacy SafariDriver\n  * browser extension.\n  */\n class Server extends events.EventEmitter {\n@@ -449,9 +465,42 @@ class CommandExecutor {\n }\n \n \n+/**\n+ * @return {string} .\n+ * @throws {Error}\n+ */\n+function findSafariDriver() {\n+  let exe = io.findInPath('safaridriver', true);\n+  if (!exe) {\n+    throw Error(\n+      `The safaridriver executable could not be found on the current PATH.\n+      Please ensure you are using Safari 10.0 or above.`);\n+  }\n+  return exe;\n+}\n+\n+\n+/**\n+ * Creates {@link selenium-webdriver/remote.DriverService} instances that manage\n+ * a [safaridriver] server in a child process.\n+ *\n+ * [safaridriver]: https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_10_0.html#//apple_ref/doc/uid/TP40014305-CH11-DontLinkElementID_28\n+ */\n+class ServiceBuilder extends remote.DriverService.Builder {\n+  /**\n+   * @param {string=} opt_exe Path to the server executable to use. If omitted,\n+   *     the builder will attempt to locate the safaridriver on the system PATH.\n+   */\n+  constructor(opt_exe) {\n+    super(opt_exe || findSafariDriver());\n+    this.setLoopback(true);  // Required.\n+  }\n+}\n+\n \n /** @const */\n const OPTIONS_CAPABILITY_KEY = 'safari.options';\n+const LEGACY_DRIVER_CAPABILITY_KEY = 'legacyDriver'\n \n \n \n@@ -465,6 +514,12 @@ class Options {\n \n     /** @private {./lib/logging.Preferences} */\n     this.logPrefs_ = null;\n+\n+    /** @private {?./lib/capabilities.ProxyConfig} */\n+    this.proxy_ = null;\n+\n+    /** @private {boolean} */\n+    this.legacyDriver_ = false;\n   }\n \n   /**\n@@ -483,10 +538,18 @@ class Options {\n       options.setCleanSession(o.cleanSession);\n     }\n \n+    if (capabilities.has(Capability.PROXY)) {\n+      options.setProxy(capabilities.get(Capability.PROXY));\n+    }\n+\n     if (capabilities.has(Capability.LOGGING_PREFS)) {\n       options.setLoggingPrefs(capabilities.get(Capability.LOGGING_PREFS));\n     }\n \n+    if (capabilities.has(LEGACY_DRIVER_CAPABILITY_KEY)) {\n+      options.useLegacyDriver(capabilities.get(LEGACY_DRIVER_CAPABILITY_KEY));\n+    }\n+\n     return options;\n   }\n \n@@ -505,6 +568,18 @@ class Options {\n     return this;\n   }\n \n+  /**\n+   * Sets whether to use the legacy driver from the Selenium project. This option\n+   * is disabled by default.\n+   *\n+   * @param {boolean} enable Whether to enable the legacy driver.\n+   * @return {!Options} A self reference.\n+   */\n+  useLegacyDriver(enable) {\n+    this.legacyDriver_ = enable;\n+    return this;\n+  }\n+\n   /**\n    * Sets the logging preferences for the new session.\n    * @param {!./lib/logging.Preferences} prefs The logging preferences.\n@@ -515,6 +590,17 @@ class Options {\n     return this;\n   }\n \n+  /**\n+   * Sets the proxy to use.\n+   *\n+   * @param {./lib/capabilities.ProxyConfig} proxy The proxy configuration to use.\n+   * @return {!Options} A self reference.\n+   */\n+  setProxy(proxy) {\n+    this.proxy_ = proxy;\n+    return this;\n+  }\n+\n   /**\n    * Converts this options instance to a {@link Capabilities} object.\n    * @param {Capabilities=} opt_capabilities The capabilities to\n@@ -526,9 +612,13 @@ class Options {\n     if (this.logPrefs_) {\n       caps.set(Capability.LOGGING_PREFS, this.logPrefs_);\n     }\n+    if (this.proxy_) {\n+      caps.set(Capability.PROXY, this.proxy_);\n+    }\n     if (this.options_) {\n       caps.set(OPTIONS_CAPABILITY_KEY, this);\n     }\n+    caps.set(LEGACY_DRIVER_CAPABILITY_KEY, this.legacyDriver_);\n     return caps;\n   }\n \n@@ -561,13 +651,43 @@ class Driver extends webdriver.WebDriver {\n    *     the driver under.\n    */\n   constructor(opt_config, opt_flow) {\n-    var executor = new CommandExecutor();\n-    var caps =\n-        opt_config instanceof Options ? opt_config.toCapabilities() :\n-        (opt_config || Capabilities.safari());\n+    let caps,\n+      executor,\n+      useLegacyDriver = false,\n+      onQuit = () => {};\n+\n+    if (opt_config instanceof Options) {\n+      caps = opt_config.toCapabilities();\n+    } else {\n+      caps = opt_config || Capabilities.safari()\n+    }\n+\n+    if (caps.has(LEGACY_DRIVER_CAPABILITY_KEY)) {\n+      useLegacyDriver = caps.get(LEGACY_DRIVER_CAPABILITY_KEY);\n+      caps.delete(LEGACY_DRIVER_CAPABILITY_KEY);\n+    }\n+\n+    if (useLegacyDriver) {\n+      executor = new CommandExecutor();\n+    } else {\n+      let service = new ServiceBuilder().build();\n+\n+      executor = new http_.Executor(\n+        service.start()\n+          .then(url => new http_.HttpClient(url))\n+      );\n+\n+      onQuit = () => service.kill();\n+    }\n+\n+    let driver = webdriver.WebDriver.createSession(executor, caps, opt_flow);\n \n-    var driver = webdriver.WebDriver.createSession(executor, caps, opt_flow);\n     super(driver.getSession(), executor, driver.controlFlow());\n+\n+    /** @override */\n+    this.quit = () => {\n+      return super.quit().finally(onQuit);\n+    };\n   }\n }\n \n@@ -577,3 +697,4 @@ class Driver extends webdriver.WebDriver {\n \n exports.Driver = Driver;\n exports.Options = Options;\n+exports.ServiceBuilder = ServiceBuilder;\n", "test_patch": "diff --git a/javascript/node/selenium-webdriver/lib/test/index.js b/javascript/node/selenium-webdriver/lib/test/index.js\nindex 4374380750..d702c5fb2b 100644\n--- a/javascript/node/selenium-webdriver/lib/test/index.js\n+++ b/javascript/node/selenium-webdriver/lib/test/index.js\n@@ -24,12 +24,14 @@ var build = require('./build'),\n     webdriver = require('../../'),\n     flow = webdriver.promise.controlFlow(),\n     firefox = require('../../firefox'),\n+    safari = require('../../safari'),\n     remote = require('../../remote'),\n     testing = require('../../testing'),\n     fileserver = require('./fileserver');\n \n \n const LEGACY_FIREFOX = 'legacy-' + webdriver.Browser.FIREFOX;\n+const LEGACY_SAFARI = 'legacy-' + webdriver.Browser.SAFARI;\n \n \n /**\n@@ -44,7 +46,8 @@ var NATIVE_BROWSERS = [\n   webdriver.Browser.IE,\n   webdriver.Browser.OPERA,\n   webdriver.Browser.PHANTOM_JS,\n-  webdriver.Browser.SAFARI\n+  webdriver.Browser.SAFARI,\n+  LEGACY_SAFARI\n ];\n \n \n@@ -80,7 +83,8 @@ var browsersToTest = (function() {\n       parts[0] = webdriver.Browser.IE;\n     }\n \n-    if (parts[0] === LEGACY_FIREFOX) {\n+    if (parts[0] === LEGACY_FIREFOX ||\n+      parts[0] === LEGACY_SAFARI) {\n       return;\n     }\n \n@@ -171,6 +175,14 @@ function TestEnvironment(browserName, server) {\n         parts[0] = webdriver.Browser.FIREFOX;\n       }\n \n+      if (parts[0] === LEGACY_SAFARI) {\n+        var options = builder.getSafariOptions() || new safari.Options();\n+        options.useLegacyDriver(true);\n+        builder.setSafariOptions(options);\n+\n+        parts[0] = webdriver.Browser.SAFARI;\n+      }\n+\n       builder.forBrowser(parts[0], parts[1], parts[2]);\n       if (server) {\n         builder.usingServer(server.address());\n@@ -231,7 +243,7 @@ function suite(fn, opt_options) {\n               return build.of('//javascript/firefox-driver:webdriver')\n                   .onlyOnce().go();\n             });\n-          } else if (browser === webdriver.Browser.SAFARI) {\n+          } else if (browser === LEGACY_SAFARI) {\n             testing.before(function() {\n               return build.of('//javascript/safari-driver:client')\n                   .onlyOnce().go();\n\ndiff --git a/javascript/node/selenium-webdriver/test/safari_test.js b/javascript/node/selenium-webdriver/test/safari_test.js\nindex 0000000000..41525d9cb6 100644\n--- a/javascript/node/selenium-webdriver/test/safari_test.js\n+++ b/javascript/node/selenium-webdriver/test/safari_test.js\n@@ -0,0 +1,112 @@\n+// Licensed to the Software Freedom Conservancy (SFC) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The SFC licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+'use strict';\n+\n+const webdriver = require('..'),\n+  proxy = require('../proxy'),\n+  safari = require('../safari'),\n+  assert = require('../testing/assert'),\n+  test = require('../lib/test');\n+\n+\n+describe('safari.Options', function() {\n+  describe('fromCapabilities', function() {\n+    it('returns a new Options instance  if none were defined', function() {\n+      let options = safari.Options.fromCapabilities(\n+        new webdriver.Capabilities());\n+      assert(options).instanceOf(safari.Options);\n+    });\n+\n+    it('returns the options instance if present', function() {\n+      let options = new safari.Options().setCleanSession(true),\n+        caps = options.toCapabilities();\n+      assert(safari.Options.fromCapabilities(caps)).equalTo(options);\n+    });\n+\n+    it('extracts supported WebDriver capabilities', function() {\n+      let proxyPrefs = proxy.direct(),\n+        logPrefs = {},\n+        caps = webdriver.Capabilities.chrome()\n+          .set(webdriver.Capability.PROXY, proxyPrefs)\n+          .set(webdriver.Capability.LOGGING_PREFS, logPrefs)\n+          .set('legacyDriver', true);\n+\n+      let options = safari.Options.fromCapabilities(caps);\n+      assert(options.proxy_).equalTo(proxyPrefs);\n+      assert(options.logPrefs_).equalTo(logPrefs);\n+      assert(options.legacyDriver_).equalTo(true);\n+    });\n+  });\n+\n+  describe('toCapabilities', function() {\n+    let options;\n+\n+    before(function() {\n+      options = new safari.Options()\n+        .setCleanSession(true);\n+    });\n+\n+    it('returns a new capabilities object if one is not provided', function() {\n+      let caps = options.toCapabilities();\n+      assert(caps).instanceOf(webdriver.Capabilities);\n+      assert(caps.get('browserName')).equalTo('safari');\n+      assert(caps.get('safari.options')).equalTo(options);\n+    });\n+\n+    it('adds to input capabilities object', function() {\n+      let caps = webdriver.Capabilities.safari();\n+      assert(options.toCapabilities(caps)).equalTo(caps);\n+      assert(caps.get('safari.options')).equalTo(options);\n+    });\n+\n+    it('sets generic driver capabilities', function() {\n+      let proxyPrefs = proxy.direct(),\n+        loggingPrefs = {};\n+\n+      options\n+        .setLoggingPrefs(loggingPrefs)\n+        .setProxy(proxyPrefs)\n+        .useLegacyDriver(true);\n+\n+      let caps = options.toCapabilities();\n+      assert(caps.get('proxy')).equalTo(proxyPrefs);\n+      assert(caps.get('loggingPrefs')).equalTo(loggingPrefs);\n+      assert(caps.get('legacyDriver')).equalTo(true);\n+    });\n+  });\n+});\n+\n+test.suite(function(env) {\n+  describe('safaridriver', function() {\n+    let service;\n+\n+    test.afterEach(function() {\n+      if (service) {\n+        return service.kill();\n+      }\n+    });\n+\n+    test.it('can start safaridriver', function() {\n+      service = new safari.ServiceBuilder().build();\n+\n+      return service.start().then(function(url) {\n+        assert(url).matches(/127\\.0\\.0\\.1/);\n+      });\n+    });\n+  });\n+}, {browsers: ['safari']});\n", "instance_id": "seleniumhq__selenium-2669", "fixed_tests": {}, "failed_tests": [], "skipped_tests": [], "run_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "test_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "fix_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "f2p_tests": {}, "p2p_tests": {}, "s2p_tests": {}, "n2p_tests": {}}
{"org": "seleniumhq", "repo": "selenium", "number": 2683, "title": "Fix/Add support for node servlets", "body": "- [X] By placing an `X` in the preceding checkbox, I verify that I have signed the [Contributor License Agreement](https://github.com/SeleniumHQ/selenium/blob/master/CONTRIBUTING.md#step-6-sign-the-cla)\n\nSupport for node -servlets bound to `/extra` and\n`/resources/` was broken when the pre-existing\n(2.x/rc) `SeleniumServer` code was removed.\nThis change set adds support back.\n- Updated interface `GridNodeServer`\n- Updated (new) `SeleniumServer` class to accept/process\n  extra servlets\n- Updated `SelfRegisteringRemote` to process `nodeConfig.servlets`\n  that are passed.\n- Updated tests in this area\n\nMisc Other;\n- Unrelated fixes to `GridLauncherV3` (unused import, code path\n  correction)\n", "state": "closed", "base": {"label": "SeleniumHQ:master", "ref": "master", "sha": "2a4fb0697c4e93243ae2dd81f6f5c191d11fee31"}, "resolved_issues": [], "fix_patch": "diff --git a/java/server/src/org/openqa/grid/internal/utils/SelfRegisteringRemote.java b/java/server/src/org/openqa/grid/internal/utils/SelfRegisteringRemote.java\nindex 12a9ba6627..353ed588f5 100644\n--- a/java/server/src/org/openqa/grid/internal/utils/SelfRegisteringRemote.java\n+++ b/java/server/src/org/openqa/grid/internal/utils/SelfRegisteringRemote.java\n@@ -32,6 +32,8 @@\n import org.openqa.grid.internal.utils.configuration.GridHubConfiguration;\n import org.openqa.grid.internal.utils.configuration.GridNodeConfiguration;\n import org.openqa.grid.shared.GridNodeServer;\n+import org.openqa.grid.web.servlet.ResourceServlet;\n+import org.openqa.grid.web.utils.ExtraServletUtil;\n import org.openqa.selenium.Platform;\n import org.openqa.selenium.remote.DesiredCapabilities;\n import org.openqa.selenium.remote.internal.HttpClientFactory;\n@@ -43,19 +45,27 @@\n import java.net.MalformedURLException;\n import java.net.URL;\n import java.security.InvalidParameterException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n import java.util.logging.Logger;\n \n+import javax.servlet.Servlet;\n+\n public class SelfRegisteringRemote {\n \n   private static final Logger LOG = Logger.getLogger(SelfRegisteringRemote.class.getName());\n \n-  private RegistrationRequest nodeConfig;\n+  private final RegistrationRequest nodeConfig;\n \n   private final HttpClientFactory httpClientFactory;\n \n+  private final Map<String, Class<? extends Servlet>> nodeServlets;\n+\n   public SelfRegisteringRemote(RegistrationRequest config) {\n     this.nodeConfig = config;\n     this.httpClientFactory = new HttpClientFactory();\n+    this.nodeServlets = new HashMap<>();\n \n     nodeConfig.validate();\n \n@@ -72,6 +82,13 @@ public SelfRegisteringRemote(RegistrationRequest config) {\n         \"error getting the parameters from the hub. The node may end up with wrong timeouts.\" + e\n           .getMessage());\n     }\n+\n+    // add the resource servlet for nodes\n+    nodeServlets.put(\"/resources/*\", ResourceServlet.class);\n+\n+    // add the user supplied servlet(s) for nodes\n+    addExtraServlets(nodeConfig.getConfiguration().servlets);\n+\n   }\n \n   public URL getRemoteURL() {\n@@ -96,6 +113,7 @@ public void startRemoteServer() throws Exception {\n     if (server == null) {\n       throw new GridConfigurationException(\"no server set to register to the hub\");\n     }\n+    server.setExtraServlets(nodeServlets);\n     server.boot();\n   }\n \n@@ -200,6 +218,20 @@ public GridNodeConfiguration getConfiguration() {\n     return nodeConfig.getConfiguration();\n   }\n \n+  /**\n+   * @return the {@link GridNodeServer} for this remote\n+   */\n+  protected GridNodeServer getServer() {\n+    return server;\n+  }\n+\n+  /**\n+   * @return the list of {@link Servlet}s that this remote will bind\n+   */\n+  protected Map<String, Class <? extends Servlet>> getNodeServlets() {\n+    return nodeServlets;\n+  }\n+\n   private void registerToHub(boolean checkPresenceFirst) {\n     if (!checkPresenceFirst || !isAlreadyRegistered(nodeConfig)) {\n       String tmp =\n@@ -234,6 +266,21 @@ private void registerToHub(boolean checkPresenceFirst) {\n \n   }\n \n+  private void addExtraServlets(List<String> servlets) {\n+    if (servlets == null || servlets.size() == 0) {\n+      return;\n+    }\n+\n+    for (String s : servlets) {\n+      Class<? extends Servlet> servletClass = ExtraServletUtil.createServlet(s);\n+      if (servletClass != null) {\n+        String path = \"/extra/\" + servletClass.getSimpleName() + \"/*\";\n+        LOG.info(\"binding \" + servletClass.getCanonicalName() + \" to \" + path);\n+        nodeServlets.put(path, servletClass);\n+      }\n+    }\n+  }\n+\n   void updateConfigWithRealPort() throws MalformedURLException {\n     if (nodeConfig.getConfiguration().port != 0) {\n       return;\n\ndiff --git a/java/server/src/org/openqa/grid/selenium/GridLauncherV3.java b/java/server/src/org/openqa/grid/selenium/GridLauncherV3.java\nindex c08b66caf9..cda1691129 100644\n--- a/java/server/src/org/openqa/grid/selenium/GridLauncherV3.java\n+++ b/java/server/src/org/openqa/grid/selenium/GridLauncherV3.java\n@@ -22,7 +22,6 @@\n import com.beust.jcommander.JCommander;\n \n import org.openqa.grid.common.GridRole;\n-import org.openqa.grid.common.JSONConfigurationUtils;\n import org.openqa.grid.common.RegistrationRequest;\n import org.openqa.grid.internal.utils.SelfRegisteringRemote;\n import org.openqa.grid.internal.utils.configuration.CoreRunnerConfiguration;\n@@ -227,8 +226,8 @@ public void setConfiguration(String[] args) {\n             //re-parse the args using any -hubConfig specified to init\n             if (pending.hubConfig != null) {\n               configuration = GridHubConfiguration.loadFromJSON(pending.hubConfig);\n+              new JCommander(configuration, args); //args take precedence\n             }\n-            new JCommander(configuration, args); //args take precedence\n             helpRequested = configuration.help;\n           }\n \n@@ -248,8 +247,8 @@ public void setConfiguration(String[] args) {\n             //re-parse the args using any -nodeConfig specified to init\n             if (pending.nodeConfigFile != null) {\n               configuration = GridNodeConfiguration.loadFromJSON(pending.nodeConfigFile);\n+              new JCommander(configuration, args); //args take precedence\n             }\n-            new JCommander(configuration, args); //args take precedence\n             helpRequested = configuration.help;\n             if (configuration.port == null) {\n               configuration.port = 5555;\n\ndiff --git a/java/server/src/org/openqa/grid/shared/GridNodeServer.java b/java/server/src/org/openqa/grid/shared/GridNodeServer.java\nindex c859d010f1..c36122ccc9 100644\n--- a/java/server/src/org/openqa/grid/shared/GridNodeServer.java\n+++ b/java/server/src/org/openqa/grid/shared/GridNodeServer.java\n@@ -17,8 +17,16 @@\n \n package org.openqa.grid.shared;\n \n+import org.openqa.grid.internal.utils.configuration.StandaloneConfiguration;\n+\n+import java.util.Map;\n+\n+import javax.servlet.Servlet;\n+\n public interface GridNodeServer {\n   void boot() throws Exception;\n   void stop();\n   int getRealPort();\n+  void setExtraServlets(Map<String, Class<? extends Servlet>> extraServlets);\n+  void setConfiguration(StandaloneConfiguration configuration);\n }\n\ndiff --git a/java/server/src/org/openqa/selenium/remote/server/SeleniumServer.java b/java/server/src/org/openqa/selenium/remote/server/SeleniumServer.java\nindex cdbd00c63e..e55755226e 100644\n--- a/java/server/src/org/openqa/selenium/remote/server/SeleniumServer.java\n+++ b/java/server/src/org/openqa/selenium/remote/server/SeleniumServer.java\n@@ -31,6 +31,8 @@\n import org.seleniumhq.jetty9.servlet.ServletContextHandler;\n import org.seleniumhq.jetty9.util.thread.QueuedThreadPool;\n \n+import java.util.Map;\n+\n import javax.servlet.Servlet;\n \n /**\n@@ -41,6 +43,7 @@ public class SeleniumServer implements GridNodeServer {\n   private Server server;\n   private DefaultDriverSessions driverSessions;\n   private StandaloneConfiguration configuration;\n+  private Map<String, Class<? extends Servlet>> extraServlets;\n \n   private Thread shutDownHook;\n   /**\n@@ -79,10 +82,22 @@ private void addRcSupport(ServletContextHandler handler) {\n     }\n   }\n \n+  private void addExtraServlets(ServletContextHandler handler) {\n+    if (extraServlets != null && extraServlets.size() > 0) {\n+      for (String path : extraServlets.keySet()) {\n+        handler.addServlet(extraServlets.get(path), path);\n+      }\n+    }\n+  }\n+\n   public void setConfiguration(StandaloneConfiguration configuration) {\n     this.configuration = configuration;\n   }\n \n+  public void setExtraServlets(Map<String, Class<? extends Servlet>> extraServlets) {\n+    this.extraServlets = extraServlets;\n+  }\n+\n   public void boot() {\n     if (configuration.jettyThreads != null && configuration.jettyThreads > 0) {\n       server = new Server(new QueuedThreadPool(configuration.jettyThreads));\n@@ -107,6 +122,7 @@ public void boot() {\n     }\n \n     addRcSupport(handler);\n+    addExtraServlets(handler);\n \n     server.setHandler(handler);\n \n", "test_patch": "diff --git a/java/server/test/org/openqa/grid/internal/utils/SelfRegisteringRemoteTest.java b/java/server/test/org/openqa/grid/internal/utils/SelfRegisteringRemoteTest.java\nindex 87ffa6faec..6103759ff9 100644\n--- a/java/server/test/org/openqa/grid/internal/utils/SelfRegisteringRemoteTest.java\n+++ b/java/server/test/org/openqa/grid/internal/utils/SelfRegisteringRemoteTest.java\n@@ -22,37 +22,87 @@\n import org.junit.Test;\n import org.openqa.grid.common.GridRole;\n import org.openqa.grid.common.RegistrationRequest;\n+import org.openqa.grid.internal.utils.configuration.GridNodeConfiguration;\n+import org.openqa.grid.internal.utils.configuration.StandaloneConfiguration;\n import org.openqa.grid.shared.GridNodeServer;\n+import org.openqa.grid.web.servlet.DisplayHelpServlet;\n+import org.openqa.grid.web.servlet.ResourceServlet;\n \n import java.net.MalformedURLException;\n+import java.util.ArrayList;\n+import java.util.Map;\n+\n+import javax.servlet.Servlet;\n \n public class SelfRegisteringRemoteTest {\n \n+  private final class DummyGridNodeServer implements GridNodeServer {\n+    public Map<String, Class<? extends Servlet>> extraServlets;\n+ \n+    @Override\n+    public void boot() throws Exception { }\n+\n+    @Override\n+    public void stop() { }\n+\n+    @Override\n+    public int getRealPort() {\n+      return 1234;\n+    }\n+\n+    @Override\n+    public void setConfiguration(StandaloneConfiguration configuration) { }\n+\n+    @Override\n+    public void setExtraServlets(Map<String, Class<? extends Servlet>> extraServlets) {\n+      this.extraServlets = extraServlets;\n+    }\n+  }\n+\n+\n   @Test\n   public void testHubRegistrationWhenPortExplicitlyZeroedOut() throws MalformedURLException {\n-    GridNodeServer server = new GridNodeServer() {\n-      @Override\n-      public void boot() throws Exception {}\n-\n-      @Override\n-      public void stop() {}\n-\n-      @Override\n-      public int getRealPort() {\n-        return 1234;\n-      }\n-    };\n+    GridNodeServer server = new DummyGridNodeServer();\n     RegistrationRequest config = new RegistrationRequest();\n     config.setRole(GridRole.NODE);\n     config.getConfiguration().port = 0;\n     config.getConfiguration().hub = \"http://locahost:4444\";\n     SelfRegisteringRemote remote = new SelfRegisteringRemote(config);\n     remote.setRemoteServer(server);\n     remote.updateConfigWithRealPort();\n-    String host = (String) remote.getConfiguration().getRemoteHost();\n+    String host = remote.getConfiguration().getRemoteHost();\n     assertEquals(\"Ensure that the remote host is updated properly\",\n                  \"http://localhost:\" + server.getRealPort(), host);\n \n   }\n \n+  @Test\n+  public void testSetExtraServlets() throws Exception {\n+    GridNodeServer server = new DummyGridNodeServer();\n+\n+    GridNodeConfiguration configuration = new GridNodeConfiguration();\n+    configuration.servlets = new ArrayList<>();\n+    configuration.servlets.add(\"org.openqa.grid.web.servlet.DisplayHelpServlet\");\n+\n+    RegistrationRequest registrationRequest = RegistrationRequest.build(configuration);\n+    SelfRegisteringRemote remote = new SelfRegisteringRemote(registrationRequest);\n+\n+    // there should be two servlets on the remote's map -- The resource servlet, and the one\n+    // we added above.\n+    assertEquals(2, remote.getNodeServlets().size());\n+    assertEquals(ResourceServlet.class, remote.getNodeServlets().get(\"/resources/*\"));\n+    assertEquals(DisplayHelpServlet.class,\n+                 remote.getNodeServlets().get(\"/extra/DisplayHelpServlet/*\"));\n+\n+    // set the sever and make sure it gets the extra servlets\n+    remote.setRemoteServer(server);\n+    remote.startRemoteServer(); // does not actually start anything.\n+\n+    // verify the expected extra servlets also made it to the server instance\n+    assertEquals(2, ((DummyGridNodeServer) server).extraServlets.size());\n+    assertEquals(ResourceServlet.class,\n+                 ((DummyGridNodeServer) server).extraServlets.get(\"/resources/*\"));\n+    assertEquals(DisplayHelpServlet.class,\n+                 ((DummyGridNodeServer) server).extraServlets.get(\"/extra/DisplayHelpServlet/*\"));\n+  }\n }\n", "instance_id": "seleniumhq__selenium-2683", "fixed_tests": {}, "failed_tests": [], "skipped_tests": [], "run_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "test_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "fix_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "f2p_tests": {}, "p2p_tests": {}, "s2p_tests": {}, "n2p_tests": {}}
{"org": "seleniumhq", "repo": "selenium", "number": 2689, "title": "Add the ability to optionally disable some of the default grid servlets", "body": "- [X] By placing an `X` in the preceding checkbox, I verify that I have signed the [Contributor License Agreement](https://github.com/SeleniumHQ/selenium/blob/master/CONTRIBUTING.md#step-6-sign-the-cla)\n\n---\n\nThis change set proposes that we allow people to save resources and/or harden their deployments by providing a path to disable defalt hub and/or node servlets that the protocol does not require.\n", "state": "closed", "base": {"label": "SeleniumHQ:master", "ref": "master", "sha": "21943928fe8885e128900cfbf50217f035df4dcb"}, "resolved_issues": [], "fix_patch": "diff --git a/java/server/src/org/openqa/grid/internal/utils/SelfRegisteringRemote.java b/java/server/src/org/openqa/grid/internal/utils/SelfRegisteringRemote.java\nindex 353ed588f5..8e6e3d846f 100644\n--- a/java/server/src/org/openqa/grid/internal/utils/SelfRegisteringRemote.java\n+++ b/java/server/src/org/openqa/grid/internal/utils/SelfRegisteringRemote.java\n@@ -84,7 +84,9 @@ public SelfRegisteringRemote(RegistrationRequest config) {\n     }\n \n     // add the resource servlet for nodes\n-    nodeServlets.put(\"/resources/*\", ResourceServlet.class);\n+    if (!nodeConfig.getConfiguration().isWithOutServlet(ResourceServlet.class)) {\n+      nodeServlets.put(\"/resources/*\", ResourceServlet.class);\n+    }\n \n     // add the user supplied servlet(s) for nodes\n     addExtraServlets(nodeConfig.getConfiguration().servlets);\n\ndiff --git a/java/server/src/org/openqa/grid/internal/utils/configuration/GridConfiguration.java b/java/server/src/org/openqa/grid/internal/utils/configuration/GridConfiguration.java\nindex 2c5f8911f2..9f637ee5ea 100644\n--- a/java/server/src/org/openqa/grid/internal/utils/configuration/GridConfiguration.java\n+++ b/java/server/src/org/openqa/grid/internal/utils/configuration/GridConfiguration.java\n@@ -25,6 +25,8 @@\n import java.util.List;\n import java.util.Map;\n \n+import javax.servlet.Servlet;\n+\n public class GridConfiguration extends StandaloneConfiguration {\n \n   @Parameter(\n@@ -54,10 +56,16 @@ public class GridConfiguration extends StandaloneConfiguration {\n \n   @Parameter(\n     names = {\"-servlet\", \"-servlets\"},\n-    description = \"<String> : list of extra servlets this hub will display. Allows to present custom view of the hub for monitoring and management purposes. Specify multiple on the command line: -servlet tld.company.ServletA -servlet tld.company.ServletB. The servlet must exist in the path: /grid/admin/ServletA /grid/admin/ServletB\"\n+    description = \"<String> : list of extra servlets the grid (hub or node) will make available. Specify multiple on the command line: -servlet tld.company.ServletA -servlet tld.company.ServletB. The servlet must exist in the path: /grid/admin/ServletA /grid/admin/ServletB\"\n   )\n   public List<String> servlets;\n \n+  @Parameter(\n+    names = {\"-withoutServlet\", \"-withoutServlets\"},\n+    description = \"<String> : list of default (hub or node) servlets to disable. Advanced use cases only. Not all default servlets can be disabled. Specify multiple on the command line: -withoutServlet tld.company.ServletA -withoutServlet tld.company.ServletB\"\n+  )\n+  public List<String> withoutServlets;\n+\n   /**\n    * replaces this instance of configuration value with the 'other' value if it's set.\n    * @param other\n@@ -75,6 +83,19 @@ public void merge(GridConfiguration other) {\n     if (other.servlets != null) {\n       servlets = other.servlets;\n     }\n+    if (other.withoutServlets != null) {\n+      withoutServlets = other.withoutServlets;\n+    }\n+  }\n+\n+  /**\n+   * @param servlet the {@link Servlet} to look for\n+   * @return whether this configuration requests a 'default' servlet to be omitted\n+   */\n+  public boolean isWithOutServlet(Class <? extends Servlet> servlet) {\n+    return withoutServlets != null &&\n+           servlet != null &&\n+           withoutServlets.contains(servlet.getCanonicalName());\n   }\n \n   @Override\n@@ -86,6 +107,7 @@ public String toString(String format) {\n     sb.append(toString(format, \"host\", host));\n     sb.append(toString(format, \"maxSession\", maxSession));\n     sb.append(toString(format, \"servlets\", servlets));\n+    sb.append(toString(format, \"withoutServlets\", withoutServlets));\n     return sb.toString();\n   }\n }\n\ndiff --git a/java/server/src/org/openqa/grid/web/Hub.java b/java/server/src/org/openqa/grid/web/Hub.java\nindex e4cc95620f..0bf15f4af8 100644\n--- a/java/server/src/org/openqa/grid/web/Hub.java\n+++ b/java/server/src/org/openqa/grid/web/Hub.java\n@@ -103,6 +103,41 @@ public Hub(GridHubConfiguration gridHubConfiguration) {\n     }\n   }\n \n+  private void addDefaultServlets(ServletContextHandler handler) {\n+    // add mandatory default servlets\n+    handler.addServlet(RegistrationServlet.class.getName(), \"/grid/register/*\");\n+\n+    handler.addServlet(DriverServlet.class.getName(), \"/wd/hub/*\");\n+    handler.addServlet(DriverServlet.class.getName(), \"/selenium-server/driver/*\");\n+\n+    handler.addServlet(ProxyStatusServlet.class.getName(), \"/grid/api/proxy/*\");\n+\n+    handler.addServlet(HubStatusServlet.class.getName(), \"/grid/api/hub/*\");\n+\n+    handler.addServlet(TestSessionStatusServlet.class.getName(), \"/grid/api/testsession/*\");\n+\n+    // add optional default servlets\n+    if (!config.isWithOutServlet(ResourceServlet.class)) {\n+      handler.addServlet(ResourceServlet.class.getName(), \"/grid/resources/*\");\n+    }\n+\n+    if (!config.isWithOutServlet(DisplayHelpServlet.class)) {\n+      handler.addServlet(DisplayHelpServlet.class.getName(), \"/*\");\n+    }\n+\n+    if (!config.isWithOutServlet(ConsoleServlet.class)) {\n+      handler.addServlet(ConsoleServlet.class.getName(), \"/grid/console/*\");\n+    }\n+\n+    if (!config.isWithOutServlet(LifecycleServlet.class)) {\n+      handler.addServlet(LifecycleServlet.class.getName(), \"/lifecycle-manager/*\");\n+    }\n+\n+    if (!config.isWithOutServlet(Grid1HeartbeatServlet.class)) {\n+      handler.addServlet(Grid1HeartbeatServlet.class.getName(), \"/heartbeat\");\n+    }\n+  }\n+\n   private void initServer() {\n     try {\n       if (config.jettyMaxThreads>0) {\n@@ -144,26 +179,7 @@ private void initServer() {\n \n       root.setAttribute(Registry.KEY, registry);\n \n-      root.addServlet(DisplayHelpServlet.class.getName(), \"/*\");\n-\n-      root.addServlet(ConsoleServlet.class.getName(), \"/grid/console/*\");\n-\n-      root.addServlet(RegistrationServlet.class.getName(), \"/grid/register/*\");\n-\n-      root.addServlet(DriverServlet.class.getName(), \"/wd/hub/*\");\n-      root.addServlet(DriverServlet.class.getName(), \"/selenium-server/driver/*\");\n-\n-      root.addServlet(ResourceServlet.class.getName(), \"/grid/resources/*\");\n-\n-      root.addServlet(ProxyStatusServlet.class.getName(), \"/grid/api/proxy/*\");\n-\n-      root.addServlet(HubStatusServlet.class.getName(), \"/grid/api/hub/*\");\n-\n-      root.addServlet(TestSessionStatusServlet.class.getName(), \"/grid/api/testsession/*\");\n-\n-      root.addServlet(LifecycleServlet.class.getName(), \"/lifecycle-manager/*\");\n-\n-      root.addServlet(Grid1HeartbeatServlet.class.getName(), \"/heartbeat\");\n+      addDefaultServlets(root);\n \n       // Load any additional servlets provided by the user.\n       for (Map.Entry<String, Class<? extends Servlet>> entry : extraServlet.entrySet()) {\n", "test_patch": "diff --git a/java/server/test/org/openqa/grid/internal/utils/GridHubConfigurationTest.java b/java/server/test/org/openqa/grid/internal/utils/GridHubConfigurationTest.java\nindex 0a99ee3754..8af763ec3a 100644\n--- a/java/server/test/org/openqa/grid/internal/utils/GridHubConfigurationTest.java\n+++ b/java/server/test/org/openqa/grid/internal/utils/GridHubConfigurationTest.java\n@@ -18,19 +18,23 @@\n package org.openqa.grid.internal.utils;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n \n import com.beust.jcommander.JCommander;\n \n import org.junit.Test;\n-import org.openqa.grid.common.RegistrationRequest;\n import org.openqa.grid.internal.utils.configuration.GridHubConfiguration;\n+import org.openqa.grid.web.servlet.ResourceServlet;\n+\n+import java.util.ArrayList;\n \n public class GridHubConfigurationTest {\n \n   @Test\n   public void testGetTimeout() throws Exception {\n     GridHubConfiguration gridHubConfiguration = new GridHubConfiguration();\n-    assertEquals(300000, gridHubConfiguration.timeout.longValue()); // From DefaultHub.json file\n+    assertEquals(1800, gridHubConfiguration.timeout.longValue()); // From the configuration default value\n     gridHubConfiguration.timeout = 123;\n     assertEquals(123, gridHubConfiguration.timeout.longValue());\n   }\n@@ -48,7 +52,17 @@ public void commandLineParsing() throws Exception {\n     GridHubConfiguration gridHubConfiguration = new GridHubConfiguration();\n     String[] args = \"-timeout 32123 -browserTimeout 456\".split(\" \");\n     new JCommander(gridHubConfiguration, args);\n-    assertEquals(32123000, gridHubConfiguration.timeout.longValue());\n-    assertEquals(456000, gridHubConfiguration.browserTimeout.longValue());\n+    assertEquals(32123L, gridHubConfiguration.timeout.longValue());\n+    assertEquals(456L, gridHubConfiguration.browserTimeout.longValue());\n+  }\n+\n+  @Test\n+  public void testWithOutServlets() {\n+    GridHubConfiguration ghc = new GridHubConfiguration();\n+    assertFalse(ghc.isWithOutServlet(ResourceServlet.class));\n+\n+    ghc.withoutServlets = new ArrayList<>();\n+    ghc.withoutServlets.add(ResourceServlet.class.getCanonicalName());\n+    assertTrue(ghc.isWithOutServlet(ResourceServlet.class));\n   }\n }\n", "instance_id": "seleniumhq__selenium-2689", "fixed_tests": {}, "failed_tests": [], "skipped_tests": [], "run_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "test_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "fix_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "f2p_tests": {}, "p2p_tests": {}, "s2p_tests": {}, "n2p_tests": {}}
{"org": "seleniumhq", "repo": "selenium", "number": 2697, "title": "Fix StandaloneConfiguration#toString()", "body": "- [X] By placing an `X` in the preceding checkbox, I verify that I have signed the [Contributor License Agreement](https://github.com/SeleniumHQ/selenium/blob/master/CONTRIBUTING.md#step-6-sign-the-cla)\n\n---\n\nThe toString method was incorrectly processing Collections\nand Maps. This change set adds considerations for them.\nAlso in this change set;\n- Updated tests for GridHubConfigurationTest\n- Trim the result of getting coreVersion in ConsoleServlet\n", "state": "closed", "base": {"label": "SeleniumHQ:master", "ref": "master", "sha": "4c75ef025f3b0cae5b8462266370d015843bc3ac"}, "resolved_issues": [], "fix_patch": "diff --git a/java/server/src/org/openqa/grid/internal/utils/configuration/StandaloneConfiguration.java b/java/server/src/org/openqa/grid/internal/utils/configuration/StandaloneConfiguration.java\nindex bd0b513804..fdf122532d 100644\n--- a/java/server/src/org/openqa/grid/internal/utils/configuration/StandaloneConfiguration.java\n+++ b/java/server/src/org/openqa/grid/internal/utils/configuration/StandaloneConfiguration.java\n@@ -23,7 +23,9 @@\n import com.beust.jcommander.Parameter;\n \n import java.util.Arrays;\n+import java.util.Collection;\n import java.util.List;\n+import java.util.Map;\n \n public class StandaloneConfiguration {\n \n@@ -135,8 +137,10 @@ public StringBuilder toString(String format, String name, Object value) {\n       iterator = Arrays.asList(value);\n     }\n     for (Object v : iterator) {\n-      if (value != null) {\n-        sb.append(String.format(format, name, value));\n+      if (v != null &&\n+          !(v instanceof Map && ((Map) v).isEmpty()) &&\n+          !(v instanceof Collection && ((Collection) v).isEmpty())) {\n+        sb.append(String.format(format, name, v));\n       }\n     }\n     return sb;\n\ndiff --git a/java/server/src/org/openqa/grid/web/servlet/beta/ConsoleServlet.java b/java/server/src/org/openqa/grid/web/servlet/beta/ConsoleServlet.java\nindex a0442b0085..76cc0db1ae 100644\n--- a/java/server/src/org/openqa/grid/web/servlet/beta/ConsoleServlet.java\n+++ b/java/server/src/org/openqa/grid/web/servlet/beta/ConsoleServlet.java\n@@ -261,7 +261,7 @@ private void getVersion() {\n     }\n     try {\n       Manifest manifest = new Manifest(stream);\n-      coreVersion = manifest.getEntries().get(\"Build-Info\").getValue(\"Selenium-Version\");\n+      coreVersion = manifest.getEntries().get(\"Build-Info\").getValue(\"Selenium-Version\").trim();\n     } catch (IOException e) {\n       log.severe(\"Cannot load version from VERSION.txt\" + e.getMessage());\n     }\n", "test_patch": "diff --git a/java/server/test/org/openqa/grid/internal/utils/GridHubConfigurationTest.java b/java/server/test/org/openqa/grid/internal/utils/GridHubConfigurationTest.java\nindex 8af763ec3a..421ba706a5 100644\n--- a/java/server/test/org/openqa/grid/internal/utils/GridHubConfigurationTest.java\n+++ b/java/server/test/org/openqa/grid/internal/utils/GridHubConfigurationTest.java\n@@ -20,6 +20,7 @@\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertNull;\n \n import com.beust.jcommander.JCommander;\n \n@@ -32,17 +33,15 @@\n public class GridHubConfigurationTest {\n \n   @Test\n-  public void testGetTimeout() throws Exception {\n+  public void testSetTimeout() throws Exception {\n     GridHubConfiguration gridHubConfiguration = new GridHubConfiguration();\n-    assertEquals(1800, gridHubConfiguration.timeout.longValue()); // From the configuration default value\n     gridHubConfiguration.timeout = 123;\n     assertEquals(123, gridHubConfiguration.timeout.longValue());\n   }\n \n   @Test\n-  public void testGetBrowserTimeout() throws Exception {\n+  public void testSetBrowserTimeout() throws Exception {\n     GridHubConfiguration gridHubConfiguration = new GridHubConfiguration();\n-    assertEquals(0, gridHubConfiguration.browserTimeout.longValue());// From DefaultHub.json file\n     gridHubConfiguration.browserTimeout = 1233;\n     assertEquals(1233, gridHubConfiguration.browserTimeout.longValue());\n   }\n@@ -65,4 +64,50 @@ public void testWithOutServlets() {\n     ghc.withoutServlets.add(ResourceServlet.class.getCanonicalName());\n     assertTrue(ghc.isWithOutServlet(ResourceServlet.class));\n   }\n+\n+  @Test\n+  public void testDefaults() {\n+    GridHubConfiguration ghc = new GridHubConfiguration();\n+    assertEquals(\"standalone\", ghc.role);\n+    assertEquals(0L, ghc.browserTimeout.longValue());\n+    assertEquals(false, ghc.debug);\n+    assertEquals(false, ghc.help);\n+    assertEquals(false, ghc.logLongForm);\n+    assertEquals(1800L, ghc.timeout.longValue());\n+    assertEquals(5000L, ghc.cleanUpCycle.longValue());\n+    assertEquals(1L, ghc.maxSession.longValue());\n+    assertEquals(-1L, ghc.jettyMaxThreads.longValue());\n+    assertEquals(\"org.openqa.grid.internal.utils.DefaultCapabilityMatcher\",\n+                    ghc.capabilityMatcher.getClass().getCanonicalName());\n+    assertEquals(-1L, ghc.newSessionWaitTimeout.longValue());\n+    assertEquals(true, ghc.throwOnCapabilityNotPresent);\n+    assertTrue(ghc.servlets.isEmpty());\n+    assertTrue(ghc.custom.isEmpty());\n+    assertNull(ghc.withoutServlets);\n+    assertNull(ghc.hubConfig);\n+    assertNull(ghc.log);\n+    assertNull(ghc.prioritizer);\n+    assertNull(ghc.host);\n+    assertNull(ghc.port);\n+  }\n+\n+  @Test\n+  public void testToString() {\n+    GridHubConfiguration ghc = new GridHubConfiguration();\n+\n+    assertTrue(ghc.toString().contains(\"-role standalone \"));\n+    assertFalse(ghc.toString().contains(\"-servlets\"));\n+    assertFalse(ghc.toString().contains(\"custom\"));\n+\n+    ghc = new GridHubConfiguration();\n+    String[] args = (\"-servlet com.foo.bar.ServletA -servlet com.foo.bar.ServletB\"\n+                     + \" -custom foo=bar,bar=baz\").split(\" \");\n+    new JCommander(ghc, args);\n+    \n+    assertTrue(ghc.toString().contains(\"-servlets com.foo.bar.ServletA\"\n+                                       + \" -servlets com.foo.bar.ServletB\"));\n+    assertTrue(ghc.toString().contains(\"custom {\"));\n+    assertTrue(ghc.toString().contains(\"bar=baz\"));\n+    assertTrue(ghc.toString().contains(\"foo=bar\"));\n+  }\n }\n", "instance_id": "seleniumhq__selenium-2697", "fixed_tests": {}, "failed_tests": [], "skipped_tests": [], "run_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "test_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "fix_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "f2p_tests": {}, "p2p_tests": {}, "s2p_tests": {}, "n2p_tests": {}}
{"org": "seleniumhq", "repo": "selenium", "number": 2717, "title": "Changed all bare excepts to use base Exception class", "body": "- [X] By placing an `X` in the preceding checkbox, I verify that I have signed the [Contributor License Agreement](https://github.com/SeleniumHQ/selenium/blob/master/CONTRIBUTING.md#step-6-sign-the-cla)\n\nIn Python a bare except clause will catch any transient system errors. This is not recommended except in a very few exceptional cases, which none apply for this project. This PR fixes it so that uses the base exception class `Exception` so that some system errors do bubble up. \n", "state": "closed", "base": {"label": "SeleniumHQ:master", "ref": "master", "sha": "73b4d1c659d12e5012c92a009ab90f2dafedf7b9"}, "resolved_issues": [], "fix_patch": "diff --git a/py/selenium/webdriver/chrome/webdriver.py b/py/selenium/webdriver/chrome/webdriver.py\nindex 17ff1dd5be..74a753600a 100644\n--- a/py/selenium/webdriver/chrome/webdriver.py\n+++ b/py/selenium/webdriver/chrome/webdriver.py\n@@ -67,7 +67,7 @@ def __init__(self, executable_path=\"chromedriver\", port=0,\n                 command_executor=ChromeRemoteConnection(\n                     remote_server_addr=self.service.service_url),\n                 desired_capabilities=desired_capabilities)\n-        except:\n+        except Exception:\n             self.quit()\n             raise\n         self._is_remote = False\n@@ -83,7 +83,7 @@ def quit(self):\n         \"\"\"\n         try:\n             RemoteWebDriver.quit(self)\n-        except:\n+        except Exception:\n             # We don't care about the message because something probably has gone wrong\n             pass\n         finally:\n\ndiff --git a/py/selenium/webdriver/common/utils.py b/py/selenium/webdriver/common/utils.py\nindex c3097d02f1..98b50db35b 100644\n--- a/py/selenium/webdriver/common/utils.py\n+++ b/py/selenium/webdriver/common/utils.py\n@@ -132,7 +132,7 @@ def is_url_connectable(port):\n             return True\n         else:\n             return False\n-    except:\n+    except Exception:\n         return False\n \n \n\ndiff --git a/py/selenium/webdriver/firefox/firefox_profile.py b/py/selenium/webdriver/firefox/firefox_profile.py\nindex d4d0b6c6ce..500e32460b 100644\n--- a/py/selenium/webdriver/firefox/firefox_profile.py\n+++ b/py/selenium/webdriver/firefox/firefox_profile.py\n@@ -232,10 +232,10 @@ def _read_existing_userjs(self, userjs):\n                     matches = re.search(PREF_RE, usr)\n                     try:\n                         self.default_preferences[matches.group(1)] = json.loads(matches.group(2))\n-                    except:\n+                    except Exception:\n                         warnings.warn(\"(skipping) failed to json.loads existing preference: \" +\n                                       matches.group(1) + matches.group(2))\n-        except:\n+        except Exception:\n             # The profile given hasn't had any changes made, i.e no users.js\n             pass\n \n\ndiff --git a/py/selenium/webdriver/phantomjs/webdriver.py b/py/selenium/webdriver/phantomjs/webdriver.py\nindex 40ca694011..3dcadbcbeb 100644\n--- a/py/selenium/webdriver/phantomjs/webdriver.py\n+++ b/py/selenium/webdriver/phantomjs/webdriver.py\n@@ -56,7 +56,7 @@ def __init__(self, executable_path=\"phantomjs\",\n                 self,\n                 command_executor=self.service.service_url,\n                 desired_capabilities=desired_capabilities)\n-        except:\n+        except Exception:\n             self.quit()\n             raise\n \n@@ -69,7 +69,7 @@ def quit(self):\n         \"\"\"\n         try:\n             RemoteWebDriver.quit(self)\n-        except:\n+        except Exception:\n             # We don't care about the message because something probably has gone wrong\n             pass\n         finally:\n\ndiff --git a/py/selenium/webdriver/remote/file_detector.py b/py/selenium/webdriver/remote/file_detector.py\nindex 9109b6de43..caec9c30fb 100644\n--- a/py/selenium/webdriver/remote/file_detector.py\n+++ b/py/selenium/webdriver/remote/file_detector.py\n@@ -53,6 +53,6 @@ def is_local_file(self, *keys):\n         try:\n             if os.path.isfile(file_path):\n                 return file_path\n-        except:\n+        except Exception:\n             pass\n         return None\n", "test_patch": "diff --git a/py/test/selenium/common/utils.py b/py/test/selenium/common/utils.py\nindex 3e4016d470..2d76148ba5 100644\n--- a/py/test/selenium/common/utils.py\n+++ b/py/test/selenium/common/utils.py\n@@ -36,7 +36,7 @@ def start_server(module):\n         _socket.connect((SERVER_ADDR, DEFAULT_PORT))\n         print(\"The remote driver server is already running or something else\"\n               \"is using port %d, continuing...\" % DEFAULT_PORT)\n-    except:\n+    except Exception:\n         print(\"Starting the remote driver server\")\n         module.server_proc = subprocess.Popen(\n             \"java -jar %s\" % SERVER_PATH,\n@@ -63,5 +63,5 @@ def stop_server(module):\n     try:\n         os.kill(module.server_proc.pid, signal.SIGTERM)\n         time.sleep(5)\n-    except:\n+    except Exception:\n         pass\n\ndiff --git a/py/test/selenium/webdriver/common/alerts_tests.py b/py/test/selenium/webdriver/common/alerts_tests.py\nindex d3c3b293b2..06809e9d52 100644\n--- a/py/test/selenium/webdriver/common/alerts_tests.py\n+++ b/py/test/selenium/webdriver/common/alerts_tests.py\n@@ -280,6 +280,6 @@ def _loadPage(self, name):\n         try:\n             # just in case a previous test left open an alert\n             self.driver.switch_to.alert().dismiss()\n-        except:\n+        except Exception:\n             pass\n         self.driver.get(self._pageURL(name))\n\ndiff --git a/py/test/selenium/webdriver/common/element_attribute_tests.py b/py/test/selenium/webdriver/common/element_attribute_tests.py\nindex cb4a97e545..a7632e1bc3 100644\n--- a/py/test/selenium/webdriver/common/element_attribute_tests.py\n+++ b/py/test/selenium/webdriver/common/element_attribute_tests.py\n@@ -96,7 +96,7 @@ def testShouldThrowExceptionIfSendingKeysToElementDisabledUsingRandomDisabledStr\n         try:\n             disabledTextElement1.send_keys(\"foo\")\n             self.fail(\"Should have thrown exception\")\n-        except:\n+        except Exception:\n             pass\n \n         self.assertEqual(\"\", disabledTextElement1.text)\n@@ -105,7 +105,7 @@ def testShouldThrowExceptionIfSendingKeysToElementDisabledUsingRandomDisabledStr\n         try:\n             disabledTextElement2.send_keys(\"bar\")\n             self.fail(\"Should have thrown exception\")\n-        except:\n+        except Exception:\n             pass\n         self.assertEqual(\"\", disabledTextElement2.text)\n \n\ndiff --git a/py/test/selenium/webdriver/common/interactions_tests.py b/py/test/selenium/webdriver/common/interactions_tests.py\nindex ddba0de760..b590c59f1e 100644\n--- a/py/test/selenium/webdriver/common/interactions_tests.py\n+++ b/py/test/selenium/webdriver/common/interactions_tests.py\n@@ -71,7 +71,7 @@ def _isElementAvailable(self, id):\n         try:\n             self.driver.find_element_by_id(id)\n             return True\n-        except:\n+        except Exception:\n             return False\n \n     def testDragAndDrop(self):\n\ndiff --git a/py/test/selenium/webdriver/common/network.py b/py/test/selenium/webdriver/common/network.py\nindex c4211fd4fb..006033b270 100644\n--- a/py/test/selenium/webdriver/common/network.py\n+++ b/py/test/selenium/webdriver/common/network.py\n@@ -35,7 +35,7 @@ def get_interface_ip(ifname):\n def get_lan_ip():\n     try:\n         ip = socket.gethostbyname(socket.gethostname())\n-    except:\n+    except Exception:\n         return '0.0.0.0'\n     if ip.startswith(\"127.\") and os.name != \"nt\":\n         interfaces = [\"eth0\", \"eth1\", \"eth2\", \"en0\", \"en1\", \"en2\", \"en3\",\n\ndiff --git a/py/test/selenium/webdriver/firefox/ff_profile_tests.py b/py/test/selenium/webdriver/firefox/ff_profile_tests.py\nindex 72c6923f26..f5bfd3a0bc 100644\n--- a/py/test/selenium/webdriver/firefox/ff_profile_tests.py\n+++ b/py/test/selenium/webdriver/firefox/ff_profile_tests.py\n@@ -209,7 +209,7 @@ def test_autodetect_proxy_is_set_in_profile(self):\n     def teardown_method(self, method):\n         try:\n             self.driver.quit()\n-        except:\n+        except Exception:\n             pass  # don't care since we may have killed the browser above\n         self.webserver.stop()\n \n@@ -226,5 +226,5 @@ def _loadPage(self, name):\n def teardown_module(module):\n     try:\n         TestFirefoxProfile.driver.quit()\n-    except:\n+    except Exception:\n         pass  # Don't Care since we may have killed the browser above\n\ndiff --git a/py/test/selenium/webdriver/firefox/mn_binary_tests.py b/py/test/selenium/webdriver/firefox/mn_binary_tests.py\nindex 3f6702df10..4c8e15cea6 100644\n--- a/py/test/selenium/webdriver/firefox/mn_binary_tests.py\n+++ b/py/test/selenium/webdriver/firefox/mn_binary_tests.py\n@@ -42,5 +42,5 @@ def test_invalid_binary_obj(self):\n     def teardown_method(self, method):\n         try:\n             self.driver.quit()\n-        except:\n+        except Exception:\n             pass\n\ndiff --git a/py/test/selenium/webdriver/firefox/mn_launcher_tests.py b/py/test/selenium/webdriver/firefox/mn_launcher_tests.py\nindex e078877785..2a8e0f07cd 100644\n--- a/py/test/selenium/webdriver/firefox/mn_launcher_tests.py\n+++ b/py/test/selenium/webdriver/firefox/mn_launcher_tests.py\n@@ -30,12 +30,12 @@ def test_launch_and_close_browser(self):\n     def teardown_method(self, method):\n         try:\n             self.driver.quit()\n-        except:\n+        except Exception:\n             pass\n \n \n def teardown_module(module):\n     try:\n         TestMarionetteLauncher.driver.quit()\n-    except:\n+    except Exception:\n         pass\n\ndiff --git a/py/test/selenium/webdriver/firefox/mn_options_tests.py b/py/test/selenium/webdriver/firefox/mn_options_tests.py\nindex 784d09fd67..a395351e7c 100644\n--- a/py/test/selenium/webdriver/firefox/mn_options_tests.py\n+++ b/py/test/selenium/webdriver/firefox/mn_options_tests.py\n@@ -40,13 +40,13 @@ def test_we_can_pass_options(self):\n     def teardown_method(self, method):\n         try:\n             self.driver.quit()\n-        except:\n+        except Exception:\n             pass  # Don't care since we may have killed the browser above\n         self.webserver.stop()\n \n \n def teardown_module(module):\n     try:\n         TestOptions.driver.quit()\n-    except:\n+    except Exception:\n         pass  # Don't Care since we may have killed the browser above\n\ndiff --git a/py/test/selenium/webdriver/firefox/mn_set_context_tests.py b/py/test/selenium/webdriver/firefox/mn_set_context_tests.py\nindex a020c037ab..91a40676fb 100644\n--- a/py/test/selenium/webdriver/firefox/mn_set_context_tests.py\n+++ b/py/test/selenium/webdriver/firefox/mn_set_context_tests.py\n@@ -36,12 +36,12 @@ def teardown_method(self, method):\n         try:\n             self.driver.set_context(self.CONTENT)\n             self.driver.quit()\n-        except:\n+        except Exception:\n             pass  # Don't care since we may have killed the browser above\n \n \n def teardown_module(module):\n     try:\n         TestMarionetteSpecific.driver.quit()\n-    except:\n+    except Exception:\n         pass  # Don't Care since we may have killed the browser above\n", "instance_id": "seleniumhq__selenium-2717", "fixed_tests": {}, "failed_tests": [], "skipped_tests": [], "run_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "test_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "fix_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "f2p_tests": {}, "p2p_tests": {}, "s2p_tests": {}, "n2p_tests": {}}
{"org": "seleniumhq", "repo": "selenium", "number": 2718, "title": "[js] switchTo().window() should use a 'handle' parameter rather than `name`", "body": "- [x] By placing an `X` in the preceding checkbox, I verify that I have signed the [Contributor License Agreement](https://github.com/SeleniumHQ/selenium/blob/master/CONTRIBUTING.md#step-6-sign-the-cla)\n\nThis is to match the W3C Webdriver spec, and fixes `switchTo().window()` for use with geckodriver.\n\nNote that the python driver already uses `handle` rather than `name`\n\nI've tried running the tests locally, but either they are taking a very long time, or there's something wrong with them on my machine.\n", "state": "closed", "base": {"label": "SeleniumHQ:master", "ref": "master", "sha": "4d79679d2150cf7a7dc3ac8eec7b653c50a5f055"}, "resolved_issues": [], "fix_patch": "diff --git a/javascript/node/selenium-webdriver/lib/webdriver.js b/javascript/node/selenium-webdriver/lib/webdriver.js\nindex c63ac2bc43..13077b54ea 100644\n--- a/javascript/node/selenium-webdriver/lib/webdriver.js\n+++ b/javascript/node/selenium-webdriver/lib/webdriver.js\n@@ -1656,7 +1656,10 @@ class TargetLocator {\n   window(nameOrHandle) {\n     return this.driver_.schedule(\n         new command.Command(command.Name.SWITCH_TO_WINDOW).\n-            setParameter('name', nameOrHandle),\n+            // \"name\" supports the legacy drivers. \"handle\" is the W3C\n+            // compliant parameter.\n+            setParameter('name', nameOrHandle).\n+            setParameter('handle', nameOrHandle),\n         'WebDriver.switchTo().window(' + nameOrHandle + ')');\n   }\n \n", "test_patch": "diff --git a/javascript/node/selenium-webdriver/test/lib/webdriver_test.js b/javascript/node/selenium-webdriver/test/lib/webdriver_test.js\nindex b4870f64ad..d2d87ca3e0 100644\n--- a/javascript/node/selenium-webdriver/test/lib/webdriver_test.js\n+++ b/javascript/node/selenium-webdriver/test/lib/webdriver_test.js\n@@ -424,7 +424,10 @@ describe('WebDriver', function() {\n     let e = new error.NoSuchWindowError('window not found');\n     let executor = new FakeExecutor().\n         expect(CName.SWITCH_TO_WINDOW).\n-        withParameters({'name': 'foo'}).\n+        withParameters({\n+          'name': 'foo',\n+          'handle': 'foo'\n+        }).\n         andReturnError(e).\n         end();\n \n@@ -439,7 +442,10 @@ describe('WebDriver', function() {\n     let e = new error.NoSuchWindowError('window not found');\n     let executor = new FakeExecutor().\n         expect(CName.SWITCH_TO_WINDOW).\n-            withParameters({'name': 'foo'}).\n+            withParameters({\n+              'name': 'foo',\n+              'handle': 'foo'\n+            }).\n             andReturnError(e).\n         expect(CName.GET_TITLE).\n             andReturnSuccess('Google Search').\n@@ -456,7 +462,10 @@ describe('WebDriver', function() {\n     let e = new error.NoSuchWindowError('window not found');\n     let executor = new FakeExecutor().\n         expect(CName.SWITCH_TO_WINDOW).\n-            withParameters({'name':'foo'}).\n+            withParameters({\n+              'name': 'foo',\n+              'handle': 'foo'\n+            }).\n             andReturnError(e).\n         end();\n \n@@ -467,7 +476,10 @@ describe('WebDriver', function() {\n   it('testErrbacksThatReturnErrorsStillSwitchToCallbackChain', function() {\n     let executor = new FakeExecutor().\n         expect(CName.SWITCH_TO_WINDOW).\n-            withParameters({'name':'foo'}).\n+            withParameters({\n+              'name': 'foo',\n+              'handle': 'foo'\n+            }).\n             andReturnError(new error.NoSuchWindowError('window not found')).\n         end();\n \n@@ -479,7 +491,10 @@ describe('WebDriver', function() {\n \n   it('testErrbacksThrownCanOverrideOriginalError', function() {\n     let executor = new FakeExecutor().\n-        expect(CName.SWITCH_TO_WINDOW, {'name': 'foo'}).\n+        expect(CName.SWITCH_TO_WINDOW, {\n+          'name': 'foo',\n+          'handle': 'foo'\n+        }).\n         andReturnError(new error.NoSuchWindowError('window not found')).\n         end();\n \n@@ -572,7 +587,10 @@ describe('WebDriver', function() {\n       let e = new error.NoSuchWindowError('window not found');\n       let executor = new FakeExecutor().\n           expect(CName.GET_TITLE).\n-          expect(CName.SWITCH_TO_WINDOW, {'name': 'foo'}).\n+          expect(CName.SWITCH_TO_WINDOW, {\n+            'name': 'foo',\n+            'handle': 'foo'\n+          }).\n           andReturnError(e).\n           end();\n \n@@ -587,8 +605,11 @@ describe('WebDriver', function() {\n     it('canBeSuppressWhenTheyOccur', function() {\n       let executor = new FakeExecutor().\n           expect(CName.GET_TITLE).\n-          expect(CName.SWITCH_TO_WINDOW, {'name':'foo'}).\n-              andReturnError(new error.NoSuchWindowError('window not found')).\n+          expect(CName.SWITCH_TO_WINDOW, {\n+            'name': 'foo',\n+            'handle': 'foo'\n+          }).\n+          andReturnError(new error.NoSuchWindowError('window not found')).\n           expect(CName.CLOSE).\n           end();\n \n@@ -605,7 +626,10 @@ describe('WebDriver', function() {\n       let e = new error.NoSuchWindowError('window not found');\n       let executor = new FakeExecutor().\n           expect(CName.GET_TITLE).\n-          expect(CName.SWITCH_TO_WINDOW, {'name':'foo'}).\n+          expect(CName.SWITCH_TO_WINDOW, {\n+            'name': 'foo',\n+            'handle': 'foo'\n+          }).\n           andReturnError(e).\n           end();\n \n@@ -623,8 +647,11 @@ describe('WebDriver', function() {\n       let executor = new FakeExecutor().\n           expect(CName.GET_TITLE).\n           expect(CName.GET_CURRENT_URL).\n-          expect(CName.SWITCH_TO_WINDOW, {'name':'foo'}).\n-              andReturnError(new StubError()).\n+          expect(CName.SWITCH_TO_WINDOW, {\n+            'name': 'foo',\n+            'handle': 'foo'\n+          }).\n+          andReturnError(new StubError()).\n           expect(CName.CLOSE).\n           end();\n \n@@ -664,7 +691,10 @@ describe('WebDriver', function() {\n     it('fromAnErrbackSuppressesTheError', function() {\n       var count = 0;\n       let executor = new FakeExecutor().\n-          expect(CName.SWITCH_TO_WINDOW, {'name':'foo'}).\n+          expect(CName.SWITCH_TO_WINDOW, {\n+            'name': 'foo',\n+            'handle': 'foo'\n+          }).\n               andReturnError(new StubError()).\n           expect(CName.GET_CURRENT_URL).\n               andReturnSuccess('http://www.google.com').\n@@ -791,8 +821,11 @@ describe('WebDriver', function() {\n \n     it('hasANestedCommandThatFails', function() {\n       let executor = new FakeExecutor().\n-          expect(CName.SWITCH_TO_WINDOW, {'name': 'foo'}).\n-              andReturnError(new StubError()).\n+          expect(CName.SWITCH_TO_WINDOW, {\n+            'name': 'foo',\n+            'handle': 'foo'\n+          }).\n+          andReturnError(new StubError()).\n           end();\n \n       var driver = executor.createDriver();\n@@ -1505,6 +1538,39 @@ describe('WebDriver', function() {\n     });\n   });\n \n+  describe(\"switchTo()\", function() {\n+    describe(\"window\", function() {\n+      it('should return a resolved promise when the window is found', function() {\n+        let executor = new FakeExecutor().\n+            expect(CName.SWITCH_TO_WINDOW).\n+                withParameters({\n+                  'name': 'foo',\n+                  'handle': 'foo'\n+                }).\n+                andReturnSuccess().\n+            end();\n+\n+        executor.createDriver().switchTo().window('foo');\n+        return waitForIdle();\n+      });\n+\n+      it('should propogate exceptions', function() {\n+        let e = new error.NoSuchWindowError('window not found');\n+        let executor = new FakeExecutor().\n+            expect(CName.SWITCH_TO_WINDOW).\n+                withParameters({\n+                  'name': 'foo',\n+                  'handle': 'foo'\n+                }).\n+                andReturnError(e).\n+            end();\n+\n+        executor.createDriver().switchTo().window('foo');\n+        return waitForAbort().then(v => assert.strictEqual(v, e));\n+      });\n+    });\n+  });\n+\n   describe('elementEquality', function() {\n     it('isReflexive', function() {\n       var a = new WebElement({}, 'foo');\n\ndiff --git a/javascript/node/selenium-webdriver/test/window_test.js b/javascript/node/selenium-webdriver/test/window_test.js\nindex 8572b3fd87..6213d19ace 100644\n--- a/javascript/node/selenium-webdriver/test/window_test.js\n+++ b/javascript/node/selenium-webdriver/test/window_test.js\n@@ -18,6 +18,7 @@\n 'use strict';\n \n var Browser = require('..').Browser,\n+    By = require('..').By,\n     assert = require('../testing/assert'),\n     test = require('../lib/test');\n \n@@ -53,6 +54,26 @@ test.suite(function(env) {\n     changeSizeBy(-20, -20);\n   });\n \n+  test.it('can switch to a new window', function() {\n+    driver.get(test.Pages.xhtmlTestPage);\n+\n+    driver.getWindowHandle().then(function(handle) {\n+      driver.getAllWindowHandles().then(function(originalHandles) {\n+        driver.findElement(By.linkText(\"Open new window\")).click();\n+\n+        driver.wait(forNewWindowToBeOpened(originalHandles), 2000);\n+\n+        assert(driver.getTitle()).equalTo(\"XHTML Test Page\");\n+\n+        getNewWindowHandle(originalHandles).then(function(newHandle) {\n+          driver.switchTo().window(newHandle);\n+\n+          assert(driver.getTitle()).equalTo(\"We Arrive Here\")\n+        });\n+      });\n+    });\n+  });\n+\n   // See https://github.com/mozilla/geckodriver/issues/113\n   test.ignore(env.browsers(Browser.FIREFOX)).\n   it('can set the window position of the current window', function() {\n@@ -134,4 +155,21 @@ test.suite(function(env) {\n       });\n     };\n   }\n+\n+  function forNewWindowToBeOpened(originalHandles) {\n+    return function() {\n+      return driver.getAllWindowHandles().then(function(currentHandles) {\n+        return currentHandles.length > originalHandles.length;\n+      });\n+    };\n+  }\n+\n+  function getNewWindowHandle(originalHandles) {\n+    // Note: this assumes there's just one new window.\n+    return driver.getAllWindowHandles().then(function(currentHandles) {\n+      return currentHandles.filter(function(i) {\n+        return originalHandles.indexOf(i) < 0;\n+      })[0];\n+    });\n+  }\n });\n", "instance_id": "seleniumhq__selenium-2718", "fixed_tests": {}, "failed_tests": [], "skipped_tests": [], "run_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "test_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "fix_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "f2p_tests": {}, "p2p_tests": {}, "s2p_tests": {}, "n2p_tests": {}}
{"org": "seleniumhq", "repo": "selenium", "number": 2735, "title": "Fix #2727, combine -jettyThreads and -jettyMaxThreads", "body": "- [X] By placing an `X` in the preceding checkbox, I verify that I have signed the [Contributor License Agreement](https://github.com/SeleniumHQ/selenium/blob/master/CONTRIBUTING.md#step-6-sign-the-cla)\n## \n- Revert BaseRemoteProxy configuration load behavior\n  to Sel 2.x logic (seed from registry, then overlap\n  with the remote request)\n- Combine -jettyThreads (hidden, used by standalone\n  and node) and -jettyMaxThreads (not hidden, used\n  by hub) into -jettyMaxThreads which is NOT hidden\n  and is used by standalone, node, and hub\n\nAdditional changes;\n- Fix for 'id' which should have a default value\n  applied (according to its usage doc)\n- new GridHubConfiguration() - the role should\n  always be \"hub\"\n- new GridNodeConfiguration() - the role should\n  always be \"node\"\n- Configuration merge() behavior update/change;\n  - don't merge null 'other' values (pre-existing)\n  - don't merge empty collections and maps (new)\n- Add tests\n", "state": "closed", "base": {"label": "SeleniumHQ:master", "ref": "master", "sha": "be7ff6f9e62b0e9978008448c1f15d25d66af79b"}, "resolved_issues": [{"number": 2727, "title": "Selenium 3.0.0-beta3 node maxSession = 1 causes hub registration of default 5 instead of 1", "body": "## Meta -\n\nOS:  Windows 10\nSelenium Version:  \n3.0.0-beta3 node (win10) and 3.0.0-beta3 hub (linux)\nBrowser:  \nall\nBrowser Version:  \nany\n## Expected Behavior -\n\nSetting node maxSession = 1 should restrict node's active sessions to one.\n## Actual Behavior -\n\nSetting node maxSession = 1 via command line argument or json causes registration at hub to be 5. Consequently the hub will spawn 5 concurrent sessions. Setting to maxSession = 2 or higher registers correctly on the hub.\n## Steps to reproduce -\n\nSet -maxSession 1 or in json configuration \"maxSession\": 1 causes registration at hub of maxSession: 5. Unregister node, set maxSession to 2 and registration correctly sets 2 and honors that value.\n", "state": "closed", "created_at": "2016-09-06T18:31:52Z", "closed_at": "2016-09-08T18:22:26Z", "labels": []}], "fix_patch": "diff --git a/java/server/src/org/openqa/grid/common/RegistrationRequest.java b/java/server/src/org/openqa/grid/common/RegistrationRequest.java\nindex a27abc57cc..8c8687cf23 100644\n--- a/java/server/src/org/openqa/grid/common/RegistrationRequest.java\n+++ b/java/server/src/org/openqa/grid/common/RegistrationRequest.java\n@@ -140,8 +140,11 @@ public static RegistrationRequest getNewInstance(String json) throws JsonSyntaxE\n     GridNodeConfiguration configuration = GridNodeConfiguration.loadFromJSON(config);\n     request.setConfiguration(configuration);\n \n+    // make sure 'id' has a value\n     if (o.has(\"id\")) {\n       request.configuration.id = o.get(\"id\").getAsString();\n+    } else {\n+      request.configuration.id = request.configuration.getRemoteHost();\n     }\n \n     JsonArray capabilities = o.get(\"capabilities\").getAsJsonArray();\n\ndiff --git a/java/server/src/org/openqa/grid/internal/BaseRemoteProxy.java b/java/server/src/org/openqa/grid/internal/BaseRemoteProxy.java\nindex e87bda8d28..275df57312 100644\n--- a/java/server/src/org/openqa/grid/internal/BaseRemoteProxy.java\n+++ b/java/server/src/org/openqa/grid/internal/BaseRemoteProxy.java\n@@ -104,14 +104,14 @@ public BaseRemoteProxy(RegistrationRequest request, Registry registry) {\n     this.request = request;\n     this.registry = registry;\n     this.config = new GridNodeConfiguration();\n-    this.config.merge(request.getConfiguration());\n-    // the registry is the 'hub' configuration, which takes precedence.\n-    // merging last overrides any other values.\n+    // the registry is the 'hub' configuration, which is used as a seed.\n     this.config.merge(registry.getConfiguration());\n+    // the proxy values must override any that the hub specify where an overlap occurs.\n+    // merging last causes the values to be overridden.\n+    this.config.merge(request.getConfiguration());\n+    // host and port are merge() protected values -- overrule this behavior\n     this.config.host = request.getConfiguration().host;\n     this.config.port = request.getConfiguration().port;\n-    // custom configurations from the remote need to 'override' the hub\n-    this.config.custom.putAll(request.getConfiguration().custom);\n \n     String url = config.getRemoteHost();\n     String id = config.id;\n\ndiff --git a/java/server/src/org/openqa/grid/internal/utils/configuration/GridConfiguration.java b/java/server/src/org/openqa/grid/internal/utils/configuration/GridConfiguration.java\nindex 9f637ee5ea..dda467c178 100644\n--- a/java/server/src/org/openqa/grid/internal/utils/configuration/GridConfiguration.java\n+++ b/java/server/src/org/openqa/grid/internal/utils/configuration/GridConfiguration.java\n@@ -73,17 +73,20 @@ public class GridConfiguration extends StandaloneConfiguration {\n   public void merge(GridConfiguration other) {\n     super.merge(other);\n     // don't merge 'host'\n-    if (other.cleanUpCycle != null) {\n+    if (isMergeAble(other.cleanUpCycle, cleanUpCycle)) {\n       cleanUpCycle = other.cleanUpCycle;\n     }\n-    custom.putAll(other.custom);\n-    if (other.maxSession != 1) {\n+    if (isMergeAble(other.custom, custom)) {\n+      custom.putAll(other.custom);\n+    }\n+    if (isMergeAble(other.maxSession, maxSession) &&\n+        other.maxSession.intValue() > 0) {\n       maxSession = other.maxSession;\n     }\n-    if (other.servlets != null) {\n+    if (isMergeAble(other.servlets, servlets)) {\n       servlets = other.servlets;\n     }\n-    if (other.withoutServlets != null) {\n+    if (isMergeAble(other.withoutServlets, withoutServlets)) {\n       withoutServlets = other.withoutServlets;\n     }\n   }\n\ndiff --git a/java/server/src/org/openqa/grid/internal/utils/configuration/GridHubConfiguration.java b/java/server/src/org/openqa/grid/internal/utils/configuration/GridHubConfiguration.java\nindex a2441f5cb5..6672a511c3 100644\n--- a/java/server/src/org/openqa/grid/internal/utils/configuration/GridHubConfiguration.java\n+++ b/java/server/src/org/openqa/grid/internal/utils/configuration/GridHubConfiguration.java\n@@ -44,12 +44,6 @@ public class GridHubConfiguration extends GridConfiguration {\n   )\n   public String hubConfig;\n \n-  @Parameter(\n-    names = \"-jettyMaxThreads\",\n-    description = \"<Integer> : max number of thread for Jetty. Default is 255\"\n-  )\n-  public Integer jettyMaxThreads;\n-\n   @Parameter(\n     names = {\"-matcher\", \"-capabilityMatcher\"},\n     description = \"<String> class name : a class implementing the CapabilityMatcher interface. Specifies the logic the hub will follow to define whether a request can be assigned to a node. For example, if you want to have the matching process use regular expressions instead of exact match when specifying browser version. ALL nodes of a grid ecosystem would then use the same capabilityMatcher, as defined here. Default is org.openqa.grid.internal.utils.DefaultCapabilityMatcher\",\n@@ -82,6 +76,7 @@ public class GridHubConfiguration extends GridConfiguration {\n    * Init with built-in defaults\n    */\n   public GridHubConfiguration() {\n+    role = \"hub\";\n     if (DEFAULT_CONFIG != null) {\n       merge(DEFAULT_CONFIG);\n     }\n@@ -139,17 +134,17 @@ public void merge(GridNodeConfiguration other) {\n \n   public void merge(GridHubConfiguration other) {\n     super.merge(other);\n-    if (other.jettyMaxThreads != null) {\n-      jettyMaxThreads = other.jettyMaxThreads;\n+\n+    if (isMergeAble(other.capabilityMatcher, capabilityMatcher)) {\n+      capabilityMatcher = other.capabilityMatcher;\n     }\n-    capabilityMatcher = other.capabilityMatcher;\n-    if (other.newSessionWaitTimeout != null) {\n+    if (isMergeAble(other.newSessionWaitTimeout, newSessionWaitTimeout)) {\n       newSessionWaitTimeout = other.newSessionWaitTimeout;\n     }\n-    if (other.prioritizer != null) {\n+    if (isMergeAble(other.prioritizer, prioritizer)) {\n       prioritizer = other.prioritizer;\n     }\n-    if (other.throwOnCapabilityNotPresent != throwOnCapabilityNotPresent) {\n+    if (isMergeAble(other.throwOnCapabilityNotPresent, throwOnCapabilityNotPresent)) {\n       throwOnCapabilityNotPresent = other.throwOnCapabilityNotPresent;\n     }\n   }\n@@ -159,7 +154,6 @@ public String toString(String format) {\n     StringBuilder sb = new StringBuilder();\n     sb.append(super.toString(format));\n     sb.append(toString(format, \"hubConfig\", hubConfig));\n-    sb.append(toString(format, \"jettyMaxThreads\", jettyMaxThreads));\n     sb.append(toString(format, \"capabilityMatcher\", capabilityMatcher.getClass().getCanonicalName()));\n     sb.append(toString(format, \"newSessionWaitTimeout\", newSessionWaitTimeout));\n     sb.append(toString(format, \"prioritizer\", prioritizer != null? prioritizer.getClass().getCanonicalName(): null));\n\ndiff --git a/java/server/src/org/openqa/grid/internal/utils/configuration/GridNodeConfiguration.java b/java/server/src/org/openqa/grid/internal/utils/configuration/GridNodeConfiguration.java\nindex a9eb35c37a..d34ae5111f 100644\n--- a/java/server/src/org/openqa/grid/internal/utils/configuration/GridNodeConfiguration.java\n+++ b/java/server/src/org/openqa/grid/internal/utils/configuration/GridNodeConfiguration.java\n@@ -49,7 +49,7 @@ public class GridNodeConfiguration extends GridConfiguration {\n \n   @Parameter(\n     names = \"-id\",\n-    description = \"<String> : unique identifier for the node. Not required--by default, grid will use the url of the remoteHost\"\n+    description = \"<String> : optional unique identifier for the node. Defaults to the url of the remoteHost\"\n   )\n   public String id;\n \n@@ -125,10 +125,17 @@ public class GridNodeConfiguration extends GridConfiguration {\n \n   @Parameter(\n     names = \"-unregisterIfStillDownAfter\",\n-    description = \"<Integer> in ms : if the node remains down for more than [unregisterIfStillDownAfter] ms, it will step attempting to re-register from the hub. Default is 6000 (1 minute)\"\n+    description = \"<Integer> in ms : if the node remains down for more than [unregisterIfStillDownAfter] ms, it will stop attempting to re-register from the hub. Default is 6000 (1 minute)\"\n   )\n   public Integer unregisterIfStillDownAfter;\n \n+  /**\n+   * Init with built-in defaults\n+   */\n+  public GridNodeConfiguration() {\n+    role = \"node\";\n+  }\n+\n   public String getHubHost() {\n     if (hubHost == null) {\n       if (hub == null) {\n@@ -174,43 +181,43 @@ private void parseHubUrl() {\n \n   public void merge(GridNodeConfiguration other) {\n     super.merge(other);\n-    if (other.browser != null) {\n+    if (isMergeAble(other.browser, browser)) {\n       browser = other.browser;\n     }\n-    if (other.downPollingLimit != null) {\n+    if (isMergeAble(other.downPollingLimit, downPollingLimit)) {\n       downPollingLimit = other.downPollingLimit;\n     }\n-    if (other.hub != null) {\n+    if (isMergeAble(other.hub, hub)) {\n       hub = other.hub;\n     }\n-    if (other.hubHost != null) {\n+    if (isMergeAble(other.hubHost, hubHost)) {\n       hubHost = other.hubHost;\n     }\n-    if (other.hubPort != null) {\n+    if (isMergeAble(other.hubPort, hubPort)) {\n       hubPort = other.hubPort;\n     }\n-    if (other.id != null) {\n+    if (isMergeAble(other.id, id)) {\n       id = other.id;\n     }\n-    if (other.nodePolling != null) {\n+    if (isMergeAble(other.nodePolling, nodePolling)) {\n       nodePolling = other.nodePolling;\n     }\n-    if (other.nodeStatusCheckTimeout != null) {\n+    if (isMergeAble(other.nodeStatusCheckTimeout, nodeStatusCheckTimeout)) {\n       nodeStatusCheckTimeout = other.nodeStatusCheckTimeout;\n     }\n-    if (other.proxy != null) {\n+    if (isMergeAble(other.proxy, proxy)) {\n       proxy = other.proxy;\n     }\n-    if (other.register != null) {\n+    if (isMergeAble(other.register, register)) {\n       register = other.register;\n     }\n-    if (other.registerCycle != null) {\n+    if (isMergeAble(other.registerCycle, registerCycle)) {\n       registerCycle = other.registerCycle;\n     }\n-    if (other.remoteHost != null) {\n+    if (isMergeAble(other.remoteHost, remoteHost)) {\n       remoteHost = other.remoteHost;\n     }\n-    if (other.unregisterIfStillDownAfter != null) {\n+    if (isMergeAble(other.unregisterIfStillDownAfter, unregisterIfStillDownAfter)) {\n       unregisterIfStillDownAfter = other.unregisterIfStillDownAfter;\n     }\n   }\n\ndiff --git a/java/server/src/org/openqa/grid/internal/utils/configuration/StandaloneConfiguration.java b/java/server/src/org/openqa/grid/internal/utils/configuration/StandaloneConfiguration.java\nindex fcd3b177f3..1ece392de3 100644\n--- a/java/server/src/org/openqa/grid/internal/utils/configuration/StandaloneConfiguration.java\n+++ b/java/server/src/org/openqa/grid/internal/utils/configuration/StandaloneConfiguration.java\n@@ -38,13 +38,15 @@ public class StandaloneConfiguration {\n   @Parameter(\n     names = \"-browserSideLog\",\n     description = \"DO NOT USE: Provided for compatibility with 2.0\",\n-    hidden = true)\n+    hidden = true\n+  )\n   public boolean browserSideLog;\n \n   @Parameter(\n     names = \"-captureLogsOnQuit\",\n     description = \"DO NOT USE: Provided for compatibility with 2.0\",\n-    hidden = true)\n+    hidden = true\n+  )\n   public boolean captureLogsOnQuit;\n \n   @Parameter(\n@@ -62,10 +64,10 @@ public class StandaloneConfiguration {\n   public boolean help;\n \n   @Parameter(\n-    names = \"-jettyThreads\",\n-    hidden = true\n+    names = {\"-jettyThreads\", \"-jettyMaxThreads\"},\n+    description = \"<Integer> : max number of threads for Jetty. Default is 200\"\n   )\n-  public Integer jettyThreads;\n+  public Integer jettyMaxThreads;\n \n   @Parameter(\n     names = \"-log\",\n@@ -93,40 +95,78 @@ public class StandaloneConfiguration {\n \n   @Parameter(\n     names = {\"-timeout\", \"-sessionTimeout\"},\n-    description = \"<Integer> in seconds : Specifies the timeout before the hub automatically kills a session that hasn't had any activity in the last X seconds. The test slot will then be released for another test to use. This is typically used to take care of client crashes. For grid hub/node roles, cleanUpCycle must also be set. Default is 1800 (30 minutes)\"\n+    description = \"<Integer> in seconds : Specifies the timeout before the server automatically kills a session that hasn't had any activity in the last X seconds. The test slot will then be released for another test to use. This is typically used to take care of client crashes. For grid hub/node roles, cleanUpCycle must also be set. Default is 1800 (30 minutes)\"\n   )\n   public Integer timeout = 1800;\n \n   @Parameter(\n     names = {\"-avoidProxy\"},\n-    description = \"DO NOT USE. Hack to allow selenium 3.0 server run in SauceLabs\",\n+    description = \"DO NOT USE: Hack to allow selenium 3.0 server run in SauceLabs\",\n     hidden = true\n   )\n-  private Boolean avoidProxy;\n+  private boolean avoidProxy;\n \n   /**\n    * copy another configuration's values into this one if they are set.\n    * @param other\n    */\n   public void merge(StandaloneConfiguration other) {\n-    if (other.browserTimeout != null) {\n+    if (isMergeAble(other.browserTimeout, browserTimeout)) {\n       browserTimeout = other.browserTimeout;\n     }\n-    if (other.jettyThreads != null) {\n-      jettyThreads = other.jettyThreads;\n+    if (isMergeAble(other.jettyMaxThreads, jettyMaxThreads)) {\n+      jettyMaxThreads = other.jettyMaxThreads;\n     }\n-    if (other.timeout != 1800) {\n+    if (isMergeAble(other.timeout, timeout)) {\n       timeout = other.timeout;\n     }\n     // role, port, log, debug and help are not merged, they are only consumed by the immediately running node and can't affect a remote\n   }\n \n+  /**\n+   * Determines if one object can be merged onto another object. Checks for {@code null},\n+   * and empty (Collections & Maps) to make decision.\n+   *\n+   * @param other the object to merge. must be the same type as the 'target'\n+   * @param target the object to merge on to. must be the same type as the 'other'\n+   * @return whether the 'other' can be merged onto the 'target'\n+   */\n+  protected boolean isMergeAble(Object other, Object target) {\n+    // don't merge a null value\n+    if (other == null) {\n+      return false;\n+    } else {\n+      // allow any non-null value to merge over a null target.\n+      if (target == null) {\n+        return true;\n+      }\n+    }\n+\n+    // we know we have two objects with value.. Make sure the types are the same and\n+    // perform additional checks.\n+\n+    if (! target.getClass().getSuperclass().getTypeName()\n+        .equals(other.getClass().getSuperclass().getTypeName())) {\n+      return false;\n+    }\n+\n+    if (target instanceof Collection) {\n+      return !((Collection) other).isEmpty();\n+    }\n+\n+    if (target instanceof Map) {\n+      return !((Map) other).isEmpty();\n+    }\n+\n+    return true;\n+  }\n+\n   public String toString(String format) {\n     StringBuilder sb = new StringBuilder();\n     sb.append(toString(format, \"browserTimeout\", browserTimeout));\n     sb.append(toString(format, \"debug\", debug));\n     sb.append(toString(format, \"help\", help));\n-    sb.append(toString(format, \"jettyThreads\", jettyThreads));\n+    sb.append(toString(format, \"jettyMaxThreads\", jettyMaxThreads));\n     sb.append(toString(format, \"log\", log));\n     sb.append(toString(format, \"logLongForm\", logLongForm));\n     sb.append(toString(format, \"port\", port));\n\ndiff --git a/java/server/src/org/openqa/grid/web/Hub.java b/java/server/src/org/openqa/grid/web/Hub.java\nindex 0bf15f4af8..694a119f9a 100644\n--- a/java/server/src/org/openqa/grid/web/Hub.java\n+++ b/java/server/src/org/openqa/grid/web/Hub.java\n@@ -140,7 +140,7 @@ private void addDefaultServlets(ServletContextHandler handler) {\n \n   private void initServer() {\n     try {\n-      if (config.jettyMaxThreads>0) {\n+      if (config.jettyMaxThreads != null && config.jettyMaxThreads > 0) {\n         QueuedThreadPool pool = new QueuedThreadPool();\n         pool.setMaxThreads(config.jettyMaxThreads);\n         server = new Server(pool);\n\ndiff --git a/java/server/src/org/openqa/selenium/remote/server/SeleniumServer.java b/java/server/src/org/openqa/selenium/remote/server/SeleniumServer.java\nindex e55755226e..da7f7c86bc 100644\n--- a/java/server/src/org/openqa/selenium/remote/server/SeleniumServer.java\n+++ b/java/server/src/org/openqa/selenium/remote/server/SeleniumServer.java\n@@ -99,8 +99,8 @@ public void setExtraServlets(Map<String, Class<? extends Servlet>> extraServlets\n   }\n \n   public void boot() {\n-    if (configuration.jettyThreads != null && configuration.jettyThreads > 0) {\n-      server = new Server(new QueuedThreadPool(configuration.jettyThreads));\n+    if (configuration.jettyMaxThreads != null && configuration.jettyMaxThreads > 0) {\n+      server = new Server(new QueuedThreadPool(configuration.jettyMaxThreads));\n     } else {\n       server = new Server();\n     }\n", "test_patch": "diff --git a/java/server/test/org/openqa/grid/internal/BaseRemoteProxyTest.java b/java/server/test/org/openqa/grid/internal/BaseRemoteProxyTest.java\nindex e6060bc879..26980bc47a 100644\n--- a/java/server/test/org/openqa/grid/internal/BaseRemoteProxyTest.java\n+++ b/java/server/test/org/openqa/grid/internal/BaseRemoteProxyTest.java\n@@ -89,17 +89,37 @@ public void create() {\n   public void proxyConfigIsInheritedFromRegistry() {\n     Registry registry = Registry.newInstance();\n     registry.getConfiguration().cleanUpCycle = 42;\n-    registry.getConfiguration().timeout = 4200;\n \n     GridNodeConfiguration nodeConfiguration = new GridNodeConfiguration();\n-    new JCommander(nodeConfiguration, \"-role\", \"webdriver\", \"-timeout\", \"100\", \"-cleanUpCycle\", \"100\");\n+    new JCommander(nodeConfiguration, \"-role\", \"webdriver\");\n     RegistrationRequest req = RegistrationRequest.build(nodeConfiguration);\n     req.getConfiguration().proxy = null;\n \n     RemoteProxy p = BaseRemoteProxy.getNewInstance(req, registry);\n \n-    assertEquals(42, p.getConfig().cleanUpCycle.longValue());\n-    assertEquals(4200, p.getConfig().timeout.longValue());\n+    // values which are not present in the registration request need to come\n+    // from the registry\n+    assertEquals(registry.getConfiguration().cleanUpCycle.longValue(),\n+                 p.getConfig().cleanUpCycle.longValue());\n+  }\n+\n+  @Test\n+  public void proxyConfigOverwritesRegistryConfig() {\n+    Registry registry = Registry.newInstance();\n+    registry.getConfiguration().cleanUpCycle = 42;\n+    registry.getConfiguration().maxSession = 1;\n+\n+    GridNodeConfiguration nodeConfiguration = new GridNodeConfiguration();\n+    new JCommander(nodeConfiguration, \"-role\", \"webdriver\", \"-cleanUpCycle\", \"100\", \"-maxSession\", \"50\");\n+    RegistrationRequest req = RegistrationRequest.build(nodeConfiguration);\n+    req.getConfiguration().proxy = null;\n+\n+    RemoteProxy p = BaseRemoteProxy.getNewInstance(req, registry);\n+\n+    // values which are present in both the registration request and the registry need to\n+    // come from the registration request\n+    assertEquals(100L, p.getConfig().cleanUpCycle.longValue());\n+    assertEquals(50L, p.getConfig().maxSession.longValue());\n   }\n \n   @Test\n\ndiff --git a/java/server/test/org/openqa/grid/internal/GridInternalTests.java b/java/server/test/org/openqa/grid/internal/GridInternalTests.java\nindex 10554e59af..f7f3536767 100644\n--- a/java/server/test/org/openqa/grid/internal/GridInternalTests.java\n+++ b/java/server/test/org/openqa/grid/internal/GridInternalTests.java\n@@ -23,6 +23,10 @@\n import org.openqa.grid.internal.listener.SessionListenerTest;\n import org.openqa.grid.internal.utils.DefaultCapabilityMatcherTest;\n import org.openqa.grid.internal.utils.SelfRegisteringRemoteTest;\n+import org.openqa.grid.internal.utils.configuration.GridConfigurationTest;\n+import org.openqa.grid.internal.utils.configuration.GridHubConfigurationTest;\n+import org.openqa.grid.internal.utils.configuration.GridNodeConfigurationTest;\n+import org.openqa.grid.internal.utils.configuration.StandaloneConfigurationTest;\n import org.openqa.grid.plugin.RemoteProxyInheritanceTest;\n \n @RunWith(Suite.class)\n@@ -46,7 +50,12 @@\n     StatusServletTests.class,\n     UserDefinedCapabilityMatcherTests.class,\n     GridShutdownTest.class,\n-    SelfRegisteringRemoteTest.class\n+    SelfRegisteringRemoteTest.class,\n+    StandaloneConfigurationTest.class,\n+    GridConfigurationTest.class,\n+    GridNodeConfigurationTest.class,\n+    GridHubConfigurationTest.class,\n+\n })\n public class GridInternalTests {\n }\n\ndiff --git a/java/server/test/org/openqa/grid/internal/utils/GridHubConfigurationTest.java b/java/server/test/org/openqa/grid/internal/utils/GridHubConfigurationTest.java\nindex 421ba706a5..0000000000 100644\n--- a/java/server/test/org/openqa/grid/internal/utils/GridHubConfigurationTest.java\n+++ b/java/server/test/org/openqa/grid/internal/utils/GridHubConfigurationTest.java\n@@ -1,113 +0,0 @@\n-// Licensed to the Software Freedom Conservancy (SFC) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The SFC licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-\n-package org.openqa.grid.internal.utils;\n-\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.assertNull;\n-\n-import com.beust.jcommander.JCommander;\n-\n-import org.junit.Test;\n-import org.openqa.grid.internal.utils.configuration.GridHubConfiguration;\n-import org.openqa.grid.web.servlet.ResourceServlet;\n-\n-import java.util.ArrayList;\n-\n-public class GridHubConfigurationTest {\n-\n-  @Test\n-  public void testSetTimeout() throws Exception {\n-    GridHubConfiguration gridHubConfiguration = new GridHubConfiguration();\n-    gridHubConfiguration.timeout = 123;\n-    assertEquals(123, gridHubConfiguration.timeout.longValue());\n-  }\n-\n-  @Test\n-  public void testSetBrowserTimeout() throws Exception {\n-    GridHubConfiguration gridHubConfiguration = new GridHubConfiguration();\n-    gridHubConfiguration.browserTimeout = 1233;\n-    assertEquals(1233, gridHubConfiguration.browserTimeout.longValue());\n-  }\n-\n-  @Test\n-  public void commandLineParsing() throws Exception {\n-    GridHubConfiguration gridHubConfiguration = new GridHubConfiguration();\n-    String[] args = \"-timeout 32123 -browserTimeout 456\".split(\" \");\n-    new JCommander(gridHubConfiguration, args);\n-    assertEquals(32123L, gridHubConfiguration.timeout.longValue());\n-    assertEquals(456L, gridHubConfiguration.browserTimeout.longValue());\n-  }\n-\n-  @Test\n-  public void testWithOutServlets() {\n-    GridHubConfiguration ghc = new GridHubConfiguration();\n-    assertFalse(ghc.isWithOutServlet(ResourceServlet.class));\n-\n-    ghc.withoutServlets = new ArrayList<>();\n-    ghc.withoutServlets.add(ResourceServlet.class.getCanonicalName());\n-    assertTrue(ghc.isWithOutServlet(ResourceServlet.class));\n-  }\n-\n-  @Test\n-  public void testDefaults() {\n-    GridHubConfiguration ghc = new GridHubConfiguration();\n-    assertEquals(\"standalone\", ghc.role);\n-    assertEquals(0L, ghc.browserTimeout.longValue());\n-    assertEquals(false, ghc.debug);\n-    assertEquals(false, ghc.help);\n-    assertEquals(false, ghc.logLongForm);\n-    assertEquals(1800L, ghc.timeout.longValue());\n-    assertEquals(5000L, ghc.cleanUpCycle.longValue());\n-    assertEquals(1L, ghc.maxSession.longValue());\n-    assertEquals(-1L, ghc.jettyMaxThreads.longValue());\n-    assertEquals(\"org.openqa.grid.internal.utils.DefaultCapabilityMatcher\",\n-                    ghc.capabilityMatcher.getClass().getCanonicalName());\n-    assertEquals(-1L, ghc.newSessionWaitTimeout.longValue());\n-    assertEquals(true, ghc.throwOnCapabilityNotPresent);\n-    assertTrue(ghc.servlets.isEmpty());\n-    assertTrue(ghc.custom.isEmpty());\n-    assertNull(ghc.withoutServlets);\n-    assertNull(ghc.hubConfig);\n-    assertNull(ghc.log);\n-    assertNull(ghc.prioritizer);\n-    assertNull(ghc.host);\n-    assertNull(ghc.port);\n-  }\n-\n-  @Test\n-  public void testToString() {\n-    GridHubConfiguration ghc = new GridHubConfiguration();\n-\n-    assertTrue(ghc.toString().contains(\"-role standalone \"));\n-    assertFalse(ghc.toString().contains(\"-servlets\"));\n-    assertFalse(ghc.toString().contains(\"custom\"));\n-\n-    ghc = new GridHubConfiguration();\n-    String[] args = (\"-servlet com.foo.bar.ServletA -servlet com.foo.bar.ServletB\"\n-                     + \" -custom foo=bar,bar=baz\").split(\" \");\n-    new JCommander(ghc, args);\n-    \n-    assertTrue(ghc.toString().contains(\"-servlets com.foo.bar.ServletA\"\n-                                       + \" -servlets com.foo.bar.ServletB\"));\n-    assertTrue(ghc.toString().contains(\"custom {\"));\n-    assertTrue(ghc.toString().contains(\"bar=baz\"));\n-    assertTrue(ghc.toString().contains(\"foo=bar\"));\n-  }\n-}\n\ndiff --git a/java/server/test/org/openqa/grid/internal/utils/configuration/GridConfigurationTest.java b/java/server/test/org/openqa/grid/internal/utils/configuration/GridConfigurationTest.java\nindex 0000000000..1c15b3729d 100644\n--- a/java/server/test/org/openqa/grid/internal/utils/configuration/GridConfigurationTest.java\n+++ b/java/server/test/org/openqa/grid/internal/utils/configuration/GridConfigurationTest.java\n@@ -0,0 +1,82 @@\n+// Licensed to the Software Freedom Conservancy (SFC) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The SFC licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.openqa.grid.internal.utils.configuration;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.google.common.collect.Maps;\n+\n+import org.junit.Test;\n+import org.openqa.grid.web.servlet.ResourceServlet;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+public class GridConfigurationTest {\n+  @Test\n+  public void testDefaults() {\n+    GridConfiguration gc = new GridConfiguration();\n+    assertNull(gc.cleanUpCycle);\n+    assertTrue(gc.custom.isEmpty());\n+    assertNull(gc.host);\n+    assertEquals(1, gc.maxSession.intValue());\n+    assertNull(gc.servlets);\n+    assertNull(gc.withoutServlets);\n+  }\n+\n+  @Test\n+  public void testWithOutServlets() {\n+    GridConfiguration gc = new GridConfiguration();\n+    assertFalse(gc.isWithOutServlet(ResourceServlet.class));\n+\n+    gc.withoutServlets = new ArrayList<>();\n+    gc.withoutServlets.add(ResourceServlet.class.getCanonicalName());\n+    assertTrue(gc.isWithOutServlet(ResourceServlet.class));\n+  }\n+\n+  @Test\n+  public void testMergeWithRealValues() {\n+    GridConfiguration gc = new GridConfiguration();\n+    GridConfiguration other = new GridConfiguration();\n+    other.cleanUpCycle = 10;\n+    Map<String, String> custom = Maps.newHashMap();\n+    custom.put(\"foo\", \"bar\");\n+    other.custom = custom;\n+    other.host = \"10.10.10.1\";\n+    other.maxSession = 20;\n+    other.servlets = Arrays.asList(new String[] { \"com.foo.ServletA\" });\n+    other.withoutServlets = Arrays.asList(new String[] { \"com.foo.ServletB\" });\n+    gc.merge(other);\n+\n+    assertEquals(other.cleanUpCycle, gc.cleanUpCycle);\n+    assertTrue(gc.custom.containsKey(\"foo\"));\n+    assertEquals(other.maxSession, gc.maxSession);\n+    assertSame(other.servlets, gc.servlets);\n+    assertTrue(gc.servlets.contains(\"com.foo.ServletA\"));\n+    assertSame(other.withoutServlets, gc.withoutServlets);\n+    assertTrue(gc.withoutServlets.contains(\"com.foo.ServletB\"));\n+    // host is merge protected\n+    assertNotEquals(other.host, gc.host);\n+  }\n+}\n\ndiff --git a/java/server/test/org/openqa/grid/internal/utils/configuration/GridHubConfigurationTest.java b/java/server/test/org/openqa/grid/internal/utils/configuration/GridHubConfigurationTest.java\nindex 0000000000..7cd50936cd 100644\n--- a/java/server/test/org/openqa/grid/internal/utils/configuration/GridHubConfigurationTest.java\n+++ b/java/server/test/org/openqa/grid/internal/utils/configuration/GridHubConfigurationTest.java\n@@ -0,0 +1,142 @@\n+// Licensed to the Software Freedom Conservancy (SFC) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The SFC licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.openqa.grid.internal.utils.configuration;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertNull;\n+\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+\n+import com.beust.jcommander.JCommander;\n+\n+import org.junit.Test;\n+import org.openqa.grid.internal.listeners.Prioritizer;\n+\n+import java.util.Map;\n+\n+public class GridHubConfigurationTest {\n+\n+  @Test\n+  public void testDefaults() {\n+    GridHubConfiguration ghc = new GridHubConfiguration();\n+    assertEquals(\"hub\", ghc.role);\n+    assertEquals(0L, ghc.browserTimeout.longValue());\n+    assertEquals(5000L, ghc.cleanUpCycle.longValue());\n+    assertEquals(-1L, ghc.jettyMaxThreads.longValue());\n+    assertEquals(\"org.openqa.grid.internal.utils.DefaultCapabilityMatcher\",\n+                    ghc.capabilityMatcher.getClass().getCanonicalName());\n+    assertEquals(-1L, ghc.newSessionWaitTimeout.longValue());\n+    assertEquals(true, ghc.throwOnCapabilityNotPresent);\n+    assertTrue(ghc.servlets.isEmpty());\n+    assertNull(ghc.hubConfig);\n+    assertNull(ghc.prioritizer);\n+    assertNull(ghc.host);\n+    assertNull(ghc.port);\n+  }\n+\n+  @Test\n+  public void testLoadFromJson() {\n+    JsonObject json = new JsonParser()\n+      .parse(\"{ \\\"host\\\": \\\"dummyhost\\\", \\\"port\\\": 1234 }\").getAsJsonObject();\n+    GridHubConfiguration ghc = GridHubConfiguration.loadFromJSON(json);\n+\n+    assertEquals(\"hub\", ghc.role);\n+    assertEquals(1234, ghc.port.intValue());\n+    assertEquals(\"dummyhost\", ghc.host);\n+  }\n+\n+  @Test\n+  public void testMergeWithRealValues() {\n+    GridHubConfiguration ghc = new GridHubConfiguration();\n+    GridHubConfiguration other = new GridHubConfiguration();\n+    other.prioritizer = new Prioritizer() {\n+      @Override\n+      public int compareTo(Map<String, Object> a, Map<String, Object> b) {\n+        return 0;\n+      }\n+    };\n+    other.hubConfig = \"foo.json\";\n+    other.throwOnCapabilityNotPresent = false;\n+    other.newSessionWaitTimeout = 100;\n+    ghc.merge(other);\n+\n+    assertSame(other.capabilityMatcher, ghc.capabilityMatcher);\n+    assertSame(other.prioritizer, ghc.prioritizer);\n+    assertEquals(other.newSessionWaitTimeout, ghc.newSessionWaitTimeout);\n+    assertEquals(other.throwOnCapabilityNotPresent, ghc.throwOnCapabilityNotPresent);\n+    // hubConfig is not a merged value\n+    assertTrue(ghc.hubConfig == null);\n+  }\n+\n+  @Test\n+  public void testMergeNullDoesNotOverrideExistingValues() {\n+    GridHubConfiguration other = new GridHubConfiguration();\n+    other.capabilityMatcher = null;\n+    other.newSessionWaitTimeout = null;\n+    other.throwOnCapabilityNotPresent = null;\n+    other.prioritizer = null;\n+    GridHubConfiguration ghc = new GridHubConfiguration();\n+    ghc.merge(other);\n+\n+    assertTrue(ghc.capabilityMatcher != null);\n+    assertTrue(ghc.newSessionWaitTimeout != null);\n+    assertTrue(ghc.throwOnCapabilityNotPresent != null);\n+    // the default is null -- merge(null, null) = null;\n+    assertTrue(ghc.prioritizer == null);\n+  }\n+\n+  @Test\n+  public void testMergeNullTargetDoesNotProduceNPE() {\n+    GridHubConfiguration ghc = new GridHubConfiguration();\n+    ghc.capabilityMatcher = null;\n+    ghc.newSessionWaitTimeout = null;\n+    ghc.prioritizer = null;\n+    ghc.throwOnCapabilityNotPresent = null;\n+    GridHubConfiguration other = new GridHubConfiguration();\n+    ghc.merge(other);\n+\n+    assertEquals(other.capabilityMatcher, ghc.capabilityMatcher);\n+    assertEquals(other.newSessionWaitTimeout, ghc.newSessionWaitTimeout);\n+    assertEquals(other.prioritizer, ghc.prioritizer);\n+    assertEquals(other.throwOnCapabilityNotPresent, ghc.throwOnCapabilityNotPresent);\n+  }\n+\n+  @Test\n+  public void testToString() {\n+    GridHubConfiguration ghc = new GridHubConfiguration();\n+\n+    assertTrue(ghc.toString().contains(\"-role hub\"));\n+    assertFalse(ghc.toString().contains(\"-servlets\"));\n+    assertFalse(ghc.toString().contains(\"custom\"));\n+\n+    ghc = new GridHubConfiguration();\n+    String[] args = (\"-servlet com.foo.bar.ServletA -servlet com.foo.bar.ServletB\"\n+                     + \" -custom foo=bar,bar=baz\").split(\" \");\n+    new JCommander(ghc, args);\n+\n+    assertTrue(ghc.toString().contains(\"-servlets com.foo.bar.ServletA\"\n+                                       + \" -servlets com.foo.bar.ServletB\"));\n+    assertTrue(ghc.toString().contains(\"custom {\"));\n+    assertTrue(ghc.toString().contains(\"bar=baz\"));\n+    assertTrue(ghc.toString().contains(\"foo=bar\"));\n+  }\n+}\n\ndiff --git a/java/server/test/org/openqa/grid/internal/utils/configuration/GridNodeConfigurationTest.java b/java/server/test/org/openqa/grid/internal/utils/configuration/GridNodeConfigurationTest.java\nindex 0000000000..6554ecfa14 100644\n--- a/java/server/test/org/openqa/grid/internal/utils/configuration/GridNodeConfigurationTest.java\n+++ b/java/server/test/org/openqa/grid/internal/utils/configuration/GridNodeConfigurationTest.java\n@@ -0,0 +1,147 @@\n+// Licensed to the Software Freedom Conservancy (SFC) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The SFC licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.openqa.grid.internal.utils.configuration;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+\n+import org.junit.Test;\n+import org.openqa.selenium.remote.DesiredCapabilities;\n+\n+import java.util.Arrays;\n+\n+public class GridNodeConfigurationTest {\n+  @Test\n+  public void testLoadFromJson() {\n+    JsonObject json = new JsonParser()\n+      .parse(\"{ \\\"host\\\": \\\"dummyhost\\\", \\\"port\\\": 1234 }\").getAsJsonObject();\n+    GridNodeConfiguration gnc = GridNodeConfiguration.loadFromJSON(json);\n+\n+    assertEquals(\"node\", gnc.role);\n+    assertEquals(1234, gnc.port.intValue());\n+    assertEquals(\"dummyhost\", gnc.host);\n+  }\n+\n+  @Test\n+  public void testDefaults() {\n+    GridNodeConfiguration gnc = new GridNodeConfiguration();\n+    assertEquals(\"node\", gnc.role);\n+    assertEquals(5000, gnc.nodeStatusCheckTimeout.intValue());\n+    assertTrue(gnc.browser.isEmpty());\n+    assertNull(gnc.id);\n+    assertNull(gnc.downPollingLimit);\n+    assertNull(gnc.hub);\n+    assertNull(gnc.hubHost);\n+    assertNull(gnc.hubPort);\n+    assertNull(gnc.nodeConfigFile);\n+    assertNull(gnc.nodePolling);\n+    assertNull(gnc.proxy);\n+    assertNull(gnc.register);\n+    assertNull(gnc.registerCycle);\n+    assertNull(gnc.unregisterIfStillDownAfter);\n+\n+    //not a @Parameter\n+    assertNull(gnc.remoteHost);\n+  }\n+\n+  @Test\n+  public void testGetHubHost() {\n+    GridNodeConfiguration gnc = new GridNodeConfiguration();\n+    gnc.hub = \"http://dummyhost:4444/wd/hub\";\n+    assertEquals(\"dummyhost\", gnc.getHubHost());\n+  }\n+\n+  @Test\n+  public void testGetHubPort() {\n+    GridNodeConfiguration gnc = new GridNodeConfiguration();\n+    gnc.hub = \"http://dummyhost:4444/wd/hub\";\n+    assertEquals(4444, gnc.getHubPort().intValue());\n+  }\n+\n+  @Test\n+  public void tetGetRemoteHost() {\n+    GridNodeConfiguration gnc = new GridNodeConfiguration();\n+    gnc.host = \"dummyhost\";\n+    gnc.port = 1234;\n+    assertEquals(\"http://dummyhost:1234\", gnc.getRemoteHost());\n+  }\n+\n+  @Test(expected = RuntimeException.class)\n+  public void testGetHubHost_forNullConfig() {\n+    GridNodeConfiguration gnc = new GridNodeConfiguration();\n+    gnc.getHubHost();\n+  }\n+\n+  @Test(expected = RuntimeException.class)\n+  public void testGetHubPort_forNullConfig() {\n+    GridNodeConfiguration gnc = new GridNodeConfiguration();\n+    gnc.getHubPort();\n+  }\n+\n+  @Test\n+  public void tetGetRemoteHost_forNullConfig() {\n+    GridNodeConfiguration gnc = new GridNodeConfiguration();\n+    assertEquals(\"http://localhost:5555\", gnc.getRemoteHost());\n+  }\n+\n+  @Test\n+  public void testMergeWithRealValues() {\n+    GridNodeConfiguration gnc = new GridNodeConfiguration();\n+    GridNodeConfiguration other = new GridNodeConfiguration();\n+    other.id = \"myid\";\n+    DesiredCapabilities dc =\n+      new DesiredCapabilities(new ImmutableMap.Builder().put(\"chrome\", \"foo\").build());\n+    other.browser = Arrays.asList(dc);\n+    other.downPollingLimit = 50;\n+    other.hub = \"http://dummyhost\";\n+    other.hubHost = \"dummyhost\";\n+    other.hubPort = 1234;\n+    other.nodeConfigFile = \"foo.json\";\n+    other.nodePolling = 100;\n+    other.nodeStatusCheckTimeout = 2000;\n+    other.proxy = \"com.foo.bar.MyProxy\";\n+    other.register = false;\n+    other.registerCycle = 3000;\n+    other.unregisterIfStillDownAfter = 4000;\n+    // is not a @Parameter but is a mergable value\n+    other.remoteHost = \"mylocalhost\";\n+    gnc.merge(other);\n+\n+    assertSame(other.browser, gnc.browser);\n+    assertEquals(other.id, gnc.id);\n+    assertEquals(other.downPollingLimit, gnc.downPollingLimit);\n+    assertEquals(other.hub, gnc.hub);\n+    assertEquals(other.hubHost, gnc.hubHost);\n+    assertEquals(other.nodePolling, gnc.nodePolling);\n+    assertEquals(other.nodeStatusCheckTimeout, gnc.nodeStatusCheckTimeout);\n+    assertEquals(other.proxy, gnc.proxy);\n+    assertEquals(other.register, gnc.register);\n+    assertEquals(other.registerCycle, gnc.registerCycle);\n+    assertEquals(other.unregisterIfStillDownAfter, gnc.unregisterIfStillDownAfter);\n+    // is not a @Parameter\n+    assertEquals(other.remoteHost, gnc.remoteHost);\n+    // is not a merged value\n+    assertNull(gnc.nodeConfigFile);\n+  }\n+}\n\ndiff --git a/java/server/test/org/openqa/grid/internal/utils/configuration/StandaloneConfigurationTest.java b/java/server/test/org/openqa/grid/internal/utils/configuration/StandaloneConfigurationTest.java\nindex 0000000000..8e848d2a74 100644\n--- a/java/server/test/org/openqa/grid/internal/utils/configuration/StandaloneConfigurationTest.java\n+++ b/java/server/test/org/openqa/grid/internal/utils/configuration/StandaloneConfigurationTest.java\n@@ -0,0 +1,161 @@\n+// Licensed to the Software Freedom Conservancy (SFC) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The SFC licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.openqa.grid.internal.utils.configuration;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Maps;\n+\n+import com.beust.jcommander.JCommander;\n+\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class StandaloneConfigurationTest {\n+\n+  @Test\n+  public void testDefaults() {\n+    StandaloneConfiguration sc = new StandaloneConfiguration();\n+\n+    assertEquals(\"standalone\", sc.role);\n+    assertNull(sc.browserTimeout);\n+    assertFalse(sc.debug);\n+    assertFalse(sc.help);\n+    assertNull(sc.jettyMaxThreads);\n+    assertFalse(sc.logLongForm);\n+    assertNull(sc.log);\n+    assertEquals(1800, sc.timeout.intValue());\n+  }\n+\n+  @Test\n+  public void commandLineParsing() throws Exception {\n+    StandaloneConfiguration sc = new StandaloneConfiguration();\n+    String[] args = \"-timeout 32123 -browserTimeout 456\".split(\" \");\n+    new JCommander(sc, args);\n+    assertEquals(32123L, sc.timeout.longValue());\n+    assertEquals(456L, sc.browserTimeout.longValue());\n+  }\n+\n+  @Test\n+  public void testSetTimeout() throws Exception {\n+    StandaloneConfiguration sc = new StandaloneConfiguration();\n+    sc.timeout = 123;\n+    assertEquals(123, sc.timeout.longValue());\n+  }\n+\n+  @Test\n+  public void testSetBrowserTimeout() throws Exception {\n+    StandaloneConfiguration sc = new StandaloneConfiguration();\n+    sc.browserTimeout = 1233;\n+    assertEquals(1233, sc.browserTimeout.longValue());\n+  }\n+\n+  @Test\n+  public void testIsMergeAble() {\n+    StandaloneConfiguration sc = new StandaloneConfiguration();\n+\n+    // can't merge null onto null\n+    assertFalse(sc.isMergeAble(null, null));\n+\n+    // test with Character\n+    assertTrue(sc.isMergeAble('a','a'));\n+    assertTrue(sc.isMergeAble('a', 'b'));\n+    assertTrue(sc.isMergeAble('a', null));\n+    assertFalse(sc.isMergeAble(null, 'b'));\n+\n+    // test with Integer\n+    assertTrue(sc.isMergeAble(1, 1));\n+    assertTrue(sc.isMergeAble(1, 2));\n+    assertTrue(sc.isMergeAble(1, null));\n+    assertFalse(sc.isMergeAble(null, 2));\n+\n+    // test with Boolean\n+    assertTrue(sc.isMergeAble(true, true));\n+    assertTrue(sc.isMergeAble(true, false));\n+    assertTrue(sc.isMergeAble(true, null));\n+    assertFalse(sc.isMergeAble(null, false));\n+\n+    // test with String\n+    assertTrue(sc.isMergeAble(\"a\", \"a\"));\n+    assertTrue(sc.isMergeAble(\"a\", \"b\"));\n+    assertTrue(sc.isMergeAble(\"a\", null));\n+    assertFalse(sc.isMergeAble(null, \"b\"));\n+\n+    // test with Collections\n+    assertTrue(sc.isMergeAble(Arrays.asList(new String[]{\"a\", \"b\"}),\n+                              Arrays.asList(new String[]{\"b\", \"c\"})));\n+    assertTrue(sc.isMergeAble(Arrays.asList(new String[]{\"a\", \"b\"}),\n+                              Arrays.asList(new String[]{\"a\", \"b\"})));\n+    assertTrue(sc.isMergeAble(Arrays.asList(new String[]{\"b\", \"c\"}), Arrays.asList()));\n+    assertTrue(sc.isMergeAble(Arrays.asList(new String[]{\"b\", \"c\"}), null));\n+    assertFalse(sc.isMergeAble(Arrays.asList(), Arrays.asList(new String[]{\"b\", \"c\"})));\n+    assertFalse(sc.isMergeAble(null, Arrays.asList(new String[]{\"b\", \"c\"})));\n+\n+    // test with Maps\n+    Map<String, Integer> map = new ImmutableMap.Builder<String, Integer>()\n+      .put(\"one\", 1).put(\"two\", 2).build();\n+    Map<String, Integer> map2 = new ImmutableMap.Builder<String, Integer>()\n+      .put(\"three\", 3).put(\"four\", 4).build();\n+    assertTrue(sc.isMergeAble(map, map));\n+    assertTrue(sc.isMergeAble(map, map2));\n+    assertTrue(sc.isMergeAble(map, null));\n+\n+    Map<String, Integer> map3 = new HashMap<>();\n+    map3.put(\"five\", 5);\n+    assertTrue(sc.isMergeAble(map3, Maps.newHashMap()));\n+\n+    assertFalse(sc.isMergeAble(new ImmutableMap.Builder<String, Integer>().build(), map3));\n+    assertFalse(sc.isMergeAble(null, map3));\n+  }\n+\n+  @Test\n+  public void testMergeWithRealValues() {\n+    StandaloneConfiguration sc = new StandaloneConfiguration();\n+    StandaloneConfiguration other = new StandaloneConfiguration();\n+    other.browserTimeout = 5000;\n+    other.debug = true;\n+    other.help = true;\n+    other.jettyMaxThreads = 1000;\n+    other.log = \"foo.log\";\n+    other.logLongForm = true;\n+    other.port = 4321;\n+    other.role = \"wd\";\n+    other.timeout = 4200;\n+    sc.merge(other);\n+\n+    assertEquals(other.browserTimeout, sc.browserTimeout);\n+    assertEquals(other.jettyMaxThreads, sc.jettyMaxThreads);\n+    assertEquals(other.timeout, sc.timeout);\n+    // these values are merge protected\n+    assertNotEquals(other.debug, sc.debug);\n+    assertNotEquals(other.port, sc.port);\n+    assertNotEquals(other.log, sc.log);\n+    assertNotEquals(other.help, sc.help);\n+    assertNotEquals(other.logLongForm, sc.logLongForm);\n+    assertNotEquals(other.role, sc.role);\n+  }\n+\n+}\n", "instance_id": "seleniumhq__selenium-2735", "fixed_tests": {}, "failed_tests": [], "skipped_tests": [], "run_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "test_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "fix_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "f2p_tests": {}, "p2p_tests": {}, "s2p_tests": {}, "n2p_tests": {}}
{"org": "seleniumhq", "repo": "selenium", "number": 2753, "title": "Added context manager for chrome and content", "body": "- [X] By placing an `X` in the preceding checkbox, I verify that I have signed the [Contributor License Agreement](https://github.com/SeleniumHQ/selenium/blob/master/CONTRIBUTING.md#step-6-sign-the-cla)\n", "state": "closed", "base": {"label": "SeleniumHQ:master", "ref": "master", "sha": "ee4ad6727d883d088ff61e92c48a96e1d0305109"}, "resolved_issues": [], "fix_patch": "diff --git a/py/selenium/webdriver/firefox/remote_connection.py b/py/selenium/webdriver/firefox/remote_connection.py\nindex 3c29589677..fe9204529e 100644\n--- a/py/selenium/webdriver/firefox/remote_connection.py\n+++ b/py/selenium/webdriver/firefox/remote_connection.py\n@@ -22,6 +22,7 @@ class FirefoxRemoteConnection(RemoteConnection):\n     def __init__(self, remote_server_addr, keep_alive=True):\n         RemoteConnection.__init__(self, remote_server_addr, keep_alive)\n \n+        self._commands[\"GET_CONTEXT\"] = ('GET', '/session/$sessionId/moz/context')\n         self._commands[\"SET_CONTEXT\"] = (\"POST\", \"/session/$sessionId/moz/context\")\n         self._commands[\"ELEMENT_GET_ANONYMOUS_CHILDREN\"] = \\\n             (\"POST\", \"/session/$sessionId/moz/xbl/$id/anonymous_children\")\n\ndiff --git a/py/selenium/webdriver/firefox/webdriver.py b/py/selenium/webdriver/firefox/webdriver.py\nindex 6b8a22d5e2..65ec514f39 100644\n--- a/py/selenium/webdriver/firefox/webdriver.py\n+++ b/py/selenium/webdriver/firefox/webdriver.py\n@@ -31,6 +31,8 @@\n import types\n \n from .extension_connection import ExtensionConnection\n+from contextlib import contextmanager\n+\n from .firefox_binary import FirefoxBinary\n from .firefox_profile import FirefoxProfile\n from .options import Options\n@@ -130,6 +132,10 @@ def __init__(self, firefox_profile=None, firefox_binary=None,\n \n         # W3C remote\n         # TODO(ato): Perform conformance negotiation\n+\n+        self.CONTEXT_CHROME = 'chrome'\n+        self.CONTEXT_CONTENT = 'content'\n+\n         if capabilities.get(\"marionette\"):\n             self.service = Service(executable_path, log_path=log_path)\n             self.service.start()\n@@ -195,3 +201,25 @@ def firefox_profile(self):\n \n     def set_context(self, context):\n         self.execute(\"SET_CONTEXT\", {\"context\": context})\n+\n+    @contextmanager\n+    def context(self, context):\n+        \"\"\"Sets the context that Selenium commands are running in using\n+        a `with` statement. The state of the context on the server is\n+        saved before entering the block, and restored upon exiting it.\n+\n+        :param context: Context, may be one of the class properties\n+            `CONTEXT_CHROME` or `CONTEXT_CONTENT`.\n+\n+        Usage example::\n+\n+            with selenium.context(selenium.CONTEXT_CHROME):\n+                # chrome scope\n+                ... do stuff ...\n+        \"\"\"\n+        initial_context = self.execute('GET_CONTEXT').pop('value')\n+        self.set_context(context)\n+        try:\n+            yield\n+        finally:\n+            self.set_context(initial_context)\n", "test_patch": "diff --git a/py/test/selenium/webdriver/marionette/mn_context_tests.py b/py/test/selenium/webdriver/marionette/mn_context_tests.py\nindex 0000000000..93033a6565 100644\n--- a/py/test/selenium/webdriver/marionette/mn_context_tests.py\n+++ b/py/test/selenium/webdriver/marionette/mn_context_tests.py\n@@ -0,0 +1,30 @@\n+# Licensed to the Software Freedom Conservancy (SFC) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The SFC licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+\n+class TestUsingContext(object):\n+\n+    def test_context_sets_correct_context_and_returns(self, driver):\n+\n+        def get_context():\n+            return driver.execute('GET_CONTEXT').pop('value')\n+\n+        assert get_context() == driver.CONTEXT_CONTENT\n+        with driver.context(driver.CONTEXT_CHROME):\n+            assert get_context() == driver.CONTEXT_CHROME\n+        assert get_context() == driver.CONTEXT_CONTENT\n+\n", "instance_id": "seleniumhq__selenium-2753", "fixed_tests": {}, "failed_tests": [], "skipped_tests": [], "run_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "test_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "fix_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "f2p_tests": {}, "p2p_tests": {}, "s2p_tests": {}, "n2p_tests": {}}
{"org": "seleniumhq", "repo": "selenium", "number": 2771, "title": "HubStatusServlet - use GET with query string instead of GET with body", "body": "- [X] By placing an `X` in the preceding checkbox, I verify that I have signed the [Contributor License Agreement](https://github.com/SeleniumHQ/selenium/blob/master/CONTRIBUTING.md#step-6-sign-the-cla)\n", "state": "closed", "base": {"label": "SeleniumHQ:master", "ref": "master", "sha": "134cbc257d9df7d02d7cbe7d5734434187927b26"}, "resolved_issues": [], "fix_patch": "diff --git a/java/server/src/org/openqa/grid/web/servlet/HubStatusServlet.java b/java/server/src/org/openqa/grid/web/servlet/HubStatusServlet.java\nindex b59a9b59c6..c12f7f6bc0 100644\n--- a/java/server/src/org/openqa/grid/web/servlet/HubStatusServlet.java\n+++ b/java/server/src/org/openqa/grid/web/servlet/HubStatusServlet.java\n@@ -33,6 +33,7 @@\n import java.io.IOException;\n import java.io.InputStreamReader;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.List;\n import java.util.Map;\n \n@@ -55,9 +56,9 @@\n  *      ]\n  * }\n  *\n- * if no param is specified, all params known to the hub are returned.\n+ * alternatively you can use a query string ?configuration=timeout,servlets\n  *\n- * {\"configuration\": []  }\n+ * if no param is specified, all params known to the hub are returned.\n  *\n  */\n public class HubStatusServlet extends RegistryBasedServlet {\n@@ -101,7 +102,10 @@ private JsonObject getResponse(HttpServletRequest request) throws IOException {\n       if (request.getInputStream() != null) {\n         JsonObject requestJSON = getRequestJSON(request);\n         List<String> keysToReturn = null;\n-        if (requestJSON != null && requestJSON.has(\"configuration\")) {\n+\n+        if (request.getParameter(\"configuration\") != null && !\"\".equals(request.getParameter(\"configuration\"))) {\n+          keysToReturn = Arrays.asList(request.getParameter(\"configuration\").split(\",\"));\n+        } else if (requestJSON != null && requestJSON.has(\"configuration\")) {\n           keysToReturn = new Gson().fromJson(requestJSON.getAsJsonArray(\"configuration\"), ArrayList.class);\n         }\n \n", "test_patch": "diff --git a/java/server/test/org/openqa/grid/internal/StatusServletTests.java b/java/server/test/org/openqa/grid/internal/StatusServletTests.java\nindex 48d9e69926..cb2eae9818 100644\n--- a/java/server/test/org/openqa/grid/internal/StatusServletTests.java\n+++ b/java/server/test/org/openqa/grid/internal/StatusServletTests.java\n@@ -52,6 +52,7 @@\n import java.io.InputStreamReader;\n import java.net.URL;\n import java.net.URLEncoder;\n+import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.Map;\n \n@@ -273,6 +274,34 @@ public void testHubGetSpecifiedConfig() throws IOException {\n \n   }\n \n+  /**\n+   * if a certain set of parameters are requested to the hub, only those params are returned.\n+   * @throws IOException\n+   */\n+  @Test\n+  public void testHubGetSpecifiedConfigWithQueryString() throws IOException {\n+\n+    HttpClient client = httpClientFactory.getHttpClient();\n+\n+    ArrayList<String> keys = new ArrayList<>();\n+    keys.add(URLEncoder.encode(\"timeout\", \"UTF-8\"));\n+    keys.add(URLEncoder.encode(\"I'm not a valid key\", \"UTF-8\"));\n+    keys.add(URLEncoder.encode(\"servlets\", \"UTF-8\"));\n+\n+    String query = \"?configuration=\" + String.join(\",\",keys);\n+    String url = hubApi.toExternalForm() + query ;\n+    BasicHttpEntityEnclosingRequest r = new BasicHttpEntityEnclosingRequest(\"GET\", url);\n+\n+    HttpResponse response = client.execute(host, r);\n+    assertEquals(200, response.getStatusLine().getStatusCode());\n+    JsonObject o = extractObject(response);\n+\n+    assertTrue(o.get(\"success\").getAsBoolean());\n+    assertEquals(12345, o.get(\"timeout\").getAsInt());\n+    assertNull(o.get(\"I'm not a valid key\"));\n+    assertTrue(o.getAsJsonArray(\"servlets\").size() == 0);\n+    assertFalse(o.has(\"capabilityMatcher\"));\n+  }\n \n   /**\n    * when no param is specified, a call to the hub API returns all the config params the hub\n", "instance_id": "seleniumhq__selenium-2771", "fixed_tests": {}, "failed_tests": [], "skipped_tests": [], "run_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "test_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "fix_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "f2p_tests": {}, "p2p_tests": {}, "s2p_tests": {}, "n2p_tests": {}}
{"org": "seleniumhq", "repo": "selenium", "number": 2789, "title": "Fix #2721 and cleanup/refactor node registration request", "body": "- [X] By placing an `X` in the preceding checkbox, I verify that I have signed the [Contributor License Agreement](https://github.com/SeleniumHQ/selenium/blob/master/CONTRIBUTING.md#step-6-sign-the-cla)\n\n---\n- Fix serialization/deserialization of `List<DesiredCapabilities>`\n  for `GridNodeCofiguration`\n- Change the format of node config files for Selenium V3 - There\n  is no need to have the redundant `configuration: { ... }` section.\n- Change the message in `RegistrationRequest` such that it does not\n  contain dupicative information in separate json objects ..\n  `\"id\"` and `\"capabilities\"` are part of `\"configuration\"` in Selenium V3\n- Cleanup the api for `RegistrationRequest` -- will break compilation for\n  people moving from 2.x -- removed the ability to change the\n  GridNodeConfiguration reference via the `RegistrationRequest` object and\n  removed all other setters.\n- Add ability to handle booleans in `BrowserDesiredCapabilityConverter`\n- Add ability to get a `GridRole` by String\n- Update/Add tests\n\n---\n\nNote this change set makes the expected format of `nodeConfig.json` for V3 look like this;\n\n``` json\n{\n  \"capabilities\": [\n    {\n      \"browserName\": \"firefox\",\n      \"maxInstances\": 10\n    }\n  ],\n  \"proxy\": \"org.openqa.grid.selenium.proxy.DefaultRemoteProxy\",\n  \"maxSession\": 10,\n  \"port\": 5557,\n  \"register\": true,\n  \"registerCycle\": 4000\n}\n```\n\ninstead of this;\n\n``` json\n{\n  \"capabilities\": [\n    {\n      \"browserName\": \"firefox\",\n      \"maxInstances\": 10\n    }\n  ],\n  \"configuration\": {\n      \"proxy\": \"org.openqa.grid.selenium.proxy.DefaultRemoteProxy\",\n      \"maxSession\": 10,\n      \"port\": 5557,\n      \"register\": true,\n      \"registerCycle\": 4000\n  }\n}\n```\n\nThe same is true for the registration request that is sent from the node to the hub. Also note, this change set handles the older registration request from 2.x and 3.0.0-beta nodes \n", "state": "closed", "base": {"label": "SeleniumHQ:master", "ref": "master", "sha": "db9a71af34b6696481dfd42659e98e38dab49b55"}, "resolved_issues": [{"number": 2721, "title": "Settings supplied via json are not applied when starting hub & node using selenium-server-standalone-3.0.0-beta2.jar", "body": "## Meta -\n\nOS:  Windows 10\n\n<!-- Windows 10? OSX? -->\n\nSelenium Version:  3.0.0-beta2\n\n<!-- 3.0.0-beta2, IDE, etc -->\n\nBrowser:  N/A\n\n<!-- Internet Explorer?  Firefox? \n\nFIREFOX 48+ IS ONLY COMPATIBLE WITH GECKODRIVER. Any issue logged here for 48+ will be closed as a duplicate of #2559\n\nIf the issue is with Google Chrome consider logging an issue with chromedriver instead:\nhttps://sites.google.com/a/chromium.org/chromedriver/help\n\nIf the issue is with Microsoft Edge consider logging an issue with Microsoft instead:\nhttps://developer.microsoft.com/en-us/microsoft-edge/platform/issues/\n\nIf the issue is with Firefox GeckoDriver (aka Marionette) consider logging an issue with Mozilla:\nhttps://bugzilla.mozilla.org/buglist.cgi?product=Testing&component=Marionette\n\nIf the issue is with PhantomJS consider logging an issue with Ghostdriver:\nhttps://github.com/detro/ghostdriver\n\n-->\n\nBrowser Version:  \n\n<!-- e.g.: 49.0.2623.87 (64-bit) -->\n## Expected Behavior -\n\nSettings from hubConfig.json & nodeConfig.json are applied when starting selenium-server-standalone as hub or node (the attached hubConfig.json is set to run the hub on port 7777 with timeout:15 & browserTimeout:15, and nodeConfig.json is set to run the node on port 6666 with fairly standard settings)\n## Actual Behavior -\n\nThe hub runs on port 4444 with default timeouts set and the node on 5555.\nThere is no mention of the hubConfig.json settings under the 'the final configuration comes from' heading when viewing the Grid Console page\n## Steps to reproduce -\n\n<!-- \nPlease be sure to include an SSCCE (Short, Self Contained, Correct [compilable] example) http://sscce.org/ \nIf you can't provide a link to the page, consider creating a reproducible page on https://jsfiddle.net/\n-->\n1. Unpack the attached example.zip to any location on your machine\n2. Run grid-hub.bat\n3. Run grid-node.bat\n4. Open http://localhost:4444/grid/console?config=true&configDebug=true\n## Additional Info -\n\nWhen swapping out selenium-server-standalone-3.0.0-beta2.jar for the 2.53.1 version (and changing the SELENIUM_VERSION value to 2.53.1 in both batch files), all settings in the json files are applied as expected when starting the hub & node\nThe same behaviour is also seen when running with selenium-server-standalone-3.0.0-beta1.jar\n\n[example.zip](https://github.com/SeleniumHQ/selenium/files/455622/example.zip)\n", "state": "closed", "created_at": "2016-09-05T21:36:13Z", "closed_at": "2016-09-22T03:39:13Z", "labels": []}], "fix_patch": "diff --git a/java/server/src/org/openqa/grid/common/GridRole.java b/java/server/src/org/openqa/grid/common/GridRole.java\nindex 07df5ce4af..7d1ea2ccb4 100644\n--- a/java/server/src/org/openqa/grid/common/GridRole.java\n+++ b/java/server/src/org/openqa/grid/common/GridRole.java\n@@ -20,24 +20,46 @@\n public enum GridRole {\n   NOT_GRID, HUB, NODE;\n \n+  private static final String WD_S = \"wd\";\n+  private static final String WEBDRIVER_S = \"webdriver\";\n+  private static final String NODE_S = \"node\";\n+  private static final String HUB_S = \"hub\";\n+  private static final String STANDALONE_S = \"standalone\";\n+\n   public static GridRole get(String role) {\n     if (role == null || role.equals(\"\")) {\n       return NOT_GRID;\n     }\n     switch (role) {\n-      case \"wd\":\n-      case \"webdriver\":\n-      case \"node\":\n+      case WD_S:\n+      case WEBDRIVER_S:\n+      case NODE_S:\n         return NODE;\n \n-      case \"hub\":\n+      case HUB_S:\n         return HUB;\n \n-      case \"standalone\":\n+      case STANDALONE_S:\n         return NOT_GRID;\n \n       default:\n         return null;\n     }\n   }\n+\n+  public String toString() {\n+    switch (this) {\n+      case NODE:\n+        return NODE_S;\n+\n+      case HUB:\n+        return HUB_S;\n+\n+      case NOT_GRID:\n+        return STANDALONE_S;\n+\n+      default:\n+        throw new IllegalStateException(\"Unrecognized GridRole\");\n+    }\n+  }\n }\n\ndiff --git a/java/server/src/org/openqa/grid/common/RegistrationRequest.java b/java/server/src/org/openqa/grid/common/RegistrationRequest.java\nindex 8c8687cf23..5b7c0e5aea 100644\n--- a/java/server/src/org/openqa/grid/common/RegistrationRequest.java\n+++ b/java/server/src/org/openqa/grid/common/RegistrationRequest.java\n@@ -17,270 +17,241 @@\n \n package org.openqa.grid.common;\n \n-import com.google.gson.Gson;\n-import com.google.gson.JsonArray;\n+import com.google.common.reflect.TypeToken;\n+import com.google.gson.GsonBuilder;\n import com.google.gson.JsonObject;\n-import com.google.gson.JsonParser;\n import com.google.gson.JsonSyntaxException;\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n \n import org.openqa.grid.common.exception.GridConfigurationException;\n import org.openqa.grid.internal.utils.configuration.GridNodeConfiguration;\n+import org.openqa.grid.internal.utils.configuration.GridNodeConfiguration.CollectionOfDesiredCapabilitiesDeSerializer;\n+import org.openqa.grid.internal.utils.configuration.GridNodeConfiguration.CollectionOfDesiredCapabilitiesSerializer;\n import org.openqa.selenium.Platform;\n import org.openqa.selenium.net.NetworkUtils;\n import org.openqa.selenium.remote.DesiredCapabilities;\n-import org.openqa.selenium.remote.JsonToBeanConverter;\n \n-import java.util.ArrayList;\n import java.util.List;\n-import java.util.Map;\n \n /**\n- * helper to register to the grid. Using JSON to exchange the object between the node and grid.\n+ * Helper to register to the grid. Using JSON to exchange the object between the node and the hub.\n  */\n public class RegistrationRequest {\n \n-  private String name;\n-  private String description;\n-\n-  private GridRole role;\n-  private List<DesiredCapabilities> capabilities = new ArrayList<>();\n-  private GridNodeConfiguration configuration = new GridNodeConfiguration();\n-\n   // some special param for capability\n   public static final String MAX_INSTANCES = \"maxInstances\";\n   // see enum SeleniumProtocol\n   public static final String SELENIUM_PROTOCOL = \"seleniumProtocol\";\n   public static final String PATH = \"path\";\n \n-  public RegistrationRequest() {\n-  }\n+  @SerializedName( \"class\" )\n+  @Expose( deserialize = false)\n+  private final String clazz = RegistrationRequest.class.getCanonicalName();\n+  @Expose\n+  private String name;\n+  @Expose\n+  private String description;\n+  @Expose\n+  private GridNodeConfiguration configuration;\n \n-  public String getName() {\n-    return name;\n+  /**\n+   * Create a new registration request using the default values of a\n+   * {@link GridNodeConfiguration}\n+   */\n+  public RegistrationRequest() {\n+    this(new GridNodeConfiguration());\n   }\n \n-  public void setName(String name) {\n-    this.name = name;\n+  /**\n+   * Create a new registration request using the supplied {@link GridNodeConfiguration}\n+   * @param configuration the {@link GridNodeConfiguration} to use\n+   */\n+  public RegistrationRequest(GridNodeConfiguration configuration) {\n+    this(configuration, null, null);\n   }\n \n-  public String getDescription() {\n-    return description;\n+  /**\n+   * Create a new registration request using the supplied {@link GridNodeConfiguration}, and name\n+   * @param configuration the {@link GridNodeConfiguration} to use\n+   * @param name the name for the remote\n+   */\n+  public RegistrationRequest(GridNodeConfiguration configuration, String name) {\n+    this(configuration, name, null);\n   }\n \n-  public void setDescription(String description) {\n+  /**\n+   * Create a new registration request using the supplied {@link GridNodeConfiguration}, name, and\n+   * description\n+   * @param configuration the {@link GridNodeConfiguration} to use\n+   * @param name the name for the remote\n+   * @param description the description for the remote host\n+   */\n+  public RegistrationRequest(GridNodeConfiguration configuration, String name, String description) {\n+    this.configuration = configuration;\n+    this.name = name;\n     this.description = description;\n-  }\n-\n-  public List<DesiredCapabilities> getCapabilities() {\n-    return capabilities;\n-  }\n \n-  public void addDesiredCapability(DesiredCapabilities c) {\n-    this.capabilities.add(c);\n+    // make sure we have something that looks like a valid host\n+    fixUpHost();\n+    // make sure the capabilities are updated with required fields\n+    fixUpCapabilities();\n   }\n \n-  public void addDesiredCapability(Map<String, Object> c) {\n-    this.capabilities.add(new DesiredCapabilities(c));\n+  public String getName() {\n+    return name;\n   }\n \n-  public void setCapabilities(List<DesiredCapabilities> capabilities) {\n-    this.capabilities = capabilities;\n+  public String getDescription() {\n+    return description;\n   }\n \n   public GridNodeConfiguration getConfiguration() {\n     return configuration;\n   }\n \n-  public void setConfiguration(GridNodeConfiguration configuration) {\n-    this.configuration = configuration;\n-  }\n+  public JsonObject toJson() {\n+    GsonBuilder builder = new GsonBuilder();\n+    builder.registerTypeAdapter(new TypeToken<List<DesiredCapabilities>>(){}.getType(),\n+                                new CollectionOfDesiredCapabilitiesSerializer());\n \n-  public String toJSON() {\n-    return new Gson().toJson(getAssociatedJSON());\n+    return builder.excludeFieldsWithoutExposeAnnotation().create()\n+      .toJsonTree(this, RegistrationRequest.class).getAsJsonObject();\n   }\n \n-  public JsonObject getAssociatedJSON() {\n-    JsonObject res = new JsonObject();\n-\n-    res.addProperty(\"class\", getClass().getCanonicalName());\n-    res.addProperty(\"id\", configuration.id);\n-    res.addProperty(\"name\", name);\n-    res.addProperty(\"description\", description);\n-    res.add(\"configuration\", configuration.toJson());\n-    JsonArray caps = new JsonArray();\n-    for (DesiredCapabilities c : capabilities) {\n-      caps.add(new Gson().toJsonTree(c.asMap()));\n-    }\n-    res.add(\"capabilities\", caps);\n+  /**\n+   * Create an object from a registration request formatted as a JsonObject\n+   *\n+   * @param json JsonObject\n+   * @return\n+   */\n+  public static RegistrationRequest fromJson(JsonObject json) throws JsonSyntaxException {\n+    GsonBuilder builder = new GsonBuilder();\n+    builder.registerTypeAdapter(new TypeToken<List<DesiredCapabilities>>(){}.getType(),\n+                                new CollectionOfDesiredCapabilitiesDeSerializer());\n \n-    return res;\n-  }\n+    RegistrationRequest request = builder.excludeFieldsWithoutExposeAnnotation().create()\n+      .fromJson(json, RegistrationRequest.class);\n \n+    return request;\n+  }\n \n   /**\n    * Create an object from a registration request formatted as a json string.\n    *\n-   * @param json JSON\n-   * @return create a request from the JSON request received.\n+   * @param json JSON String\n+   * @return\n    */\n-  @SuppressWarnings(\"unchecked\")\n-  // JSON lib\n-  public static RegistrationRequest getNewInstance(String json) throws JsonSyntaxException {\n-    RegistrationRequest request = new RegistrationRequest();\n-    JsonObject o = new JsonParser().parse(json).getAsJsonObject();\n-\n-    if (o.has(\"name\")) {\n-      request.setName(o.get(\"name\").getAsString());\n-    }\n-    if (o.has(\"description\")) {\n-      request.setDescription(o.get(\"description\").getAsString());\n-    }\n+  public static RegistrationRequest fromJson(String json) throws JsonSyntaxException {\n+    GsonBuilder builder = new GsonBuilder();\n+    builder.registerTypeAdapter(new TypeToken<List<DesiredCapabilities>>(){}.getType(),\n+                                new CollectionOfDesiredCapabilitiesDeSerializer());\n \n-    JsonObject config = o.get(\"configuration\").getAsJsonObject();\n-    GridNodeConfiguration configuration = GridNodeConfiguration.loadFromJSON(config);\n-    request.setConfiguration(configuration);\n+    RegistrationRequest request = builder.excludeFieldsWithoutExposeAnnotation().create()\n+      .fromJson(json, RegistrationRequest.class);\n \n-    // make sure 'id' has a value\n-    if (o.has(\"id\")) {\n-      request.configuration.id = o.get(\"id\").getAsString();\n-    } else {\n-      request.configuration.id = request.configuration.getRemoteHost();\n-    }\n-\n-    JsonArray capabilities = o.get(\"capabilities\").getAsJsonArray();\n-\n-    for (int i = 0; i < capabilities.size(); i++) {\n-      DesiredCapabilities cap = new JsonToBeanConverter()\n-        .convert(DesiredCapabilities.class, capabilities.get(i));\n-      request.capabilities.add(cap);\n-    }\n     return request;\n   }\n \n   /**\n-   * if a PROXY_CLASS is specified in the request, the proxy created following this request will be\n-   * of that type. If nothing is specified, it will use RemoteProxy\n-   *\n-   * @return null if no class was specified.\n+   * Build a RegistrationRequest from the provided {@link GridNodeConfiguration}. This is different\n+   * than {@code new RegistrationRequest(GridNodeConfiguration)} because it will merge the provided\n+   * configuration onto the {@link GridNodeConfiguration#DEFAULT_NODE_CONFIG_FILE} and then \"fixup\"\n+   * the resulting RegistrationRequest before returning the result\n+   * @param configuration the {@link GridNodeConfiguration} to use\n+   * @return\n    */\n-  public String getRemoteProxyClass() {\n-    return configuration.proxy;\n+  public static RegistrationRequest build(GridNodeConfiguration configuration) {\n+    return RegistrationRequest.build(configuration, null, null);\n   }\n \n-  public static RegistrationRequest build(GridNodeConfiguration configuration) {\n-    RegistrationRequest res = newFromJSON(\"defaults/DefaultNodeWebDriver.json\");\n+  /**\n+   * Build a RegistrationRequest from the provided {@link GridNodeConfiguration}, use the provided name.\n+   * This is different than {@code new RegistrationRequest(GridNodeConfiguration, String)} because it\n+   * will merge the provided configuration onto the {@link GridNodeConfiguration#DEFAULT_NODE_CONFIG_FILE}\n+   * and then \"fixup\" the resulting RegistrationRequest before returning the result\n+   * @param configuration the {@link GridNodeConfiguration} to use\n+   * @param name the name for the remote\n+   * @return\n+   */\n+  public static RegistrationRequest build(GridNodeConfiguration configuration, String name) {\n+    return RegistrationRequest.build(configuration, name, null);\n+  }\n+\n+  /**\n+   * Build a RegistrationRequest from the provided {@link GridNodeConfiguration}, use the provided name\n+   * and description. This is different than\n+   * {@code new RegistrationRequest(GridNodeConfiguration, String, String)} because it will merge the\n+   * provided configuration onto the {@link GridNodeConfiguration#DEFAULT_NODE_CONFIG_FILE}\n+   * and then \"fixup\" the resulting RegistrationRequest before returning the result\n+   * @param configuration the {@link GridNodeConfiguration} to use\n+   * @param name the name for the remote\n+   * @param description the description for the remote host\n+   * @return\n+   */\n+  public static RegistrationRequest build(GridNodeConfiguration configuration, String name, String description) {\n+    RegistrationRequest pendingRequest =\n+      new RegistrationRequest(GridNodeConfiguration\n+                                .loadFromJSON(GridNodeConfiguration.DEFAULT_NODE_CONFIG_FILE));\n \n     if (configuration.nodeConfigFile != null) {\n-      res.loadFromJSON(configuration.nodeConfigFile);\n+      pendingRequest.configuration = GridNodeConfiguration.loadFromJSON(configuration.nodeConfigFile);\n     }\n \n-    res.configuration.merge(configuration);\n+    pendingRequest.configuration.merge(configuration);\n+    //update important merge protected values for the pendingRequest we are building.\n     if (configuration.host != null) {\n-      res.configuration.host = configuration.host;\n+      pendingRequest.configuration.host = configuration.host;\n     }\n-    res.configuration.host = guessHost(res.configuration.host);\n     if (configuration.port != null) {\n-      res.configuration.port = configuration.port;\n+      pendingRequest.configuration.port = configuration.port;\n     }\n \n-    res.role = GridRole.get(configuration.role);\n-    res.addPlatformInfoToCapabilities();\n+    pendingRequest.name = name;\n+    pendingRequest.description = description;\n \n-    if (configuration.browser.size() > 0) {\n-      res.capabilities = configuration.browser;\n-    }\n-\n-    for (DesiredCapabilities cap : res.capabilities) {\n-      if (cap.getCapability(SELENIUM_PROTOCOL) == null) {\n-        cap.setCapability(SELENIUM_PROTOCOL, SeleniumProtocol.WebDriver.toString());\n-      }\n-    }\n+    // make sure we have a valid host\n+    pendingRequest.fixUpHost();\n+    // make sure the capabilities are updated with required fields\n+    pendingRequest.fixUpCapabilities();\n \n-    return res;\n+    return pendingRequest;\n   }\n \n-  private void addPlatformInfoToCapabilities() {\n+  private void fixUpCapabilities() {\n     Platform current = Platform.getCurrent();\n-    for (DesiredCapabilities cap : capabilities) {\n+    for (DesiredCapabilities cap : configuration.capabilities) {\n       if (cap.getPlatform() == null) {\n         cap.setPlatform(current);\n       }\n+      if (cap.getCapability(SELENIUM_PROTOCOL) == null) {\n+        cap.setCapability(SELENIUM_PROTOCOL, SeleniumProtocol.WebDriver.toString());\n+      }\n     }\n   }\n \n-  private static String guessHost(String host) {\n-    if (host == null || \"ip\".equalsIgnoreCase(host)) {\n+  private void fixUpHost() {\n+    if (configuration.host == null || \"ip\".equalsIgnoreCase(configuration.host)) {\n       NetworkUtils util = new NetworkUtils();\n-      return util.getIp4NonLoopbackAddressOfThisMachine().getHostAddress();\n-    } else if (\"host\".equalsIgnoreCase(host)) {\n+      configuration.host = util.getIp4NonLoopbackAddressOfThisMachine().getHostAddress();\n+    } else if (\"host\".equalsIgnoreCase(configuration.host)) {\n       NetworkUtils util = new NetworkUtils();\n-      return util.getIp4NonLoopbackAddressOfThisMachine().getHostName();\n-    } else {\n-      return host;\n+      configuration.host = util.getIp4NonLoopbackAddressOfThisMachine().getHostName();\n     }\n   }\n \n-  /**\n-   * add config, but overwrite capabilities.\n-   *\n-   * @param resource resource\n-   */\n-  public void loadFromJSON(String resource) {\n-    try {\n-      JsonObject base = JSONConfigurationUtils.loadJSON(resource);\n-\n-      if (base.has(\"capabilities\")) {\n-        capabilities = new ArrayList<>();\n-        JsonArray a = base.get(\"capabilities\").getAsJsonArray();\n-        for (int i = 0; i < a.size(); i++) {\n-          DesiredCapabilities c = new JsonToBeanConverter()\n-              .convert(DesiredCapabilities.class, a.get(i));\n-          capabilities.add(c);\n-        }\n-        addPlatformInfoToCapabilities();\n-      }\n-\n-      GridNodeConfiguration loadedConfiguration = new Gson().fromJson(base.get(\"configuration\"), GridNodeConfiguration.class);\n-      configuration.merge(loadedConfiguration);\n-      if (loadedConfiguration.host != null) {\n-        configuration.host = loadedConfiguration.host;\n-      }\n-      if (loadedConfiguration.port != null) {\n-        configuration.port = loadedConfiguration.port;\n-      }\n-\n-\n-    } catch (Throwable e) {\n-      throw new GridConfigurationException(\"Error with the JSON of the config : \" + e.getMessage(),\n-          e);\n-    }\n-  }\n-\n-  public static RegistrationRequest newFromJSON(String resource) {\n-    RegistrationRequest req = new RegistrationRequest();\n-    req.loadFromJSON(resource);\n-    return req;\n-  }\n-\n-  public GridRole getRole() {\n-    return role;\n-  }\n-\n-  public void setRole(GridRole role) {\n-    this.role = role;\n-  }\n-\n   /**\n    * Validate the current setting and throw a config exception is an invalid setup is detected.\n    *\n    * @throws GridConfigurationException grid configuration\n    */\n   public void validate() throws GridConfigurationException {\n-    String hub = configuration.getHubHost();\n-    Integer port = configuration.getHubPort();\n-    if (hub == null || port == null) {\n-      throw new GridConfigurationException(\"You need to specify a hub to register to using -hubHost X -hubPort 5555.\"\n-          + \"The specified config was -hubHost\" + hub + \" -hubPort \" + port);\n+    // validations occur here in the getters called on the configuration.\n+    try {\n+      configuration.getHubHost();\n+      configuration.getHubPort();\n+    } catch (RuntimeException e) {\n+      throw new GridConfigurationException(e.getMessage());\n     }\n   }\n \n\ndiff --git a/java/server/src/org/openqa/grid/common/defaults/DefaultNodeWebDriver.json b/java/server/src/org/openqa/grid/common/defaults/DefaultNodeWebDriver.json\nindex 34f5b4dbde..5c83ac1c50 100644\n--- a/java/server/src/org/openqa/grid/common/defaults/DefaultNodeWebDriver.json\n+++ b/java/server/src/org/openqa/grid/common/defaults/DefaultNodeWebDriver.json\n@@ -1,30 +1,27 @@\n {\n   \"capabilities\":\n-      [\n-        {\n-          \"browserName\": \"firefox\",\n-          \"maxInstances\": 5,\n-          \"seleniumProtocol\": \"WebDriver\"\n-        },\n-        {\n-          \"browserName\": \"chrome\",\n-          \"maxInstances\": 5,\n-          \"seleniumProtocol\": \"WebDriver\"\n-        },\n-        {\n-          \"platform\": \"WINDOWS\",\n-          \"browserName\": \"internet explorer\",\n-          \"maxInstances\": 1,\n-          \"seleniumProtocol\": \"WebDriver\"\n-        }\n-      ],\n-  \"configuration\":\n-  {\n-    \"proxy\": \"org.openqa.grid.selenium.proxy.DefaultRemoteProxy\",\n-    \"maxSession\": 5,\n-    \"port\": 5555,\n-    \"register\": true,\n-    \"registerCycle\": 5000,\n-    \"hub\": \"http://localhost:4444\"\n-  }\n+  [\n+    {\n+      \"browserName\": \"firefox\",\n+      \"maxInstances\": 5,\n+      \"seleniumProtocol\": \"WebDriver\"\n+    },\n+    {\n+      \"browserName\": \"chrome\",\n+      \"maxInstances\": 5,\n+      \"seleniumProtocol\": \"WebDriver\"\n+    },\n+    {\n+      \"platform\": \"WINDOWS\",\n+      \"browserName\": \"internet explorer\",\n+      \"maxInstances\": 1,\n+      \"seleniumProtocol\": \"WebDriver\"\n+    }\n+  ],\n+  \"proxy\": \"org.openqa.grid.selenium.proxy.DefaultRemoteProxy\",\n+  \"maxSession\": 5,\n+  \"port\": 5555,\n+  \"register\": true,\n+  \"registerCycle\": 5000,\n+  \"hub\": \"http://localhost:4444\"\n }\n\ndiff --git a/java/server/src/org/openqa/grid/internal/BaseRemoteProxy.java b/java/server/src/org/openqa/grid/internal/BaseRemoteProxy.java\nindex 275df57312..b738b8cb64 100644\n--- a/java/server/src/org/openqa/grid/internal/BaseRemoteProxy.java\n+++ b/java/server/src/org/openqa/grid/internal/BaseRemoteProxy.java\n@@ -138,7 +138,7 @@ public BaseRemoteProxy(RegistrationRequest request, Registry registry) {\n       this.id = remoteHost.toExternalForm();\n     }\n \n-    List<DesiredCapabilities> capabilities = request.getCapabilities();\n+    List<DesiredCapabilities> capabilities = request.getConfiguration().capabilities;\n \n     List<TestSlot> slots = new ArrayList<>();\n     for (DesiredCapabilities capability : capabilities) {\n@@ -391,7 +391,7 @@ public boolean isBusy() {\n   public static <T extends RemoteProxy> T getNewInstance(\n       RegistrationRequest request, Registry registry) {\n     try {\n-      String proxyClass = request.getRemoteProxyClass();\n+      String proxyClass = request.getConfiguration().proxy;\n       if (proxyClass == null) {\n         log.fine(\"No proxy class. Using default\");\n         proxyClass = BaseRemoteProxy.class.getCanonicalName();\n\ndiff --git a/java/server/src/org/openqa/grid/internal/utils/SelfRegisteringRemote.java b/java/server/src/org/openqa/grid/internal/utils/SelfRegisteringRemote.java\nindex 8e6e3d846f..2392c5b1c3 100644\n--- a/java/server/src/org/openqa/grid/internal/utils/SelfRegisteringRemote.java\n+++ b/java/server/src/org/openqa/grid/internal/utils/SelfRegisteringRemote.java\n@@ -56,26 +56,29 @@ public class SelfRegisteringRemote {\n \n   private static final Logger LOG = Logger.getLogger(SelfRegisteringRemote.class.getName());\n \n-  private final RegistrationRequest nodeConfig;\n+  private final RegistrationRequest registrationRequest;\n \n   private final HttpClientFactory httpClientFactory;\n \n   private final Map<String, Class<? extends Servlet>> nodeServlets;\n \n-  public SelfRegisteringRemote(RegistrationRequest config) {\n-    this.nodeConfig = config;\n+  private boolean hasId;\n+\n+  public SelfRegisteringRemote(RegistrationRequest request) {\n+    this.registrationRequest = request;\n     this.httpClientFactory = new HttpClientFactory();\n     this.nodeServlets = new HashMap<>();\n \n-    nodeConfig.validate();\n+    registrationRequest.validate();\n \n     try {\n       GridHubConfiguration hubConfiguration = getHubConfiguration();\n+      // the node can not set these values. They must come from the hub\n       if (hubConfiguration.timeout != null) {\n-        nodeConfig.getConfiguration().timeout = hubConfiguration.timeout;\n+        registrationRequest.getConfiguration().timeout = hubConfiguration.timeout;\n       }\n       if (hubConfiguration.browserTimeout != null) {\n-        nodeConfig.getConfiguration().browserTimeout = hubConfiguration.browserTimeout;\n+        registrationRequest.getConfiguration().browserTimeout = hubConfiguration.browserTimeout;\n       }\n     } catch (Exception e) {\n       LOG.warning(\n@@ -84,18 +87,18 @@ public SelfRegisteringRemote(RegistrationRequest config) {\n     }\n \n     // add the resource servlet for nodes\n-    if (!nodeConfig.getConfiguration().isWithOutServlet(ResourceServlet.class)) {\n+    if (!registrationRequest.getConfiguration().isWithOutServlet(ResourceServlet.class)) {\n       nodeServlets.put(\"/resources/*\", ResourceServlet.class);\n     }\n \n     // add the user supplied servlet(s) for nodes\n-    addExtraServlets(nodeConfig.getConfiguration().servlets);\n-\n+    addExtraServlets(registrationRequest.getConfiguration().servlets);\n   }\n \n+\n   public URL getRemoteURL() {\n-    String host = nodeConfig.getConfiguration().host;\n-    Integer port = nodeConfig.getConfiguration().port;\n+    String host = registrationRequest.getConfiguration().host;\n+    Integer port = registrationRequest.getConfiguration().port;\n     String url = \"http://\" + host + \":\" + port;\n \n     try {\n@@ -126,7 +129,7 @@ public void stopRemoteServer() {\n   }\n \n   public void deleteAllBrowsers() {\n-    nodeConfig.getCapabilities().clear();\n+    registrationRequest.getConfiguration().capabilities.clear();\n   }\n \n   /**\n@@ -145,7 +148,7 @@ public void addBrowser(DesiredCapabilities cap, int instances) {\n       cap.setPlatform(Platform.getCurrent());\n     }\n     cap.setCapability(RegistrationRequest.MAX_INSTANCES, instances);\n-    nodeConfig.getCapabilities().add(cap);\n+    registrationRequest.getConfiguration().capabilities.add(cap);\n   }\n \n   /**\n@@ -164,14 +167,15 @@ public void sendRegistrationRequest() {\n    * - register again every X ms is specified in the config of the node.\n    */\n   public void startRegistrationProcess() {\n-    LOG.fine(\"Using the json request : \" + nodeConfig.toJSON());\n+    fixUpId();\n+    LOG.fine(\"Using the json request : \" + registrationRequest.toJson());\n \n-    Boolean register = nodeConfig.getConfiguration().register;\n+    Boolean register = registrationRequest.getConfiguration().register;\n \n     if (!register) {\n       LOG.info(\"No registration sent ( register = false )\");\n     } else {\n-      final int registerCycleInterval = nodeConfig.getConfiguration().registerCycle;\n+      final int registerCycleInterval = registrationRequest.getConfiguration().registerCycle;\n       if (registerCycleInterval > 0) {\n         new Thread(new Runnable() { // Thread safety reviewed\n \n@@ -208,16 +212,16 @@ public void run() {\n   }\n \n   public void setTimeout(int timeout, int cycle) {\n-    nodeConfig.getConfiguration().timeout = timeout;\n-    nodeConfig.getConfiguration().cleanUpCycle = cycle;\n+    registrationRequest.getConfiguration().timeout = timeout;\n+    registrationRequest.getConfiguration().cleanUpCycle = cycle;\n   }\n \n   public void setMaxConcurrent(int max) {\n-    nodeConfig.getConfiguration().maxSession = max;\n+    registrationRequest.getConfiguration().maxSession = max;\n   }\n \n   public GridNodeConfiguration getConfiguration() {\n-    return nodeConfig.getConfiguration();\n+    return registrationRequest.getConfiguration();\n   }\n \n   /**\n@@ -235,10 +239,10 @@ protected Map<String, Class <? extends Servlet>> getNodeServlets() {\n   }\n \n   private void registerToHub(boolean checkPresenceFirst) {\n-    if (!checkPresenceFirst || !isAlreadyRegistered(nodeConfig)) {\n+    if (!checkPresenceFirst || !isAlreadyRegistered(registrationRequest)) {\n       String tmp =\n-          \"http://\" + nodeConfig.getConfiguration().getHubHost() + \":\"\n-              + nodeConfig.getConfiguration().getHubPort() + \"/grid/register\";\n+        \"http://\" + registrationRequest.getConfiguration().getHubHost() + \":\"\n+        + registrationRequest.getConfiguration().getHubPort() + \"/grid/register\";\n \n       HttpClient client = httpClientFactory.getHttpClient();\n       try {\n@@ -248,7 +252,7 @@ private void registerToHub(boolean checkPresenceFirst) {\n         BasicHttpEntityEnclosingRequest r =\n             new BasicHttpEntityEnclosingRequest(\"POST\", registration.toExternalForm());\n         updateConfigWithRealPort();\n-        String json = nodeConfig.toJSON();\n+        String json = registrationRequest.toJson().toString();\n         r.setEntity(new StringEntity(json,\"UTF-8\"));\n \n         HttpHost host = new HttpHost(registration.getHost(), registration.getPort());\n@@ -283,11 +287,26 @@ private void addExtraServlets(List<String> servlets) {\n     }\n   }\n \n+  private void fixUpId() {\n+    if (hasId) {\n+      return;\n+    }\n+\n+    // make sure 'id' has a value.\n+    if (registrationRequest.getConfiguration().id == null || registrationRequest\n+      .getConfiguration().id.isEmpty()) {\n+      registrationRequest.getConfiguration().id =\n+        registrationRequest.getConfiguration().getRemoteHost();\n+    }\n+\n+    hasId = true;\n+  }\n+\n   void updateConfigWithRealPort() throws MalformedURLException {\n-    if (nodeConfig.getConfiguration().port != 0) {\n+    if (registrationRequest.getConfiguration().port != 0) {\n       return;\n     }\n-    nodeConfig.getConfiguration().port = server.getRealPort();\n+    registrationRequest.getConfiguration().port = server.getRealPort();\n   }\n \n   /**\n@@ -297,8 +316,8 @@ void updateConfigWithRealPort() throws MalformedURLException {\n    */\n   private GridHubConfiguration getHubConfiguration() throws Exception {\n     String hubApi =\n-        \"http://\" + nodeConfig.getConfiguration().getHubHost() + \":\"\n-            + nodeConfig.getConfiguration().getHubPort() + \"/grid/api/hub\";\n+      \"http://\" + registrationRequest.getConfiguration().getHubHost() + \":\"\n+      + registrationRequest.getConfiguration().getHubPort() + \"/grid/api/hub\";\n \n     HttpClient client = httpClientFactory.getHttpClient();\n \n\ndiff --git a/java/server/src/org/openqa/grid/internal/utils/configuration/GridConfiguration.java b/java/server/src/org/openqa/grid/internal/utils/configuration/GridConfiguration.java\nindex dda467c178..e5182b8fe1 100644\n--- a/java/server/src/org/openqa/grid/internal/utils/configuration/GridConfiguration.java\n+++ b/java/server/src/org/openqa/grid/internal/utils/configuration/GridConfiguration.java\n@@ -17,6 +17,8 @@\n \n package org.openqa.grid.internal.utils.configuration;\n \n+import com.google.gson.annotations.Expose;\n+\n import com.beust.jcommander.Parameter;\n \n import org.openqa.grid.internal.utils.configuration.converters.CustomConverter;\n@@ -29,37 +31,47 @@\n \n public class GridConfiguration extends StandaloneConfiguration {\n \n+  /*\n+   * config parameters which serialize and deserialize to/from json\n+   */\n+\n+  @Expose\n   @Parameter(\n     names = \"-cleanUpCycle\",\n     description = \"<Integer> in ms : specifies how often the hub will poll running proxies for timed-out (i.e. hung) threads. Must also specify \\\"timeout\\\" option\"\n   )\n   public Integer cleanUpCycle;\n \n+  @Expose\n   @Parameter(\n     names = \"-custom\",\n     description = \"<String> : NOT RECOMMENDED--may be deprecated to encourage proper servlet customization. Comma separated key=value pairs for custom grid extensions. example: -custom myParamA=Value1,myParamB=Value2\",\n     converter = CustomConverter.class\n   )\n   public Map<String, String> custom = new HashMap<>();\n \n+  @Expose\n   @Parameter(\n     names = \"-host\",\n     description =  \"<String> IP or hostname : usually determined automatically. Most commonly useful in exotic network configurations (e.g. network with VPN)\"\n   )\n   public String host;\n \n+  @Expose\n   @Parameter(\n     names = \"-maxSession\",\n     description = \"<Integer> max number of tests that can run at the same time on the node, irrespective of the browser used\"\n   )\n   public Integer maxSession = 1;\n \n+  @Expose\n   @Parameter(\n     names = {\"-servlet\", \"-servlets\"},\n     description = \"<String> : list of extra servlets the grid (hub or node) will make available. Specify multiple on the command line: -servlet tld.company.ServletA -servlet tld.company.ServletB. The servlet must exist in the path: /grid/admin/ServletA /grid/admin/ServletB\"\n   )\n   public List<String> servlets;\n \n+  @Expose\n   @Parameter(\n     names = {\"-withoutServlet\", \"-withoutServlets\"},\n     description = \"<String> : list of default (hub or node) servlets to disable. Advanced use cases only. Not all default servlets can be disabled. Specify multiple on the command line: -withoutServlet tld.company.ServletA -withoutServlet tld.company.ServletB\"\n\ndiff --git a/java/server/src/org/openqa/grid/internal/utils/configuration/GridHubConfiguration.java b/java/server/src/org/openqa/grid/internal/utils/configuration/GridHubConfiguration.java\nindex 6672a511c3..4902cd6d00 100644\n--- a/java/server/src/org/openqa/grid/internal/utils/configuration/GridHubConfiguration.java\n+++ b/java/server/src/org/openqa/grid/internal/utils/configuration/GridHubConfiguration.java\n@@ -20,6 +20,7 @@\n import com.google.gson.GsonBuilder;\n import com.google.gson.JsonObject;\n import com.google.gson.TypeAdapter;\n+import com.google.gson.annotations.Expose;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonWriter;\n \n@@ -36,6 +37,12 @@\n import java.io.IOException;\n \n public class GridHubConfiguration extends GridConfiguration {\n+  public static final String DEFUALT_HUB_CONFIG_FILE = \"defaults/DefaultHub.json\";\n+  private static final GridHubConfiguration DEFAULT_CONFIG = loadFromJSON(DEFUALT_HUB_CONFIG_FILE);\n+\n+  /*\n+   * config parameters which do not serialize or de-serialize\n+   */\n \n   @Parameter(\n     names = \"-hubConfig\",\n@@ -44,34 +51,40 @@ public class GridHubConfiguration extends GridConfiguration {\n   )\n   public String hubConfig;\n \n+  /*\n+   * config parameters which serialize and deserialize to/from json\n+   */\n+\n+  @Expose\n   @Parameter(\n-    names = {\"-matcher\", \"-capabilityMatcher\"},\n+    names = { \"-matcher\", \"-capabilityMatcher\" },\n     description = \"<String> class name : a class implementing the CapabilityMatcher interface. Specifies the logic the hub will follow to define whether a request can be assigned to a node. For example, if you want to have the matching process use regular expressions instead of exact match when specifying browser version. ALL nodes of a grid ecosystem would then use the same capabilityMatcher, as defined here. Default is org.openqa.grid.internal.utils.DefaultCapabilityMatcher\",\n     converter = CapabilityMatcherString.class\n   )\n   public CapabilityMatcher capabilityMatcher = new DefaultCapabilityMatcher();\n \n+  @Expose\n   @Parameter(\n     names = \"-newSessionWaitTimeout\",\n     description = \"<Integer> in ms : The time after which a new test waiting for a node to become available will time out. When that happens, the test will throw an exception before attempting to start a browser. Defaults to no timeout ( -1 )\"\n   )\n   public Integer newSessionWaitTimeout = -1;\n \n+  @Expose\n   @Parameter(\n     names = \"-prioritizer\",\n     description = \"<String> class name : a class implementing the Prioritizer interface. Specify a custom Prioritizer if you want to sort the order in which new session requests are processed when there is a queue. Default to null ( no priority = FIFO )\",\n     converter = PrioritizerString.class\n   )\n   public Prioritizer prioritizer = null;\n \n+  @Expose\n   @Parameter(\n     names = \"-throwOnCapabilityNotPresent\",\n     description = \"<Boolean> true or false : If true, the hub will reject all test requests if no compatible proxy is currently registered. If set to false, the request will queue until a node supporting the capability is registered with the grid. Default is true\"\n   )\n   public Boolean throwOnCapabilityNotPresent = true;\n \n-  private static final GridHubConfiguration DEFAULT_CONFIG = loadFromJSON(\"defaults/DefaultHub.json\");\n-\n   /**\n    * Init with built-in defaults\n    */\n@@ -97,7 +110,8 @@ public static GridHubConfiguration loadFromJSON(JsonObject json) {\n     try {\n       GsonBuilder builder = new GsonBuilder();\n       GridHubConfiguration.staticAddJsonTypeAdapter(builder);\n-      return builder.create().fromJson(json, GridHubConfiguration.class);\n+      return builder.excludeFieldsWithoutExposeAnnotation().create()\n+        .fromJson(json, GridHubConfiguration.class);\n     } catch (Throwable e) {\n       throw new GridConfigurationException(\"Error with the JSON of the config : \" + e.getMessage(),\n                                            e);\n@@ -189,6 +203,7 @@ public T read(JsonReader in) throws IOException {\n \n   protected static class CapabilityMatcherAdapter extends SimpleClassNameAdapter<CapabilityMatcher> {\n   }\n+\n   protected static class PrioritizerAdapter extends SimpleClassNameAdapter<Prioritizer> {\n   }\n }\n\ndiff --git a/java/server/src/org/openqa/grid/internal/utils/configuration/GridNodeConfiguration.java b/java/server/src/org/openqa/grid/internal/utils/configuration/GridNodeConfiguration.java\nindex d34ae5111f..f5fee601b3 100644\n--- a/java/server/src/org/openqa/grid/internal/utils/configuration/GridNodeConfiguration.java\n+++ b/java/server/src/org/openqa/grid/internal/utils/configuration/GridNodeConfiguration.java\n@@ -17,12 +17,17 @@\n \n package org.openqa.grid.internal.utils.configuration;\n \n-import com.google.gson.Gson;\n+import com.google.common.reflect.TypeToken;\n import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n import com.google.gson.JsonObject;\n-import com.google.gson.TypeAdapter;\n-import com.google.gson.stream.JsonReader;\n-import com.google.gson.stream.JsonWriter;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.JsonSerializationContext;\n+import com.google.gson.JsonSerializer;\n+import com.google.gson.annotations.Expose;\n \n import com.beust.jcommander.Parameter;\n \n@@ -33,96 +38,121 @@\n import org.openqa.grid.internal.utils.configuration.validators.FileExistsValueValidator;\n import org.openqa.selenium.remote.BeanToJsonConverter;\n import org.openqa.selenium.remote.DesiredCapabilities;\n+import org.openqa.selenium.remote.JsonToBeanConverter;\n \n-import java.io.IOException;\n+import java.lang.reflect.Type;\n import java.net.MalformedURLException;\n import java.net.URL;\n-import java.util.Arrays;\n-import java.util.HashMap;\n+import java.util.ArrayList;\n import java.util.List;\n-import java.util.Map;\n \n public class GridNodeConfiguration extends GridConfiguration {\n+  public static final String DEFAULT_NODE_CONFIG_FILE = \"defaults/DefaultNodeWebDriver.json\";\n+\n+  /*\n+   * config parameters which do not serialize or de-serialize\n+   */\n+\n+  @Parameter(\n+    names = \"-nodeConfig\",\n+    description = \"<String> filename : JSON configuration file for the node. Overrides default values\",\n+    validateValueWith = FileExistsValueValidator.class\n+  )\n+  public String nodeConfigFile;\n+\n+  /*\n+   * config parameters which do not serialize to json\n+   */\n \n   // remoteHost is a generated value based on host / port specified, or read from JSON.\n+  @Expose( serialize = false )\n   String remoteHost;\n \n+  /*\n+   * config parameters which serialize and deserialize to/from json\n+   */\n+\n+  @Expose\n+  @Parameter(\n+    names = \"-hubHost\",\n+    description = \"<String> IP or hostname : the host address of the hub we're attempting to register with. If \\\"role\\\" is set to [hub], this option will be ignored. Default is localhost\"\n+  )\n+  String hubHost;\n+\n+  @Expose\n+  @Parameter(\n+    names = \"-hubPort\",\n+    description = \"<Integer> : the port of the hub we're attempting to register with. If \\\"role\\\" is set to [hub], this option will be ignored. Default to 4444\"\n+  )\n+  Integer hubPort;\n+\n+  @Expose\n   @Parameter(\n     names = \"-id\",\n     description = \"<String> : optional unique identifier for the node. Defaults to the url of the remoteHost\"\n   )\n   public String id;\n \n+  @Expose\n   @Parameter(\n-    names = \"-browser\",\n-    description = \"<String> : comma separated Capability values. Example: -browser browserName=firefox,platform=linux -browser browserName=chrome,platform=linux\",\n+    names = { \"-capabilities\", \"-browser\" },\n+    description = \"<String> : comma separated Capability values. Example: -capabilities browserName=firefox,platform=linux -capabilities browserName=chrome,platform=linux\",\n     listConverter = BrowserDesiredCapabilityConverter.class,\n     converter = BrowserDesiredCapabilityConverter.class,\n     splitter = NoOpParameterSplitter.class\n   )\n-  public List<DesiredCapabilities> browser = Arrays.asList();\n+  public List<DesiredCapabilities> capabilities = new ArrayList<>();\n \n+  @Expose\n   @Parameter(\n     names = \"-downPollingLimit\",\n     description = \"<Integer> : node is marked as \\\"down\\\" if the node hasn't responded after the number of checks specified in [downPollingLimit]. Default is 2\"\n   )\n   public Integer downPollingLimit;\n \n+  @Expose\n   @Parameter(\n     names = \"-hub\",\n     description = \"<String> (e.g. http://localhost:4444/grid/register) : the url that will be used to post the registration request. This option takes precedence over -hubHost and -hubPort options\"\n   )\n   public String hub;\n \n-  @Parameter(\n-    names = \"-hubHost\",\n-    description = \"<String> IP or hostname : the host address of the hub we're attempting to register with. If \\\"role\\\" is set to [hub], this option will be ignored. Default is localhost\"\n-  )\n-  String hubHost;\n-\n-  @Parameter(\n-    names = \"-hubPort\",\n-    description = \"<Integer> : the port of the hub we're attempting to register with. If \\\"role\\\" is set to [hub], this option will be ignored. Default to 4444\"\n-  )\n-  Integer hubPort;\n-\n-  @Parameter(\n-    names = \"-nodeConfig\",\n-    description = \"<String> filename : JSON configuration file for the node. Overrides default values\",\n-    validateValueWith = FileExistsValueValidator.class\n-  )\n-  public String nodeConfigFile;\n-\n+  @Expose\n   @Parameter(\n     names = \"-nodePolling\",\n     description = \"<Integer> in ms : specifies how often the hub will poll to see if the node is still responding\"\n   )\n   public Integer nodePolling;\n \n+  @Expose\n   @Parameter(\n     names = \"-nodeStatusCheckTimeout\",\n     description = \"<Integer> in ms : connection/socket timeout, used for node \\\"nodePolling\\\" check\"\n   )\n   public Integer nodeStatusCheckTimeout = 5000;\n \n+  @Expose\n   @Parameter(\n     names = \"-proxy\",\n     description = \"<String> : the class used to represent the node proxy. Default is [org.openqa.grid.selenium.proxy.DefaultRemoteProxy]\"\n   )\n   public String proxy;\n \n+  @Expose\n   @Parameter(\n     names = \"-register\",\n     description = \"if specified, node will attempt to re-register itself automatically with its known grid hub if the hub becomes unavailable. Default is disabled\"\n   )\n   public Boolean register;\n \n+  @Expose\n   @Parameter(\n     names = \"-registerCycle\",\n     description = \"<Integer> in ms : specifies how often the node will try to register itself again. Allows administrator to restart the hub without restarting (or risk orphaning) registered nodes. Must be specified with the \\\"-register\\\" option\"\n   )\n   public Integer registerCycle;\n \n+  @Expose\n   @Parameter(\n     names = \"-unregisterIfStillDownAfter\",\n     description = \"<Integer> in ms : if the node remains down for more than [unregisterIfStillDownAfter] ms, it will stop attempting to re-register from the hub. Default is 6000 (1 minute)\"\n@@ -181,8 +211,8 @@ private void parseHubUrl() {\n \n   public void merge(GridNodeConfiguration other) {\n     super.merge(other);\n-    if (isMergeAble(other.browser, browser)) {\n-      browser = other.browser;\n+    if (isMergeAble(other.capabilities, capabilities)) {\n+      capabilities = other.capabilities;\n     }\n     if (isMergeAble(other.downPollingLimit, downPollingLimit)) {\n       downPollingLimit = other.downPollingLimit;\n@@ -220,13 +250,15 @@ public void merge(GridNodeConfiguration other) {\n     if (isMergeAble(other.unregisterIfStillDownAfter, unregisterIfStillDownAfter)) {\n       unregisterIfStillDownAfter = other.unregisterIfStillDownAfter;\n     }\n+\n+    // never merge configuration. it should always be null.\n   }\n \n   @Override\n   public String toString(String format) {\n     StringBuilder sb = new StringBuilder();\n     sb.append(super.toString(format));\n-    sb.append(toString(format, \"browser\", browser));\n+    sb.append(toString(format, \"capabilities\", capabilities));\n     sb.append(toString(format, \"downPollingLimit\", downPollingLimit));\n     sb.append(toString(format, \"hub\", hub));\n     sb.append(toString(format, \"id\", id));\n@@ -258,7 +290,10 @@ public static GridNodeConfiguration loadFromJSON(JsonObject json) {\n     try {\n       GsonBuilder builder = new GsonBuilder();\n       GridNodeConfiguration.staticAddJsonTypeAdapter(builder);\n-      return builder.create().fromJson(json, GridNodeConfiguration.class);\n+      GridNodeConfiguration config =\n+        builder.excludeFieldsWithoutExposeAnnotation().create().fromJson(json, GridNodeConfiguration.class);\n+\n+      return config;\n     } catch (Throwable e) {\n       throw new GridConfigurationException(\"Error with the JSON of the config : \" + e.getMessage(),\n                                            e);\n@@ -270,23 +305,47 @@ protected void addJsonTypeAdapter(GsonBuilder builder) {\n     super.addJsonTypeAdapter(builder);\n     GridNodeConfiguration.staticAddJsonTypeAdapter(builder);\n   }\n+\n   protected static void staticAddJsonTypeAdapter(GsonBuilder builder) {\n-    builder.registerTypeAdapter(DesiredCapabilities.class, new DesiredCapabilitiesAdapter().nullSafe());\n+    builder.registerTypeAdapter(new TypeToken<List<DesiredCapabilities>>(){}.getType(),\n+                                new CollectionOfDesiredCapabilitiesSerializer());\n+    builder.registerTypeAdapter(new TypeToken<List<DesiredCapabilities>>(){}.getType(),\n+                                new CollectionOfDesiredCapabilitiesDeSerializer());\n   }\n \n-  protected static class DesiredCapabilitiesAdapter<T> extends TypeAdapter<DesiredCapabilities> {\n+  public static class CollectionOfDesiredCapabilitiesSerializer\n+    implements JsonSerializer<List<DesiredCapabilities>> {\n \n     @Override\n-    public void write(JsonWriter jsonWriter, DesiredCapabilities t) throws IOException {\n-      jsonWriter.value(String.format(\"{\\\"capabilities\\\":%s}\", new BeanToJsonConverter().convert(t.asMap())));\n+    public JsonElement serialize(List<DesiredCapabilities> desiredCapabilities, Type type,\n+                                 JsonSerializationContext jsonSerializationContext) {\n+\n+      JsonArray capabilities = new JsonArray();\n+      BeanToJsonConverter converter = new BeanToJsonConverter();\n+      for (DesiredCapabilities dc : desiredCapabilities) {\n+        capabilities.add(converter.convertObject(dc));\n+      }\n+      return capabilities;\n     }\n+  }\n+\n+  public  static class CollectionOfDesiredCapabilitiesDeSerializer\n+    implements JsonDeserializer<List<DesiredCapabilities>> {\n \n     @Override\n-    public DesiredCapabilities read(JsonReader jsonReader) throws IOException {\n-      Gson gson = new GsonBuilder().create();\n-      Map<String, Map<String, Object>> capability = new HashMap<>();\n-      capability = gson.fromJson(jsonReader.nextString(), capability.getClass());\n-      return new DesiredCapabilities(capability.get(\"capabilities\"));\n+    public List<DesiredCapabilities> deserialize(JsonElement jsonElement, Type type,\n+                                                 JsonDeserializationContext jsonDeserializationContext)\n+      throws JsonParseException {\n+\n+      if (jsonElement.isJsonArray()) {\n+        List<DesiredCapabilities> desiredCapabilities = new ArrayList<>();\n+        JsonToBeanConverter converter = new JsonToBeanConverter();\n+        for (JsonElement arrayElement : jsonElement.getAsJsonArray()) {\n+          desiredCapabilities.add(converter.convert(DesiredCapabilities.class, arrayElement));\n+        }\n+        return desiredCapabilities;\n+      }\n+      throw new JsonParseException(\"capabilities should be expressed as an array of objects.\");\n     }\n   }\n }\n\ndiff --git a/java/server/src/org/openqa/grid/internal/utils/configuration/StandaloneConfiguration.java b/java/server/src/org/openqa/grid/internal/utils/configuration/StandaloneConfiguration.java\nindex 1ece392de3..c3ccf71106 100644\n--- a/java/server/src/org/openqa/grid/internal/utils/configuration/StandaloneConfiguration.java\n+++ b/java/server/src/org/openqa/grid/internal/utils/configuration/StandaloneConfiguration.java\n@@ -19,6 +19,7 @@\n \n import com.google.gson.GsonBuilder;\n import com.google.gson.JsonElement;\n+import com.google.gson.annotations.Expose;\n \n import com.beust.jcommander.Parameter;\n \n@@ -29,32 +30,35 @@\n \n public class StandaloneConfiguration {\n \n+  /*\n+   * config parameters which do not serialize to json\n+   */\n+\n+  @Expose( serialize = false )\n   @Parameter(\n-    names = \"-browserTimeout\",\n-    description = \"<Integer> in seconds : number of seconds a browser session is allowed to hang (0 means indefinite) while a WebDriver command is running (example: driver.get(url)). If the timeout is reached while a WebDriver command is still processing, the session will quit. Minimum value is 60. Default is 0\"\n+    names = {\"-avoidProxy\"},\n+    description = \"DO NOT USE: Hack to allow selenium 3.0 server run in SauceLabs\",\n+    hidden = true\n   )\n-  public Integer browserTimeout;\n+  private boolean avoidProxy;\n \n+  @Expose( serialize = false )\n   @Parameter(\n     names = \"-browserSideLog\",\n     description = \"DO NOT USE: Provided for compatibility with 2.0\",\n     hidden = true\n   )\n-  public boolean browserSideLog;\n+  private boolean browserSideLog;\n \n+  @Expose( serialize = false )\n   @Parameter(\n     names = \"-captureLogsOnQuit\",\n     description = \"DO NOT USE: Provided for compatibility with 2.0\",\n     hidden = true\n   )\n-  public boolean captureLogsOnQuit;\n-\n-  @Parameter(\n-    names = \"-debug\",\n-    description = \"<Boolean> : enables LogLevel.FINE. Default is false (if omitted)\"\n-  )\n-  public boolean debug;\n+  private boolean captureLogsOnQuit;\n \n+  @Expose( serialize = false )\n   @Parameter(\n     names = {\"--help\", \"-help\", \"-h\"},\n     help = true,\n@@ -63,49 +67,66 @@ public class StandaloneConfiguration {\n   )\n   public boolean help;\n \n+  /*\n+   * config parameters which serialize and deserialize to/from json\n+   */\n+\n+  @Expose\n+  @Parameter(\n+    names = \"-browserTimeout\",\n+    description = \"<Integer> in seconds : number of seconds a browser session is allowed to hang (0 means indefinite) while a WebDriver command is running (example: driver.get(url)). If the timeout is reached while a WebDriver command is still processing, the session will quit. Minimum value is 60. Default is 0\"\n+  )\n+  public Integer browserTimeout;\n+\n+  @Expose\n+  @Parameter(\n+    names = \"-debug\",\n+    description = \"<Boolean> : enables LogLevel.FINE. Default is false (if omitted)\"\n+  )\n+  public boolean debug;\n+\n+  @Expose\n   @Parameter(\n     names = {\"-jettyThreads\", \"-jettyMaxThreads\"},\n     description = \"<Integer> : max number of threads for Jetty. Default is 200\"\n   )\n   public Integer jettyMaxThreads;\n \n+  @Expose\n   @Parameter(\n     names = \"-log\",\n     description = \"<String> filename : the filename to use for logging. If omitted, will log to STDOUT\"\n   )\n   public String log;\n \n+  @Expose\n   @Parameter(\n     names = \"-logLongForm\",\n     description = \"<Boolean> : if specified, all log statements (including to log file from \\\"log\\\" parameter) will include the Thread ID\"\n   )\n   public boolean logLongForm;\n \n+  @Expose\n   @Parameter(\n     names = {\"-port\"},\n     description = \"<Integer> : the port number the server will use. Defaults to [4444]. When \\\"role\\\" is a set to [node], default is [5555]\"\n   )\n   public Integer port;\n \n+  @Expose\n   @Parameter(\n     names = \"-role\",\n     description = \"<String> options are [hub], [node], or [standalone] : Default is [standalone]\"\n   )\n   public String role = \"standalone\";\n \n+  @Expose\n   @Parameter(\n     names = {\"-timeout\", \"-sessionTimeout\"},\n     description = \"<Integer> in seconds : Specifies the timeout before the server automatically kills a session that hasn't had any activity in the last X seconds. The test slot will then be released for another test to use. This is typically used to take care of client crashes. For grid hub/node roles, cleanUpCycle must also be set. Default is 1800 (30 minutes)\"\n   )\n   public Integer timeout = 1800;\n \n-  @Parameter(\n-    names = {\"-avoidProxy\"},\n-    description = \"DO NOT USE: Hack to allow selenium 3.0 server run in SauceLabs\",\n-    hidden = true\n-  )\n-  private boolean avoidProxy;\n-\n   /**\n    * copy another configuration's values into this one if they are set.\n    * @param other\n@@ -201,9 +222,10 @@ public StringBuilder toString(String format, String name, Object value) {\n   public JsonElement toJson() {\n     GsonBuilder builder = new GsonBuilder();\n     addJsonTypeAdapter(builder);\n-    return builder.create().toJsonTree(this);\n+    return builder.excludeFieldsWithoutExposeAnnotation().create().toJsonTree(this);\n   }\n \n   protected void addJsonTypeAdapter(GsonBuilder builder) {\n+    // no default implementation\n   }\n }\n\ndiff --git a/java/server/src/org/openqa/grid/internal/utils/configuration/converters/BrowserDesiredCapabilityConverter.java b/java/server/src/org/openqa/grid/internal/utils/configuration/converters/BrowserDesiredCapabilityConverter.java\nindex 8fc086e5db..cfd9983944 100644\n--- a/java/server/src/org/openqa/grid/internal/utils/configuration/converters/BrowserDesiredCapabilityConverter.java\n+++ b/java/server/src/org/openqa/grid/internal/utils/configuration/converters/BrowserDesiredCapabilityConverter.java\n@@ -19,6 +19,7 @@\n \n import com.beust.jcommander.IStringConverter;\n \n+import org.openqa.selenium.Platform;\n import org.openqa.selenium.remote.DesiredCapabilities;\n \n public class BrowserDesiredCapabilityConverter implements IStringConverter<DesiredCapabilities> {\n@@ -27,10 +28,16 @@ public DesiredCapabilities convert(String value) {\n     DesiredCapabilities capabilities = new DesiredCapabilities();\n     for (String cap : value.split(\",\")) {\n       String[] pieces = cap.split(\"=\");\n-      if (pieces[0].equals(\"maxInstances\")) {\n-        capabilities.setCapability(pieces[0], Integer.parseInt(pieces[1], 10));\n-      } else {\n-        capabilities.setCapability(pieces[0], pieces[1]);\n+      try {\n+        final Long x = Long.parseLong(pieces[1]);\n+        capabilities.setCapability(pieces[0], x);\n+      } catch (NumberFormatException e) {\n+        // ignore the exception. process as boolean or string.\n+        if (pieces[1].equals(\"true\") || pieces[1].equals(\"false\")) {\n+          capabilities.setCapability(pieces[0], Boolean.parseBoolean(pieces[1]));\n+        } else {\n+          capabilities.setCapability(pieces[0], pieces[1]);\n+        }\n       }\n     }\n     return capabilities;\n\ndiff --git a/java/server/src/org/openqa/grid/selenium/proxy/DefaultRemoteProxy.java b/java/server/src/org/openqa/grid/selenium/proxy/DefaultRemoteProxy.java\nindex 754e5b3ab4..533aa546e6 100644\n--- a/java/server/src/org/openqa/grid/selenium/proxy/DefaultRemoteProxy.java\n+++ b/java/server/src/org/openqa/grid/selenium/proxy/DefaultRemoteProxy.java\n@@ -246,8 +246,7 @@ public void beforeSession(TestSession session) {\n   }\n \n   public void afterSession(TestSession session) {\n-    // TODO Auto-generated method stub\n-\n+    // nothing to do here in this default implementation\n   }\n \n   @Override\n\ndiff --git a/java/server/src/org/openqa/grid/web/servlet/ProxyStatusServlet.java b/java/server/src/org/openqa/grid/web/servlet/ProxyStatusServlet.java\nindex 76709ab773..e3654b8af9 100644\n--- a/java/server/src/org/openqa/grid/web/servlet/ProxyStatusServlet.java\n+++ b/java/server/src/org/openqa/grid/web/servlet/ProxyStatusServlet.java\n@@ -108,13 +108,12 @@ private JsonObject getResponse(HttpServletRequest request) throws IOException {\n     } else {\n       if (!requestJSON.has(\"id\")) {\n         res.addProperty(\"msg\",\n-                        \"you need to specify at least an id when call the node  status service.\");\n+                        \"you need to specify at least an id when call the node status service.\");\n         return res;\n       }\n       id = requestJSON.get(\"id\").getAsString();\n     }\n \n-    // see RegistrationRequest.ensureBackwardCompatibility()\n     try {\n       URL u = new URL(id);\n       id = \"http://\" + u.getHost() + \":\" + u.getPort();\n@@ -125,11 +124,11 @@ private JsonObject getResponse(HttpServletRequest request) throws IOException {\n     if (proxy == null) {\n       res.addProperty(\"msg\", \"Cannot find proxy with ID =\" + id + \" in the registry.\");\n       return res;\n-    } \n+    }\n     res.addProperty(\"msg\", \"proxy found !\");\n     res.addProperty(\"success\", true);\n     res.addProperty(\"id\", proxy.getId());\n-    res.add(\"request\", proxy.getOriginalRegistrationRequest().getAssociatedJSON());\n+    res.add(\"request\", proxy.getOriginalRegistrationRequest().toJson());\n \n     // maybe the request was for more info\n     if (requestJSON != null) {\n\ndiff --git a/java/server/src/org/openqa/grid/web/servlet/RegistrationServlet.java b/java/server/src/org/openqa/grid/web/servlet/RegistrationServlet.java\nindex 8f51096149..a725f70c4a 100644\n--- a/java/server/src/org/openqa/grid/web/servlet/RegistrationServlet.java\n+++ b/java/server/src/org/openqa/grid/web/servlet/RegistrationServlet.java\n@@ -17,12 +17,17 @@\n \n package org.openqa.grid.web.servlet;\n \n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+\n import org.openqa.grid.common.RegistrationRequest;\n import org.openqa.grid.internal.BaseRemoteProxy;\n import org.openqa.grid.internal.Registry;\n import org.openqa.grid.internal.RemoteProxy;\n-import org.openqa.grid.internal.utils.configuration.GridHubConfiguration;\n import org.openqa.grid.internal.utils.configuration.GridNodeConfiguration;\n+import org.openqa.selenium.remote.DesiredCapabilities;\n+import org.openqa.selenium.remote.JsonToBeanConverter;\n \n import java.io.BufferedReader;\n import java.io.IOException;\n@@ -64,27 +69,21 @@ protected void doPost(HttpServletRequest request, HttpServletResponse response)\n   protected void process(HttpServletRequest request, HttpServletResponse response)\n       throws IOException {\n     BufferedReader rd = new BufferedReader(new InputStreamReader(request.getInputStream()));\n-    StringBuilder registrationRequest = new StringBuilder();\n+    StringBuilder requestJsonString = new StringBuilder();\n     String line;\n     while ((line = rd.readLine()) != null) {\n-      registrationRequest.append(line);\n+      requestJsonString.append(line);\n     }\n     rd.close();\n-    log.fine(\"getting the following registration request  : \" + registrationRequest.toString());\n+    log.fine(\"getting the following registration request  : \" + requestJsonString.toString());\n \n     // getting the settings from registration\n-    RegistrationRequest server = RegistrationRequest.getNewInstance(registrationRequest.toString());\n+    RegistrationRequest registrationRequest =\n+      RegistrationRequest.fromJson(requestJsonString.toString());\n \n-    // for non specified param, use what is on the hub.\n-    GridHubConfiguration hubConfig = getRegistry().getConfiguration();\n-    GridNodeConfiguration nodeConfig = new GridNodeConfiguration();\n-    nodeConfig.merge(hubConfig);\n-    nodeConfig.merge(server.getConfiguration());\n-    nodeConfig.host = server.getConfiguration().host;\n-    nodeConfig.port = server.getConfiguration().port;\n-    server.setConfiguration(nodeConfig);\n+    considerV2Json(registrationRequest.getConfiguration(), requestJsonString.toString());\n \n-    final RemoteProxy proxy = BaseRemoteProxy.getNewInstance(server, getRegistry());\n+    final RemoteProxy proxy = BaseRemoteProxy.getNewInstance(registrationRequest, getRegistry());\n \n     reply(response, \"ok\");\n \n@@ -96,6 +95,40 @@ public void run() {\n     }).start();\n   }\n \n+  /**\n+   * @deprecated because V3 does not have separate \"capabilities\": { } object and \"id\": \"value\"\n+   * in the serialized json representation of the RegistrationRequest. That said V2 nodes do need\n+   * to be able to register with a V3 hub.\n+   */\n+  @Deprecated\n+  private void considerV2Json(GridNodeConfiguration configuration, String requestJson) {\n+    JsonObject json = new JsonParser().parse(requestJson).getAsJsonObject();\n+\n+    // Backwards compatible with Selenium 2.x remotes which might send a\n+    // registration request with the json field \"id\". 3.x remotes will include the \"id\" with the\n+    // \"configuration\" object. The presence of { \"id\": \"value\" } will only override\n+    // { \"configuration\": { \"id\": \"value\" } } when \"configuration.id\" is null or empty.\n+    if (json.has(\"id\")\n+        && (configuration.id == null || configuration.id.isEmpty())) {\n+      configuration.id = json.get(\"id\").getAsString();\n+    }\n+\n+    // Backwards compatible with Selenium 2.x remotes which send a registration request with the\n+    // json object \"capabilities\". 3.x remotes will include the \"capabilities\" object with the\n+    // \"configuration\" object. The presence of { \"capabilities\": [ {...}, {...} ] } will override\n+    // { \"configuration\": { \"capabilities\": [ {...}, {...} ] } } when \"configuration.capabilities\" is\n+    // null or empty.\n+    if (json.has(\"capabilities\")\n+        && (configuration.capabilities == null || configuration.capabilities.isEmpty())) {\n+      JsonArray capabilities = json.get(\"capabilities\").getAsJsonArray();\n+      for (int i = 0; i < capabilities.size(); i++) {\n+        DesiredCapabilities cap = new JsonToBeanConverter()\n+          .convert(DesiredCapabilities.class, capabilities.get(i));\n+        configuration.capabilities.add(cap);\n+      }\n+    }\n+  }\n+\n   protected void reply(HttpServletResponse response, String content) throws IOException {\n     response.setContentType(\"text/html\");\n     response.setCharacterEncoding(\"UTF-8\");\n", "test_patch": "diff --git a/java/server/test/org/openqa/grid/common/RegistrationRequestTest.java b/java/server/test/org/openqa/grid/common/RegistrationRequestTest.java\nindex 7e37eef8af..377eeb8787 100644\n--- a/java/server/test/org/openqa/grid/common/RegistrationRequestTest.java\n+++ b/java/server/test/org/openqa/grid/common/RegistrationRequestTest.java\n@@ -19,12 +19,12 @@\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNotSame;\n import static org.junit.Assert.assertTrue;\n \n import com.beust.jcommander.JCommander;\n \n import org.junit.Test;\n+import org.openqa.grid.common.exception.GridConfigurationException;\n import org.openqa.grid.internal.utils.configuration.GridNodeConfiguration;\n import org.openqa.selenium.Platform;\n import org.openqa.selenium.remote.BrowserType;\n@@ -36,15 +36,14 @@ public class RegistrationRequestTest {\n \n   @Test\n   public void getConfigAsTests() throws Exception {\n-    RegistrationRequest req = new RegistrationRequest();\n     URL url = new URL(\"http://a.c:2\");\n \n     GridNodeConfiguration config = new GridNodeConfiguration();\n     config.cleanUpCycle = 1;\n     config.host = url.getHost();\n     config.port = url.getPort();\n \n-    req.setConfiguration(config);\n+    RegistrationRequest req = new RegistrationRequest(config);\n \n     int c = req.getConfiguration().cleanUpCycle;\n     assertTrue(c == 1);\n@@ -55,30 +54,28 @@ public void getConfigAsTests() throws Exception {\n \n   @Test\n   public void json() {\n-    RegistrationRequest req = new RegistrationRequest();\n-    req.setName(\"Fran\u0437ois\");\n-    req.setDescription(\"a\\nb\\nc\");\n-\n-    GridNodeConfiguration config = new GridNodeConfiguration();\n-    config.role = \"node\";\n-\n-    req.setConfiguration(config);\n+    RegistrationRequest req =\n+      new RegistrationRequest(new GridNodeConfiguration(), \"Fran\u0437ois\", \"a\\nb\\nc\");\n \n     for (int i = 0; i < 5; i++) {\n       DesiredCapabilities cap = new DesiredCapabilities(BrowserType.FIREFOX, \"\" + i, Platform.LINUX);\n-      req.addDesiredCapability(cap);\n+      req.getConfiguration().capabilities.add(cap);\n     }\n \n-    String json = req.toJSON();\n-\n-    RegistrationRequest req2 = RegistrationRequest.getNewInstance(json);\n+    String json = req.toJson().toString();\n \n-    assertEquals(req2.getName(), req.getName());\n-    assertEquals(req2.getDescription(), req.getDescription());\n+    RegistrationRequest req2 = RegistrationRequest.fromJson(json);\n \n-    assertEquals(req2.getConfiguration().role, req.getConfiguration().role);\n-    assertEquals(req2.getCapabilities().size(), req.getCapabilities().size());\n+    assertEquals(req.getName(), req2.getName());\n+    assertEquals(req.getDescription(), req2.getDescription());\n \n+    assertEquals(req.getConfiguration().role, req2.getConfiguration().role);\n+    assertEquals(req.getConfiguration().capabilities.size(),\n+                 req2.getConfiguration().capabilities.size());\n+    assertEquals(req.getConfiguration().capabilities.get(0).getBrowserName(),\n+                 req2.getConfiguration().capabilities.get(0).getBrowserName());\n+    assertEquals(req.getConfiguration().capabilities.get(0).getPlatform(),\n+                 req2.getConfiguration().capabilities.get(0).getPlatform());\n   }\n \n \n@@ -88,7 +85,7 @@ public void basicCommandLineParam() {\n     new JCommander(config, \"-role\", \"wd\", \"-hubHost\", \"ABC\", \"-hubPort\", \"1234\",\"-host\",\"localhost\");\n     RegistrationRequest req = RegistrationRequest.build(config);\n \n-    assertEquals(GridRole.NODE, req.getRole());\n+    assertEquals(GridRole.NODE, GridRole.get(req.getConfiguration().role));\n     assertEquals(\"ABC\", req.getConfiguration().getHubHost());\n     assertEquals(1234, req.getConfiguration().getHubPort().longValue());\n \n@@ -113,7 +110,8 @@ public void commandLineParamDefaultCapabilities() {\n     new JCommander(config, \"-role\", \"wd\", \"-hubHost\", \"ABC\", \"-host\",\"localhost\");\n     RegistrationRequest req = RegistrationRequest.build(config);\n     assertEquals(\"ABC\", req.getConfiguration().getHubHost());\n-    assertNotSame(0, req.getCapabilities().size());\n+    // should be 3, we a building from the DefaultNodeWebDriver.json\n+    assertEquals(3, req.getConfiguration().capabilities.size());\n   }\n \n   @Test\n@@ -141,4 +139,13 @@ public void ensurePre2_9HubCompatibility() {\n \n     assertEquals(\"http://example.com:5555\", req.getConfiguration().getRemoteHost());\n   }\n+\n+  @Test(expected = GridConfigurationException.class)\n+  public void validateWithException() {\n+    GridNodeConfiguration config = new GridNodeConfiguration();\n+    new JCommander(config, \"-role\", \"node\", \"-hubHost\", \"localhost\", \"-hub\", \"localhost:4444\");\n+    RegistrationRequest req = new RegistrationRequest(config);\n+\n+    req.validate();\n+  }\n }\n\ndiff --git a/java/server/test/org/openqa/grid/internal/BaseRemoteProxyTest.java b/java/server/test/org/openqa/grid/internal/BaseRemoteProxyTest.java\nindex 26980bc47a..cc939ad7c5 100644\n--- a/java/server/test/org/openqa/grid/internal/BaseRemoteProxyTest.java\n+++ b/java/server/test/org/openqa/grid/internal/BaseRemoteProxyTest.java\n@@ -32,7 +32,7 @@\n import org.openqa.grid.common.exception.GridException;\n import org.openqa.grid.internal.utils.configuration.GridNodeConfiguration;\n import org.openqa.selenium.remote.CapabilityType;\n-import org.openqa.selenium.remote.JsonToBeanConverter;\n+import org.openqa.selenium.remote.DesiredCapabilities;\n \n import java.util.ArrayList;\n import java.util.HashMap;\n@@ -77,10 +77,8 @@ public void create() {\n     cap.put(CapabilityType.APPLICATION_NAME, \"corrupted\");\n \n     GridNodeConfiguration config = new Gson().fromJson(\"{\\\"remoteHost\\\":\\\"ebay.com\\\"}\", GridNodeConfiguration.class);\n-\n-    RegistrationRequest request = new RegistrationRequest();\n-    request.addDesiredCapability(cap);\n-    request.setConfiguration(config);\n+    config.capabilities.add(new DesiredCapabilities(cap));\n+    RegistrationRequest request = new RegistrationRequest(config);\n \n     new BaseRemoteProxy(request, registry);\n   }\n\ndiff --git a/java/server/test/org/openqa/grid/internal/LoadBalancedTests.java b/java/server/test/org/openqa/grid/internal/LoadBalancedTests.java\nindex 206992f1f7..b37fc03e73 100644\n--- a/java/server/test/org/openqa/grid/internal/LoadBalancedTests.java\n+++ b/java/server/test/org/openqa/grid/internal/LoadBalancedTests.java\n@@ -29,6 +29,7 @@\n import org.openqa.grid.internal.mock.MockedRequestHandler;\n import org.openqa.grid.internal.utils.configuration.GridNodeConfiguration;\n import org.openqa.selenium.remote.CapabilityType;\n+import org.openqa.selenium.remote.DesiredCapabilities;\n \n import java.util.ArrayList;\n import java.util.HashMap;\n@@ -169,17 +170,17 @@ private static Map<String, Object> firefox() {\n   }\n \n   private static RegistrationRequest getRequestOfNSlots(int n, String name) {\n-    RegistrationRequest request = new RegistrationRequest();\n+\n+    Map<String, Object> ff = firefox();\n+    ff.put(MAX_INSTANCES, n);\n \n     GridNodeConfiguration config = new GridNodeConfiguration();\n     config.maxSession = n;\n     config.host = name;\n     config.port = 4444;\n-    request.setConfiguration(config);\n+    config.capabilities.add(new DesiredCapabilities(ff));\n \n-    Map<String, Object> ff = firefox();\n-    ff.put(MAX_INSTANCES, n);\n-    request.addDesiredCapability(ff);\n+    RegistrationRequest request = new RegistrationRequest(config);\n \n     return request;\n   }\n\ndiff --git a/java/server/test/org/openqa/grid/internal/MyCapabilityMatcher.java b/java/server/test/org/openqa/grid/internal/MyCapabilityMatcher.java\nindex 547996300e..a4abdb01db 100644\n--- a/java/server/test/org/openqa/grid/internal/MyCapabilityMatcher.java\n+++ b/java/server/test/org/openqa/grid/internal/MyCapabilityMatcher.java\n@@ -26,7 +26,6 @@ public class MyCapabilityMatcher implements CapabilityMatcher{\n \n   public boolean matches(Map<String, Object> currentCapability,\n       Map<String, Object> requestedCapability) {\n-    // TODO Auto-generated method stub\n     return false;\n   }\n \n\ndiff --git a/java/server/test/org/openqa/grid/internal/ParallelTest.java b/java/server/test/org/openqa/grid/internal/ParallelTest.java\nindex 68235df2f8..9419899ac3 100644\n--- a/java/server/test/org/openqa/grid/internal/ParallelTest.java\n+++ b/java/server/test/org/openqa/grid/internal/ParallelTest.java\n@@ -29,6 +29,7 @@\n import org.openqa.grid.internal.utils.configuration.GridNodeConfiguration;\n import org.openqa.grid.web.servlet.handler.RequestHandler;\n import org.openqa.selenium.remote.CapabilityType;\n+import org.openqa.selenium.remote.DesiredCapabilities;\n \n import java.util.ArrayList;\n import java.util.HashMap;\n@@ -49,21 +50,18 @@ public class ParallelTest {\n   @Before\n   public void prepareReqRequest() {\n \n-    GridNodeConfiguration config = new GridNodeConfiguration();\n     app1.put(CapabilityType.APPLICATION_NAME, \"app1\");\n     app1.put(MAX_INSTANCES, 5);\n \n     app2.put(CapabilityType.APPLICATION_NAME, \"app2\");\n     app2.put(MAX_INSTANCES, 1);\n \n-    config.host = \"machine1\";\n-    config.port = 4444;\n-    config.maxSession = 5;\n-\n     req = new RegistrationRequest();\n-    req.addDesiredCapability(app1);\n-    req.addDesiredCapability(app2);\n-    req.setConfiguration(config);\n+    req.getConfiguration().host = \"machine1\";\n+    req.getConfiguration().port = 4444;\n+    req.getConfiguration().maxSession = 5;\n+    req.getConfiguration().capabilities.add(new DesiredCapabilities(app1));\n+    req.getConfiguration().capabilities.add(new DesiredCapabilities(app2));\n   }\n \n   @Test\n@@ -221,14 +219,12 @@ public void releaseAndReserve() {\n     app2.put(CapabilityType.APPLICATION_NAME, \"app2\");\n     app2.put(MAX_INSTANCES, 1);\n \n-    config.host = \"machine1\";\n-    config.port = 4444;\n-    config.maxSession = 5;\n-\n     req = new RegistrationRequest();\n-    req.addDesiredCapability(app1);\n-    req.addDesiredCapability(app2);\n-    req.setConfiguration(config);\n+    req.getConfiguration().host = \"machine1\";\n+    req.getConfiguration().port = 4444;\n+    req.getConfiguration().maxSession = 5;\n+    req.getConfiguration().capabilities.add(new DesiredCapabilities(app1));\n+    req.getConfiguration().capabilities.add(new DesiredCapabilities(app2));\n     req.getConfiguration().proxy = DetachedRemoteProxy.class.getCanonicalName();\n \n     p1 = BaseRemoteProxy.getNewInstance(req, registry);\n\ndiff --git a/java/server/test/org/openqa/grid/internal/ProxySetTest.java b/java/server/test/org/openqa/grid/internal/ProxySetTest.java\nindex ec49ee56c7..52e6c28276 100644\n--- a/java/server/test/org/openqa/grid/internal/ProxySetTest.java\n+++ b/java/server/test/org/openqa/grid/internal/ProxySetTest.java\n@@ -29,7 +29,6 @@\n \n import java.util.HashMap;\n import java.util.List;\n-import java.util.Map;\n \n public class ProxySetTest {\n \n@@ -100,11 +99,11 @@ public StubbedRemoteProxy buildStubbedRemoteProxy(Registry registry, int totalUs\n     config.port = totalUsed;\n     config.role = \"webdriver\";\n     RegistrationRequest req = RegistrationRequest.build(config);\n-    req.getCapabilities().clear();\n+    req.getConfiguration().capabilities.clear();\n \n     DesiredCapabilities capability = new DesiredCapabilities();\n     capability.setBrowserName(BrowserType.CHROME);\n-    req.addDesiredCapability(capability);\n+    req.getConfiguration().capabilities.add(capability);\n \n     StubbedRemoteProxy tempProxy = new StubbedRemoteProxy(req, registry);\n     tempProxy.setTotalUsed(totalUsed);\n\ndiff --git a/java/server/test/org/openqa/grid/internal/RegistryStateTest.java b/java/server/test/org/openqa/grid/internal/RegistryStateTest.java\nindex 084f5a85bd..55ea826d6d 100644\n--- a/java/server/test/org/openqa/grid/internal/RegistryStateTest.java\n+++ b/java/server/test/org/openqa/grid/internal/RegistryStateTest.java\n@@ -27,9 +27,9 @@\n import org.openqa.grid.common.RegistrationRequest;\n import org.openqa.grid.internal.mock.GridHelper;\n import org.openqa.grid.internal.mock.MockedRequestHandler;\n-import org.openqa.grid.internal.utils.configuration.GridNodeConfiguration;\n import org.openqa.grid.web.servlet.handler.RequestHandler;\n import org.openqa.selenium.remote.CapabilityType;\n+import org.openqa.selenium.remote.DesiredCapabilities;\n \n import java.util.HashMap;\n import java.util.Map;\n@@ -48,21 +48,18 @@ public class RegistryStateTest {\n   @Before\n   public void prepareReqRequest() {\n \n-    GridNodeConfiguration config = new GridNodeConfiguration();\n     app1.put(CapabilityType.APPLICATION_NAME, \"app1\");\n     app1.put(MAX_INSTANCES, 5);\n \n     app2.put(CapabilityType.APPLICATION_NAME, \"app2\");\n     app2.put(MAX_INSTANCES, 1);\n \n-    config.host = \"machine1\";\n-    config.port = 4444;\n-    config.maxSession = 5;\n-\n     req = new RegistrationRequest();\n-    req.addDesiredCapability(app1);\n-    req.addDesiredCapability(app2);\n-    req.setConfiguration(config);\n+    req.getConfiguration().host = \"machine1\";\n+    req.getConfiguration().port = 4444;\n+    req.getConfiguration().maxSession = 5;\n+    req.getConfiguration().capabilities.add(new DesiredCapabilities(app1));\n+    req.getConfiguration().capabilities.add(new DesiredCapabilities(app2));\n   }\n \n \n\ndiff --git a/java/server/test/org/openqa/grid/internal/RegistryTest.java b/java/server/test/org/openqa/grid/internal/RegistryTest.java\nindex a6e9dca814..3be0f1a37b 100644\n--- a/java/server/test/org/openqa/grid/internal/RegistryTest.java\n+++ b/java/server/test/org/openqa/grid/internal/RegistryTest.java\n@@ -30,6 +30,7 @@\n import org.openqa.grid.internal.utils.configuration.GridNodeConfiguration;\n import org.openqa.grid.web.servlet.handler.RequestHandler;\n import org.openqa.selenium.remote.CapabilityType;\n+import org.openqa.selenium.remote.DesiredCapabilities;\n \n import java.util.HashMap;\n import java.util.Map;\n@@ -100,9 +101,8 @@ public void prepareReqRequest() {\n     config.host = \"machine1\";\n     config.port = 4444;\n     config.maxSession = 5;\n-    req = new RegistrationRequest();\n-    req.addDesiredCapability(app1);\n-    req.setConfiguration(config);\n+    config.capabilities.add(new DesiredCapabilities(app1));\n+    req = new RegistrationRequest(config);\n   }\n \n   @Test\n\ndiff --git a/java/server/test/org/openqa/grid/internal/RemoteProxyFactory.java b/java/server/test/org/openqa/grid/internal/RemoteProxyFactory.java\nindex e695a71ddb..a9483ce227 100644\n--- a/java/server/test/org/openqa/grid/internal/RemoteProxyFactory.java\n+++ b/java/server/test/org/openqa/grid/internal/RemoteProxyFactory.java\n@@ -46,11 +46,11 @@ public static RemoteProxy getNewBasicRemoteProxy(String browser, String url, Reg\n     config.port = u.getPort();\n     config.role = \"webdriver\";\n     RegistrationRequest req = RegistrationRequest.build(config);\n-    req.getCapabilities().clear();\n+    req.getConfiguration().capabilities.clear();\n \n     DesiredCapabilities capability = new DesiredCapabilities();\n     capability.setBrowserName(browser);\n-    req.addDesiredCapability(capability);\n+    req.getConfiguration().capabilities.add(capability);\n \n     return createProxy(registry, req);\n \n@@ -74,8 +74,8 @@ public static RemoteProxy getNewBasicRemoteProxy(Map<String, Object> cap, String\n     configuration.port = u.getPort();\n     configuration.hub = \"http://localhost:4444\";\n     RegistrationRequest req = RegistrationRequest.build(configuration);\n-    req.getCapabilities().clear();\n-    req.addDesiredCapability(cap);\n+    req.getConfiguration().capabilities.clear();\n+    req.getConfiguration().capabilities.add(new DesiredCapabilities(cap));\n     return createProxy(registry, req);\n \n   }\n@@ -99,9 +99,9 @@ public static RemoteProxy getNewBasicRemoteProxy(List<Map<String, Object>> caps,\n     configuration.port = u.getPort();\n     configuration.hub = \"http://localhost:4444\";\n     RegistrationRequest req = RegistrationRequest.build(configuration);\n-    req.getCapabilities().clear();\n+    req.getConfiguration().capabilities.clear();\n     for (Map<String, Object> c : caps) {\n-      req.addDesiredCapability(c);\n+      req.getConfiguration().capabilities.add(new DesiredCapabilities(c));\n     }\n     return createProxy(registry, req);\n \n\ndiff --git a/java/server/test/org/openqa/grid/internal/RemoteProxySlowSetup.java b/java/server/test/org/openqa/grid/internal/RemoteProxySlowSetup.java\nindex 5159daa0b6..462e039192 100644\n--- a/java/server/test/org/openqa/grid/internal/RemoteProxySlowSetup.java\n+++ b/java/server/test/org/openqa/grid/internal/RemoteProxySlowSetup.java\n@@ -40,14 +40,12 @@ public void setup() {\n     registry = Registry.newInstance();\n     // create 2 proxy that are equal and have a slow onRegistration\n     // p1.equals(p2) = true\n-    RegistrationRequest req1 = new RegistrationRequest();\n     GridNodeConfiguration config1 = new GridNodeConfiguration();\n-    req1.setConfiguration(config1);\n+    RegistrationRequest req1 = new RegistrationRequest(config1);\n     p1 = new SlowRemoteSetup(req1,registry);\n \n-    RegistrationRequest req2 = new RegistrationRequest();\n     GridNodeConfiguration config2 = new GridNodeConfiguration();\n-    req2.setConfiguration(config2);\n+    RegistrationRequest req2 = new RegistrationRequest(config2);\n     p2 = new SlowRemoteSetup(req2,registry);\n   }\n \n\ndiff --git a/java/server/test/org/openqa/grid/internal/SessionTimesOutTest.java b/java/server/test/org/openqa/grid/internal/SessionTimesOutTest.java\nindex f0ae229d87..1e5adeedbe 100644\n--- a/java/server/test/org/openqa/grid/internal/SessionTimesOutTest.java\n+++ b/java/server/test/org/openqa/grid/internal/SessionTimesOutTest.java\n@@ -29,10 +29,9 @@\n import org.openqa.grid.common.RegistrationRequest;\n import org.openqa.grid.internal.listeners.TimeoutListener;\n import org.openqa.grid.internal.mock.GridHelper;\n-import org.openqa.grid.internal.utils.configuration.GridNodeConfiguration;\n import org.openqa.grid.web.servlet.handler.RequestHandler;\n import org.openqa.selenium.remote.CapabilityType;\n-import org.openqa.selenium.remote.server.SystemClock;\n+import org.openqa.selenium.remote.DesiredCapabilities;\n \n import java.util.ArrayList;\n import java.util.HashMap;\n@@ -46,20 +45,13 @@ public class SessionTimesOutTest {\n   // create a request for a proxy that times out after 0.5 sec.\n   @Before\n   public void setup() {\n-\n     app1.put(CapabilityType.APPLICATION_NAME, \"app1\");\n-    req.addDesiredCapability(app1);\n-\n-    GridNodeConfiguration config = new GridNodeConfiguration();\n+    req.getConfiguration().capabilities.add(new DesiredCapabilities(app1));\n     // a test is timed out is inactive for more than 1 sec.\n-    config.timeout = 1;\n-\n+    req.getConfiguration().timeout = 1;\n     // every 0.1 sec, the proxy check is something has timed out.\n-    config.cleanUpCycle = 100;\n-\n-    config.host = \"localhost\";\n-\n-    req.setConfiguration(config);\n+    req.getConfiguration().cleanUpCycle = 100;\n+    req.getConfiguration().host = \"localhost\";\n   }\n \n   class MyRemoteProxyTimeout extends DetachedRemoteProxy implements TimeoutListener {\n@@ -234,16 +226,13 @@ public void stupidConfig() throws InterruptedException {\n         RegistrationRequest req = new RegistrationRequest();\n         Map<String, Object> app1 = new HashMap<>();\n         app1.put(CapabilityType.APPLICATION_NAME, \"app1\");\n-        req.addDesiredCapability(app1);\n-        GridNodeConfiguration config = new GridNodeConfiguration();\n+        req.getConfiguration().capabilities.add(new DesiredCapabilities(app1));\n+        req.getConfiguration().timeout = timeout;\n+        req.getConfiguration().cleanUpCycle = cycle;\n+        req.getConfiguration().host = \"localhost\";\n \n-        config.timeout = timeout;\n-        config.cleanUpCycle = cycle;\n         registry.getConfiguration().cleanUpCycle = cycle;\n         registry.getConfiguration().timeout = timeout;\n-        config.host = \"localhost\";\n-\n-        req.setConfiguration(config);\n \n         final MyStupidConfig proxy = new MyStupidConfig(req, registry);\n         proxy.setupTimeoutListener();\n\ndiff --git a/java/server/test/org/openqa/grid/internal/StatusServletTests.java b/java/server/test/org/openqa/grid/internal/StatusServletTests.java\nindex cb2eae9818..d9aa78508b 100644\n--- a/java/server/test/org/openqa/grid/internal/StatusServletTests.java\n+++ b/java/server/test/org/openqa/grid/internal/StatusServletTests.java\n@@ -40,11 +40,11 @@\n import org.openqa.grid.common.RegistrationRequest;\n import org.openqa.grid.internal.mock.GridHelper;\n import org.openqa.grid.internal.utils.configuration.GridHubConfiguration;\n-import org.openqa.grid.internal.utils.configuration.GridNodeConfiguration;\n import org.openqa.grid.web.Hub;\n import org.openqa.grid.web.servlet.handler.RequestHandler;\n import org.openqa.selenium.net.PortProber;\n import org.openqa.selenium.remote.CapabilityType;\n+import org.openqa.selenium.remote.DesiredCapabilities;\n import org.openqa.selenium.remote.internal.HttpClientFactory;\n \n import java.io.BufferedReader;\n@@ -97,12 +97,10 @@ public void setup() throws Exception {\n     RegistrationRequest req = new RegistrationRequest();\n     Map<String, Object> capability = new HashMap<>();\n     capability.put(CapabilityType.BROWSER_NAME, \"custom app\");\n-    req.addDesiredCapability(capability);\n+    req.getConfiguration().capabilities.add(new DesiredCapabilities(capability));\n+    req.getConfiguration().host = \"machine5\";\n+    req.getConfiguration().port = 4444;\n \n-    GridNodeConfiguration config = new GridNodeConfiguration();\n-    config.host = \"machine5\";\n-    config.port = 4444;\n-    req.setConfiguration(config);\n     RemoteProxy customProxy = new MyCustomProxy(req, registry);\n \n     registry.add(p1);\n\ndiff --git a/java/server/test/org/openqa/grid/internal/listener/CommandListenerTest.java b/java/server/test/org/openqa/grid/internal/listener/CommandListenerTest.java\nindex 3d6918cdc4..103dc4da88 100644\n--- a/java/server/test/org/openqa/grid/internal/listener/CommandListenerTest.java\n+++ b/java/server/test/org/openqa/grid/internal/listener/CommandListenerTest.java\n@@ -45,6 +45,7 @@\n import org.openqa.grid.web.servlet.handler.SeleniumBasedRequest;\n import org.openqa.grid.web.servlet.handler.SeleniumBasedResponse;\n import org.openqa.selenium.remote.CapabilityType;\n+import org.openqa.selenium.remote.DesiredCapabilities;\n import org.openqa.selenium.remote.internal.HttpClientFactory;\n \n import java.io.IOException;\n@@ -140,9 +141,8 @@ public Integer answer(InvocationOnMock invocation) {\n   public static void prepare() {\n     app1.put(CapabilityType.APPLICATION_NAME, \"app1\");\n     GridNodeConfiguration config = new GridNodeConfiguration();\n-    req = new RegistrationRequest();\n-    req.addDesiredCapability(app1);\n-    req.setConfiguration(config);\n+    config.capabilities.add(new DesiredCapabilities(app1));\n+    req = new RegistrationRequest(config);\n   }\n \n   @Test\n\ndiff --git a/java/server/test/org/openqa/grid/internal/listener/RegistrationListenerTest.java b/java/server/test/org/openqa/grid/internal/listener/RegistrationListenerTest.java\nindex 676ae590e0..4c60494b86 100644\n--- a/java/server/test/org/openqa/grid/internal/listener/RegistrationListenerTest.java\n+++ b/java/server/test/org/openqa/grid/internal/listener/RegistrationListenerTest.java\n@@ -29,9 +29,9 @@\n import org.openqa.grid.internal.TestSession;\n import org.openqa.grid.internal.listeners.RegistrationListener;\n import org.openqa.grid.internal.mock.GridHelper;\n-import org.openqa.grid.internal.utils.configuration.GridNodeConfiguration;\n import org.openqa.grid.web.servlet.handler.RequestHandler;\n import org.openqa.selenium.remote.CapabilityType;\n+import org.openqa.selenium.remote.DesiredCapabilities;\n \n import java.util.HashMap;\n import java.util.Map;\n@@ -62,13 +62,11 @@ public void beforeRegistration() {\n \n   @Before\n   public void prepareReqRequest() {\n-    GridNodeConfiguration config = new GridNodeConfiguration();\n     app1.put(CapabilityType.APPLICATION_NAME, \"app1\");\n-    config.host = \"machine1\";\n-    config.port = 4444;\n     req = new RegistrationRequest();\n-    req.addDesiredCapability(app1);\n-    req.setConfiguration(config);\n+    req.getConfiguration().capabilities.add(new DesiredCapabilities(app1));\n+    req.getConfiguration().host = \"machine1\";\n+    req.getConfiguration().port = 4444;\n   }\n \n   @Test(timeout = 5000)\n\ndiff --git a/java/server/test/org/openqa/grid/internal/listener/SessionListenerTest.java b/java/server/test/org/openqa/grid/internal/listener/SessionListenerTest.java\nindex a460461568..99ad9245c9 100644\n--- a/java/server/test/org/openqa/grid/internal/listener/SessionListenerTest.java\n+++ b/java/server/test/org/openqa/grid/internal/listener/SessionListenerTest.java\n@@ -32,9 +32,9 @@\n import org.openqa.grid.internal.listeners.TestSessionListener;\n import org.openqa.grid.internal.listeners.TimeoutListener;\n import org.openqa.grid.internal.mock.GridHelper;\n-import org.openqa.grid.internal.utils.configuration.GridNodeConfiguration;\n import org.openqa.grid.web.servlet.handler.RequestHandler;\n import org.openqa.selenium.remote.CapabilityType;\n+import org.openqa.selenium.remote.DesiredCapabilities;\n \n import java.util.HashMap;\n import java.util.Map;\n@@ -65,11 +65,8 @@ public void beforeSession(TestSession session) {\n   @BeforeClass\n   public static void prepare() {\n     app1.put(CapabilityType.APPLICATION_NAME, \"app1\");\n-    GridNodeConfiguration config = new GridNodeConfiguration();\n     req = new RegistrationRequest();\n-    req.addDesiredCapability(app1);\n-    req.setConfiguration(config);\n-\n+    req.getConfiguration().capabilities.add(new DesiredCapabilities(app1));\n   }\n \n   @Test\n@@ -251,17 +248,12 @@ public void doubleRelease() throws InterruptedException {\n     RegistrationRequest req = new RegistrationRequest();\n     Map<String, Object> cap = new HashMap<>();\n     cap.put(CapabilityType.APPLICATION_NAME, \"app1\");\n-\n-    GridNodeConfiguration config = new GridNodeConfiguration();\n-    config.timeout = 1;\n-    config.cleanUpCycle = 1;\n-    config.maxSession = 2;\n-\n-    req.addDesiredCapability(cap);\n-    req.setConfiguration(config);\n+    req.getConfiguration().timeout = 1;\n+    req.getConfiguration().cleanUpCycle = 1;\n+    req.getConfiguration().maxSession = 2;\n+    req.getConfiguration().capabilities.add(new DesiredCapabilities(cap));\n \n     Registry registry = Registry.newInstance();\n-    registry.getConfiguration().cleanUpCycle = config.cleanUpCycle;\n     try {\n       final SlowAfterSession proxy = new SlowAfterSession(req, registry);\n       proxy.setupTimeoutListener();\n\ndiff --git a/java/server/test/org/openqa/grid/internal/mock/GridHelper.java b/java/server/test/org/openqa/grid/internal/mock/GridHelper.java\nindex 1e9c4ba732..b4768ba994 100644\n--- a/java/server/test/org/openqa/grid/internal/mock/GridHelper.java\n+++ b/java/server/test/org/openqa/grid/internal/mock/GridHelper.java\n@@ -68,13 +68,11 @@ public String getNewSessionRequestedCapability(TestSession session) {\n \n       @Override\n       public ExternalSessionKey extractSession() {\n-        // TODO Auto-generated method stub\n         return null;\n       }\n \n       @Override\n       public RequestType extractRequestType() {\n-        // TODO Auto-generated method stub\n         return null;\n       }\n \n\ndiff --git a/java/server/test/org/openqa/grid/internal/utils/SelfRegisteringRemoteTest.java b/java/server/test/org/openqa/grid/internal/utils/SelfRegisteringRemoteTest.java\nindex 6103759ff9..922a3160b4 100644\n--- a/java/server/test/org/openqa/grid/internal/utils/SelfRegisteringRemoteTest.java\n+++ b/java/server/test/org/openqa/grid/internal/utils/SelfRegisteringRemoteTest.java\n@@ -20,7 +20,6 @@\n import static org.junit.Assert.assertEquals;\n \n import org.junit.Test;\n-import org.openqa.grid.common.GridRole;\n import org.openqa.grid.common.RegistrationRequest;\n import org.openqa.grid.internal.utils.configuration.GridNodeConfiguration;\n import org.openqa.grid.internal.utils.configuration.StandaloneConfiguration;\n@@ -38,7 +37,7 @@ public class SelfRegisteringRemoteTest {\n \n   private final class DummyGridNodeServer implements GridNodeServer {\n     public Map<String, Class<? extends Servlet>> extraServlets;\n- \n+\n     @Override\n     public void boot() throws Exception { }\n \n@@ -63,16 +62,15 @@ public void setExtraServlets(Map<String, Class<? extends Servlet>> extraServlets\n   @Test\n   public void testHubRegistrationWhenPortExplicitlyZeroedOut() throws MalformedURLException {\n     GridNodeServer server = new DummyGridNodeServer();\n-    RegistrationRequest config = new RegistrationRequest();\n-    config.setRole(GridRole.NODE);\n-    config.getConfiguration().port = 0;\n-    config.getConfiguration().hub = \"http://locahost:4444\";\n-    SelfRegisteringRemote remote = new SelfRegisteringRemote(config);\n+    RegistrationRequest request = new RegistrationRequest();\n+    request.getConfiguration().port = 0;\n+    request.getConfiguration().hub = \"http://locahost:4444\";\n+    SelfRegisteringRemote remote = new SelfRegisteringRemote(request);\n     remote.setRemoteServer(server);\n     remote.updateConfigWithRealPort();\n-    String host = remote.getConfiguration().getRemoteHost();\n+    String remoteHost = remote.getConfiguration().getRemoteHost();\n     assertEquals(\"Ensure that the remote host is updated properly\",\n-                 \"http://localhost:\" + server.getRealPort(), host);\n+                 \"http://\" + request.getConfiguration().host + \":\" + server.getRealPort(), remoteHost);\n \n   }\n \n", "instance_id": "seleniumhq__selenium-2789", "fixed_tests": {}, "failed_tests": [], "skipped_tests": [], "run_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "test_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "fix_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "f2p_tests": {}, "p2p_tests": {}, "s2p_tests": {}, "n2p_tests": {}}
{"org": "seleniumhq", "repo": "selenium", "number": 2805, "title": "Support relative redirects in grid", "body": "- [X] By placing an `X` in the preceding checkbox, I verify that I have signed the [Contributor License Agreement](https://github.com/SeleniumHQ/selenium/blob/master/CONTRIBUTING.md#step-6-sign-the-cla)\n", "state": "closed", "base": {"label": "SeleniumHQ:master", "ref": "master", "sha": "5772b63b17cc79564c4a62e4dc391b65c66ccbfb"}, "resolved_issues": [], "fix_patch": "", "test_patch": "diff --git a/java/server/src/org/openqa/grid/internal/TestSession.java b/java/server/src/org/openqa/grid/internal/TestSession.java\nindex 0e1f13a5f5..d0e77aeea5 100644\n--- a/java/server/src/org/openqa/grid/internal/TestSession.java\n+++ b/java/server/src/org/openqa/grid/internal/TestSession.java\n@@ -488,7 +488,7 @@ private void processResponseHeaders(HttpServletRequest request, HttpServletRespo\n       // the location needs to point to the hub that will proxy\n       // everything.\n       if (name.equalsIgnoreCase(\"Location\")) {\n-        URL returnedLocation = new URL(value);\n+        URL returnedLocation = new URL(remoteURL, value);\n         String driverPath = remoteURL.getPath();\n         String wrongPath = returnedLocation.getPath();\n         String correctPath = wrongPath.replace(driverPath, \"\");\n", "instance_id": "seleniumhq__selenium-2805", "fixed_tests": {}, "failed_tests": [], "skipped_tests": [], "run_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "test_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "fix_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "f2p_tests": {}, "p2p_tests": {}, "s2p_tests": {}, "n2p_tests": {}}
{"org": "seleniumhq", "repo": "selenium", "number": 2825, "title": "Treat http status 400 and 401 as incomplete new requests", "body": "- [X] By placing an `X` in the preceding checkbox, I verify that I have signed the [Contributor License Agreement](https://github.com/SeleniumHQ/selenium/blob/master/CONTRIBUTING.md#step-6-sign-the-cla)\n", "state": "closed", "base": {"label": "SeleniumHQ:master", "ref": "master", "sha": "497898a0ccfbcb4ac73df2f0c74c1139e1f6e4ef"}, "resolved_issues": [], "fix_patch": "", "test_patch": "diff --git a/java/server/src/org/openqa/grid/internal/TestSession.java b/java/server/src/org/openqa/grid/internal/TestSession.java\nindex 3ec3fbb435..3ec04449f0 100644\n--- a/java/server/src/org/openqa/grid/internal/TestSession.java\n+++ b/java/server/src/org/openqa/grid/internal/TestSession.java\n@@ -234,10 +234,15 @@ public String forward(SeleniumBasedRequest request, HttpServletResponse response\n \n         byte[] consumedNewWebDriverSessionBody = null;\n         if (statusCode != HttpServletResponse.SC_INTERNAL_SERVER_ERROR &&\n-            statusCode != HttpServletResponse.SC_NOT_FOUND) {\n+            statusCode != HttpServletResponse.SC_NOT_FOUND &&\n+            statusCode != HttpServletResponse.SC_BAD_REQUEST &&\n+            statusCode != HttpServletResponse.SC_UNAUTHORIZED) {\n           consumedNewWebDriverSessionBody = updateHubIfNewWebDriverSession(request, proxyResponse);\n         }\n-        if (newSessionRequest && statusCode == HttpServletResponse.SC_INTERNAL_SERVER_ERROR) {\n+        if (newSessionRequest &&\n+            (statusCode == HttpServletResponse.SC_INTERNAL_SERVER_ERROR ||\n+            statusCode == HttpServletResponse.SC_BAD_REQUEST ||\n+            statusCode == HttpServletResponse.SC_UNAUTHORIZED)) {\n           removeIncompleteNewSessionRequest();\n         }\n         if (statusCode == HttpServletResponse.SC_NOT_FOUND) {\n", "instance_id": "seleniumhq__selenium-2825", "fixed_tests": {}, "failed_tests": [], "skipped_tests": [], "run_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "test_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "fix_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "f2p_tests": {}, "p2p_tests": {}, "s2p_tests": {}, "n2p_tests": {}}
{"org": "seleniumhq", "repo": "selenium", "number": 2838, "title": "Throw a friendly exception for old (selenium 2) nodeConfig.json files", "body": "- [X] By placing an `X` in the preceding checkbox, I verify that I have signed the [Contributor License Agreement](https://github.com/SeleniumHQ/selenium/blob/master/CONTRIBUTING.md#step-6-sign-the-cla)\n", "state": "closed", "base": {"label": "SeleniumHQ:master", "ref": "master", "sha": "4e28cd230f47807415f33f4947f80693e3050b6c"}, "resolved_issues": [], "fix_patch": "diff --git a/java/server/src/org/openqa/grid/internal/utils/configuration/GridNodeConfiguration.java b/java/server/src/org/openqa/grid/internal/utils/configuration/GridNodeConfiguration.java\nindex f5fee601b3..7c1cf8ce96 100644\n--- a/java/server/src/org/openqa/grid/internal/utils/configuration/GridNodeConfiguration.java\n+++ b/java/server/src/org/openqa/grid/internal/utils/configuration/GridNodeConfiguration.java\n@@ -68,6 +68,11 @@ public class GridNodeConfiguration extends GridConfiguration {\n   @Expose( serialize = false )\n   String remoteHost;\n \n+  // used to read a Selenium 2.x nodeConfig.json file and throw a friendly exception\n+  @Expose( serialize = false )\n+  @Deprecated\n+  private Object configuration;\n+\n   /*\n    * config parameters which serialize and deserialize to/from json\n    */\n@@ -293,6 +298,14 @@ public static GridNodeConfiguration loadFromJSON(JsonObject json) {\n       GridNodeConfiguration config =\n         builder.excludeFieldsWithoutExposeAnnotation().create().fromJson(json, GridNodeConfiguration.class);\n \n+      if (config.configuration != null) {\n+        // caught below\n+        throw new GridConfigurationException(\"Deprecated -nodeConfig file encountered. Please update\"\n+                                             + \" the file to work with Selenium 3. See https://github.com\"\n+                                             + \"/SeleniumHQ/selenium/wiki/Grid2#configuring-the-nodes-by-json\"\n+                                             + \" for more details.\");\n+}\n+\n       return config;\n     } catch (Throwable e) {\n       throw new GridConfigurationException(\"Error with the JSON of the config : \" + e.getMessage(),\n", "test_patch": "diff --git a/java/server/test/org/openqa/grid/internal/utils/configuration/GridNodeConfigurationTest.java b/java/server/test/org/openqa/grid/internal/utils/configuration/GridNodeConfigurationTest.java\nindex dd6fb2484b..aac39ba1c3 100644\n--- a/java/server/test/org/openqa/grid/internal/utils/configuration/GridNodeConfigurationTest.java\n+++ b/java/server/test/org/openqa/grid/internal/utils/configuration/GridNodeConfigurationTest.java\n@@ -29,6 +29,7 @@\n import com.beust.jcommander.JCommander;\n \n import org.junit.Test;\n+import org.openqa.grid.common.exception.GridConfigurationException;\n import org.openqa.selenium.remote.DesiredCapabilities;\n \n import java.util.Arrays;\n@@ -63,6 +64,20 @@ public void testLoadFromJson() {\n     assertEquals(5L, gnc.capabilities.get(0).getCapability(\"maxInstances\"));\n   }\n \n+  @Test(expected = GridConfigurationException.class)\n+  public void testLoadFromOldJson() {\n+    final String configJson = \"{\"\n+                            + \"\\\"configuration\\\":\"\n+                            + \" {\"\n+                            + \"\\\"host\\\": \\\"dummyhost\\\",\"\n+                            + \"\\\"maxSession\\\": 5,\"\n+                            + \"\\\"port\\\": 1234\"\n+                            + \" }\"\n+                            + \"}\";\n+    JsonObject json = new JsonParser().parse(configJson).getAsJsonObject();\n+    GridNodeConfiguration gnc = GridNodeConfiguration.loadFromJSON(json);\n+  }\n+\n   @Test\n   public void testDefaults() {\n     GridNodeConfiguration gnc = new GridNodeConfiguration();\n", "instance_id": "seleniumhq__selenium-2838", "fixed_tests": {}, "failed_tests": [], "skipped_tests": [], "run_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "test_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "fix_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "f2p_tests": {}, "p2p_tests": {}, "s2p_tests": {}, "n2p_tests": {}}
{"org": "seleniumhq", "repo": "selenium", "number": 2839, "title": "Js - Remove legacy SafariDriver references in lib/test", "body": "- [x] By placing an `X` in the preceding checkbox, I verify that I have signed the [Contributor License Agreement](https://github.com/SeleniumHQ/selenium/blob/master/CONTRIBUTING.md#step-6-sign-the-cla)\n\nI think the legacy SafariDriver references in `lib/test` should be removed since the legacy option has been removed in f7d563822d79255b3b21a2a744285e85272d73d6. Not sure if the `cleanSession` option should also be removed.\n", "state": "closed", "base": {"label": "SeleniumHQ:master", "ref": "master", "sha": "987d1a3bc30e7f02d557a3fd17e8764718f1fc50"}, "resolved_issues": [], "fix_patch": "", "test_patch": "diff --git a/javascript/node/selenium-webdriver/lib/test/index.js b/javascript/node/selenium-webdriver/lib/test/index.js\nindex d702c5fb2b..6df456306b 100644\n--- a/javascript/node/selenium-webdriver/lib/test/index.js\n+++ b/javascript/node/selenium-webdriver/lib/test/index.js\n@@ -31,7 +31,6 @@ var build = require('./build'),\n \n \n const LEGACY_FIREFOX = 'legacy-' + webdriver.Browser.FIREFOX;\n-const LEGACY_SAFARI = 'legacy-' + webdriver.Browser.SAFARI;\n \n \n /**\n@@ -46,8 +45,7 @@ var NATIVE_BROWSERS = [\n   webdriver.Browser.IE,\n   webdriver.Browser.OPERA,\n   webdriver.Browser.PHANTOM_JS,\n-  webdriver.Browser.SAFARI,\n-  LEGACY_SAFARI\n+  webdriver.Browser.SAFARI\n ];\n \n \n@@ -83,8 +81,7 @@ var browsersToTest = (function() {\n       parts[0] = webdriver.Browser.IE;\n     }\n \n-    if (parts[0] === LEGACY_FIREFOX ||\n-      parts[0] === LEGACY_SAFARI) {\n+    if (parts[0] === LEGACY_FIREFOX) {\n       return;\n     }\n \n@@ -175,14 +172,6 @@ function TestEnvironment(browserName, server) {\n         parts[0] = webdriver.Browser.FIREFOX;\n       }\n \n-      if (parts[0] === LEGACY_SAFARI) {\n-        var options = builder.getSafariOptions() || new safari.Options();\n-        options.useLegacyDriver(true);\n-        builder.setSafariOptions(options);\n-\n-        parts[0] = webdriver.Browser.SAFARI;\n-      }\n-\n       builder.forBrowser(parts[0], parts[1], parts[2]);\n       if (server) {\n         builder.usingServer(server.address());\n@@ -243,11 +232,6 @@ function suite(fn, opt_options) {\n               return build.of('//javascript/firefox-driver:webdriver')\n                   .onlyOnce().go();\n             });\n-          } else if (browser === LEGACY_SAFARI) {\n-            testing.before(function() {\n-              return build.of('//javascript/safari-driver:client')\n-                  .onlyOnce().go();\n-            });\n           }\n         }\n \n", "instance_id": "seleniumhq__selenium-2839", "fixed_tests": {}, "failed_tests": [], "skipped_tests": [], "run_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "test_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "fix_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "f2p_tests": {}, "p2p_tests": {}, "s2p_tests": {}, "n2p_tests": {}}
{"org": "seleniumhq", "repo": "selenium", "number": 2882, "title": "New FirefoxDriver ctor precedence logic and moz:firefoxOptions su\u2026", "body": "This change tries to make sense of the keyword arguments accepted by\nFirefoxDriver's constructor in the transition phase between the Firefox\nadd-on driver and the Mozilla supported geckodriver HTTP service.\n\nPrior to this patch, which arguments were consumed and respected varied\ngreatly on whether the `capabilities[\"marionette\"]` key was set to true.\nFollowing this change, the options passed on to geckodriver will\nconsistently come out of firefox.Options.\n\nThe patch implements precedence logic for `capabilities`,\n`firefox_options`, and `firefox_binary`/`firefox_profile`.  They will\npopulate the underlying data model in that order, which means a binary-\nor profile location set in `firefox_options` will override one set in the\n`capabilities` dictionary, and that `firefox_binary` and `firefox_profile`\nwill override both of these.\n\nThe goal is to make it predictable what key is chosen, and to make the\nunderlying data model somewhat easier to understand.  The latter is\nparticularly important because the extension connection used for the old\nFirefox add-on does not accept a binary, profile, or arguments through\ncapabilities since it is the Python bindings themselves that manage the\nlifetime of the browser.\n\nIn the case of geckodriver, which is an external HTTP service, it\nmanages the lifetime and accepts a `moz:firefoxOptions` dictionary that\nis not unlike `chromeOptions` as of version 0.11.0.  Versions prior to\ngeckodriver 0.11.0 accepted `firefox_binary`, `firefox_profile`, and\n`firefox_args` as top-level entries on the capabilities JSON Object.\nThis is no longer supported behaviour by either the Python bindings\nor geckodriver.\n\nFixes https://github.com/mozilla/geckodriver/issues/228.\n", "state": "closed", "base": {"label": "SeleniumHQ:master", "ref": "master", "sha": "fccc93dd490f85f707460ef816866d9625c63b19"}, "resolved_issues": [], "fix_patch": "diff --git a/py/selenium/webdriver/firefox/options.py b/py/selenium/webdriver/firefox/options.py\nindex 23e90aa6f0..ba7b238d8e 100644\n--- a/py/selenium/webdriver/firefox/options.py\n+++ b/py/selenium/webdriver/firefox/options.py\n@@ -16,81 +16,98 @@\n # under the License.\n \n from selenium.common.exceptions import WebDriverException\n+from selenium.webdriver.firefox.firefox_binary import FirefoxBinary\n from selenium.webdriver.firefox.firefox_profile import FirefoxProfile\n \n \n+class Log(object):\n+    def __init__(self):\n+        self.level = None\n+\n+    def to_capabilities(self):\n+        if self.level is not None:\n+            return {\"log\": {\"level\": self.level}}\n+        return {}\n+\n+\n class Options(object):\n+    KEY = \"moz:firefoxOptions\"\n \n     def __init__(self):\n-        self._binary_location = ''\n+        self._binary = None\n         self._profile = None\n         self._arguments = []\n-        self._extension_files = []\n-        self._extensions = []\n-        self._firefox_options = {}\n+        self.log = Log()\n \n     @property\n-    def binary_location(self):\n-        \"\"\"\n-        Returns the location of the binary otherwise an empty string\n+    def binary(self):\n+        \"\"\"Returns the location of the binary.\"\"\"\n+        return self._binary\n+\n+    @binary.setter\n+    def binary(self, new_binary):\n+        \"\"\"Sets location of the browser binary, either by string or\n+        ``FirefoxBinary`` instance.\n+\n         \"\"\"\n-        return self._binary_location\n+        if not isinstance(new_binary, FirefoxBinary):\n+            new_binary = FirefoxBinary(new_binary)\n+        self._binary = new_binary\n \n-    @binary_location.setter\n+    @property\n+    def binary_location(self):\n+        return self.binary\n+\n+    @binary.setter\n     def binary_location(self, value):\n-        \"\"\"\n-        Allows you to set where the firefox binary lives\n+        self.binary = value\n+\n+    @property\n+    def profile(self):\n+        \"\"\"Returns the Firefox profile to use.\"\"\"\n+        return self._profile\n+\n+    @profile.setter\n+    def profile(self, new_profile):\n+        \"\"\"Sets location of the browser profile to use, either by string\n+        or ``FirefoxProfile``.\n \n-        :Args:\n-         - value: path to the firefox binary\n         \"\"\"\n-        self._binary_location = value\n+        if not isinstance(new_profile, FirefoxProfile):\n+            new_profile = FirefoxProfile(new_profile)\n+        self._profile = new_profile\n \n     @property\n     def arguments(self):\n-        \"\"\"\n-        Returns a list of arguments needed for the browser\n-        \"\"\"\n+        \"\"\"Returns a list of browser process arguments.\"\"\"\n         return self._arguments\n \n     def add_argument(self, argument):\n-        \"\"\"\n-        Adds an argument to the list\n-\n-        :Args:\n-         - Sets the arguments\n-        \"\"\"\n-        if argument:\n-            self._arguments.append(argument)\n-        else:\n-            raise ValueError(\"argument can not be null\")\n+        \"\"\"Add argument to be used for the browser process.\"\"\"\n+        if argument is None:\n+            raise ValueError()\n+        self._arguments.append(argument)\n \n-    @property\n-    def profile(self):\n-        \"\"\"\n-            Returns a FirefoxProfile object if one has been set before else None\n+    def to_capabilities(self):\n+        \"\"\"Marshals the Firefox options to a `moz:firefoxOptions`\n+        object.\n \n         \"\"\"\n-        return self._profile\n+        # This intentionally looks at the internal properties\n+        # so if a binary or profile has _not_ been set,\n+        # it will defer to geckodriver to find the system Firefox\n+        # and generate a fresh profile.\n+        opts = {}\n \n-    @profile.setter\n-    def profile(self, value):\n-        if not isinstance(value, FirefoxProfile):\n-            raise WebDriverException(\"When passing in a value to profile,\"\n-                                     \" please pass in a FirefoxProfile object.\")\n-        self._profile = value\n+        if self._binary is not None:\n+            opts[\"binary\"] = self._binary._start_cmd\n+        if self._profile is not None:\n+            opts[\"profile\"] = self._profile.encoded\n+        if len(self._arguments) > 0:\n+            opts[\"args\"] = self._arguments\n \n-    def to_capabilities(self):\n-        \"\"\"\n-            Creates a capabilities with all the options that have been set and\n+        opts.update(self.log.to_capabilities())\n \n-            returns a dictionary with everything\n-        \"\"\"\n-        desired = {}\n-        if self.binary_location:\n-            desired[\"binary\"] = self.binary_location\n-        if self._profile:\n-            desired[\"firefox_profile\"] = self._profile.encoded\n-        desired[\"args\"] = self.arguments\n-        capabilities = {\"desiredCapabilities\": desired}\n-        return capabilities\n+        if len(opts) > 0:\n+            return {Options.KEY: opts}\n+        return {}\n\ndiff --git a/py/selenium/webdriver/firefox/service.py b/py/selenium/webdriver/firefox/service.py\nindex 1334bbd316..3f9bf92e0d 100644\n--- a/py/selenium/webdriver/firefox/service.py\n+++ b/py/selenium/webdriver/firefox/service.py\n@@ -22,35 +22,33 @@ class Service(service.Service):\n     \"\"\"Object that manages the starting and stopping of the\n     GeckoDriver.\"\"\"\n \n-    def __init__(self, executable_path, firefox_binary=None, port=0,\n-                 service_args=None, log_path=\"geckodriver.log\", env=None):\n+    def __init__(self, executable_path, port=0, service_args=None,\n+            log_path=\"geckodriver.log\", env=None):\n         \"\"\"Creates a new instance of the GeckoDriver remote service proxy.\n \n         GeckoDriver provides a HTTP interface speaking the W3C WebDriver\n         protocol to Marionette.\n \n         :param executable_path: Path to the GeckoDriver binary.\n-        :param firefox_binary: Optional path to the Firefox binary.\n         :param port: Run the remote service on a specified port.\n-            Defaults to 0.\n+            Defaults to 0, which binds to a random open port of the\n+            system's choosing.\n         :param service_args: Optional list of arguments to pass to the\n             GeckoDriver binary.\n         :param log_path: Optional path for the GeckoDriver to log to.\n             Defaults to _geckodriver.log_ in the current working directory.\n         :param env: Optional dictionary of output variables to expose\n             in the services' environment.\n+\n         \"\"\"\n         if log_path:\n             log_file = open(log_path, \"a+\")\n \n         service.Service.__init__(\n             self, executable_path, port=port, log_file=log_file, env=env)\n-        self.firefox_binary = firefox_binary\n         self.service_args = service_args or []\n \n     def command_line_args(self):\n-        if self.firefox_binary:\n-            return [\"-b\", self.firefox_binary, \"--port\", \"%d\" % self.port]\n         return [\"--port\", \"%d\" % self.port]\n \n     def send_remote_shutdown_command(self):\n\ndiff --git a/py/selenium/webdriver/firefox/webdriver.py b/py/selenium/webdriver/firefox/webdriver.py\nindex 4368afe299..41346ff7e4 100644\n--- a/py/selenium/webdriver/firefox/webdriver.py\n+++ b/py/selenium/webdriver/firefox/webdriver.py\n@@ -28,13 +28,14 @@\n import shutil\n import socket\n import sys\n+import types\n \n+from .extension_connection import ExtensionConnection\n from .firefox_binary import FirefoxBinary\n+from .firefox_profile import FirefoxProfile\n from .options import Options\n from .remote_connection import FirefoxRemoteConnection\n from selenium.webdriver.common.desired_capabilities import DesiredCapabilities\n-from selenium.webdriver.firefox.extension_connection import ExtensionConnection\n-from selenium.webdriver.firefox.firefox_profile import FirefoxProfile\n from selenium.webdriver.remote.webdriver import WebDriver as RemoteWebDriver\n from .service import Service\n from .webelement import FirefoxWebElement\n@@ -47,35 +48,113 @@ class WebDriver(RemoteWebDriver):\n \n     _web_element_cls = FirefoxWebElement\n \n-    def __init__(self, firefox_profile=None, firefox_binary=None, timeout=30,\n-                 capabilities=None, proxy=None, executable_path=\"geckodriver\", firefox_options=None, log_path=\"geckodriver.log\"):\n-        capabilities = capabilities or DesiredCapabilities.FIREFOX.copy()\n-\n-        self.profile = firefox_profile or FirefoxProfile()\n-        self.profile.native_events_enabled = (\n-            self.NATIVE_EVENTS_ALLOWED and self.profile.native_events_enabled)\n-\n-        self.binary = firefox_binary or capabilities.get(\"binary\", FirefoxBinary())\n-\n-        self.options = firefox_options or Options()\n-        self.options.binary_location = self.binary if isinstance(self.binary, basestring) else self.binary._start_cmd\n-        self.options.profile = self.profile\n-        capabilities.update(self.options.to_capabilities())\n-\n-        # marionette\n+    def __init__(self, firefox_profile=None, firefox_binary=None,\n+                 timeout=30, capabilities=None, proxy=None,\n+                 executable_path=\"geckodriver\", firefox_options=None,\n+                 log_path=\"geckodriver.log\"):\n+        \"\"\"Starts a new local session of Firefox.\n+\n+        Based on the combination and specificity of the various keyword\n+        arguments, a capabilities dictionary will be constructed that\n+        is passed to the remote end.\n+\n+        The keyword arguments given to this constructor are helpers to\n+        more easily allow Firefox WebDriver sessions to be customised\n+        with different options.  They are mapped on to a capabilities\n+        dictionary that is passed on to the remote end.\n+\n+        As some of the options, such as `firefox_profile` and\n+        `firefox_options.profile` are mutually exclusive, precedence is\n+        given from how specific the setting is.  `capabilities` is the\n+        least specific keyword argument, followed by `firefox_options`,\n+        followed by `firefox_binary` and `firefox_profile`.\n+\n+        In practice this means that if `firefox_profile` and\n+        `firefox_options.profile` are both set, the selected profile\n+        instance will always come from the most specific variable.\n+        In this case that would be `firefox_profile`.  This will result in\n+        `firefox_options.profile` to be ignored because it is considered\n+        a less specific setting than the top-level `firefox_profile`\n+        keyword argument.  Similarily, if you had specified a\n+        `capabilities[\"firefoxOptions\"][\"profile\"]` Base64 string,\n+        this would rank below `firefox_options.profile`.\n+\n+        :param firefox_profile: Instance of ``FirefoxProfile`` object\n+            or a string.  If undefined, a fresh profile will be created\n+            in a temporary location on the system.\n+        :param firefox_binary: Instance of ``FirefoxBinary`` or full\n+            path to the Firefox binary.  If undefined, the system default\n+            Firefox installation will  be used.\n+        :param timeout: Time to wait for Firefox to launch when using\n+            the extension connection.\n+        :param capabilities: Dictionary of desired capabilities.\n+        :param proxy: The proxy settings to us when communicating with\n+            Firefox via the extension connection.\n+        :param executable_path: Full path to override which geckodriver\n+            binary to use for Firefox 47.0.1 and greater, which\n+            defaults to picking up the binary from the system path.\n+        :param firefox_options: Instance of ``options.Options``.\n+        :param log_path: Where to log information from the driver.\n+\n+        \"\"\"\n+        self.binary = None\n+        self.profile = None\n+\n+        if capabilities is None:\n+            capabilities = DesiredCapabilities.FIREFOX.copy()\n+        if firefox_options is None:\n+            firefox_options = Options()\n+\n+        if capabilities.get(\"binary\"):\n+            self.binary = capabilities[\"binary\"]\n+\n+        # firefox_options overrides capabilities\n+        if firefox_options is not None:\n+            if firefox_options.binary is not None:\n+                self.binary = firefox_options.binary\n+            if firefox_options.profile is not None:\n+                self.profile = firefox_options.profile\n+\n+        # firefox_binary and firefox_profile\n+        # override firefox_options\n+        if firefox_binary is not None:\n+            if isinstance(firefox_binary, types.StringTypes):\n+                firefox_binary = FirefoxBinary(firefox_binary)\n+            self.binary = firefox_binary\n+            firefox_options.binary = firefox_binary\n+        if firefox_profile is not None:\n+            if isinstance(firefox_profile, types.StringTypes):\n+                firefox_profile = FirefoxProfile(firefox_profile)\n+            self.profile = firefox_profile\n+            firefox_options.profile = firefox_profile\n+\n+        # W3C remote\n+        # TODO(ato): Perform conformance negotiation\n         if capabilities.get(\"marionette\"):\n-            self.service = Service(executable_path, firefox_binary=self.options.binary_location, log_path=log_path)\n+            self.service = Service(executable_path, log_path=log_path)\n             self.service.start()\n \n+            capabilities.update(firefox_options.to_capabilities())\n+\n             executor = FirefoxRemoteConnection(\n                 remote_server_addr=self.service.service_url)\n             RemoteWebDriver.__init__(\n                 self,\n                 command_executor=executor,\n                 desired_capabilities=capabilities,\n                 keep_alive=True)\n+\n+        # Selenium remote\n         else:\n-            # Oh well... sometimes the old way is the best way.\n+            if self.binary is None:\n+                self.binary = FirefoxBinary()\n+            if self.profile is None:\n+                self.profile = FirefoxProfile()\n+\n+            # disable native events if globally disabled\n+            self.profile.native_events_enabled = (\n+                self.NATIVE_EVENTS_ALLOWED and self.profile.native_events_enabled)\n+\n             if proxy is not None:\n                 proxy.add_to_capabilities(capabilities)\n \n@@ -112,5 +191,7 @@ def quit(self):\n     def firefox_profile(self):\n         return self.profile\n \n+    # Extension commands:\n+\n     def set_context(self, context):\n         self.execute(\"SET_CONTEXT\", {\"context\": context})\n", "test_patch": "diff --git a/py/test/selenium/webdriver/marionette/mn_options_tests.py b/py/test/selenium/webdriver/marionette/mn_options_tests.py\nindex ae9b68bd32..cc50ff1133 100644\n--- a/py/test/selenium/webdriver/marionette/mn_options_tests.py\n+++ b/py/test/selenium/webdriver/marionette/mn_options_tests.py\n@@ -15,25 +15,96 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-\n import pytest\n+import shutil\n+import tempfile\n+import types\n \n+from selenium.webdriver.firefox.firefox_binary import FirefoxBinary\n+from selenium.webdriver.firefox.firefox_profile import FirefoxProfile\n+from selenium.webdriver.firefox.options import Log, Options\n from selenium.webdriver import Firefox\n-from selenium.webdriver.firefox.options import Options\n \n \n @pytest.fixture\n def driver(capabilities):\n-    options = Options()\n-    driver = Firefox(\n-        capabilities=capabilities,\n-        firefox_options=options)\n+    driver = Firefox(firefox_options=Options(), capabilities=capabilities)\n     yield driver\n     driver.quit()\n \n \n-class TestOptions(object):\n-\n+class TestIntegration(object):\n     def test_we_can_pass_options(self, driver, pages):\n-        pages.load('formPage.html')\n+        pages.load(\"formPage.html\")\n         driver.find_element_by_id(\"cheese\")\n+\n+\n+class TestUnit(object):\n+    def test_ctor(self):\n+        opts = Options()\n+        assert opts._binary is None\n+        assert opts._profile is None\n+        assert opts._arguments == []\n+        assert isinstance(opts.log, Log)\n+\n+    def test_binary(self):\n+        opts = Options()\n+        assert opts.binary is None\n+\n+        other_binary = FirefoxBinary()\n+        assert other_binary != opts.binary\n+        opts.binary = other_binary\n+        assert other_binary == opts.binary\n+\n+        path = \"/path/to/binary\"\n+        opts.binary = path\n+        assert isinstance(opts.binary, FirefoxBinary)\n+        assert opts.binary._start_cmd == path\n+\n+    def test_profile(self, tmpdir_factory):\n+        opts = Options()\n+        assert opts.profile is None\n+\n+        other_profile = FirefoxProfile()\n+        assert other_profile != opts.profile\n+        opts.profile = other_profile\n+        assert other_profile == opts.profile\n+\n+        opts.profile = str(tmpdir_factory.mktemp(\"profile\"))\n+        assert isinstance(opts.profile, FirefoxProfile)\n+\n+    def test_arguments(self):\n+        opts = Options()\n+        assert len(opts.arguments) == 0\n+\n+        opts.add_argument(\"--foo\")\n+        assert len(opts.arguments) == 1\n+        opts.arguments.append(\"--bar\")\n+        assert len(opts.arguments) == 2\n+        assert opts.arguments == [\"--foo\", \"--bar\"]\n+\n+    def test_to_capabilities(self):\n+        opts = Options()\n+        assert opts.to_capabilities() == {}\n+\n+        profile = FirefoxProfile()\n+        opts.profile = profile\n+        caps = opts.to_capabilities()\n+        assert \"moz:firefoxOptions\" in caps\n+        assert \"profile\" in caps[\"moz:firefoxOptions\"]\n+        assert isinstance(caps[\"moz:firefoxOptions\"][\"profile\"], types.StringTypes)\n+        assert caps[\"moz:firefoxOptions\"][\"profile\"] == profile.encoded\n+\n+        opts.add_argument(\"--foo\")\n+        caps = opts.to_capabilities()\n+        assert \"moz:firefoxOptions\" in caps\n+        assert \"args\" in caps[\"moz:firefoxOptions\"]\n+        assert caps[\"moz:firefoxOptions\"][\"args\"] == [\"--foo\"]\n+\n+        binary = FirefoxBinary()\n+        opts.binary = binary\n+        caps = opts.to_capabilities()\n+        assert \"moz:firefoxOptions\" in caps\n+        assert \"binary\" in caps[\"moz:firefoxOptions\"]\n+        assert isinstance(caps[\"moz:firefoxOptions\"][\"binary\"], types.StringTypes)\n+        assert caps[\"moz:firefoxOptions\"][\"binary\"] == binary._start_cmd\n", "instance_id": "seleniumhq__selenium-2882", "fixed_tests": {}, "failed_tests": [], "skipped_tests": [], "run_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "test_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "fix_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "f2p_tests": {}, "p2p_tests": {}, "s2p_tests": {}, "n2p_tests": {}}
{"org": "seleniumhq", "repo": "selenium", "number": 2936, "title": "Fix getting ip for python3 tests", "body": "If I use python3 for running tests it fails with the following error:\n\n```\nTraceback (most recent call last):\n  ...\n  File \"/selenium/py/test/selenium/webdriver/common/network.py\", line 45, in get_lan_ip\n    ip = get_interface_ip(ifname)\n  File \"/selenium/py/test/selenium/webdriver/common/network.py\", line 31, in get_interface_ip\n    struct.pack('256s', ifname[:15])\nstruct.error: argument for 's' must be a bytes object\n```\n- [X] By placing an `X` in the preceding checkbox, I verify that I have signed the [Contributor License Agreement](https://github.com/SeleniumHQ/selenium/blob/master/CONTRIBUTING.md#step-6-sign-the-cla)\n", "state": "closed", "base": {"label": "SeleniumHQ:master", "ref": "master", "sha": "d4933ff605ba24cf84c37efadbe7132d92bb3f84"}, "resolved_issues": [], "fix_patch": "", "test_patch": "diff --git a/py/test/selenium/webdriver/common/network.py b/py/test/selenium/webdriver/common/network.py\nindex 006033b270..decfd4bd2c 100644\n--- a/py/test/selenium/webdriver/common/network.py\n+++ b/py/test/selenium/webdriver/common/network.py\n@@ -24,11 +24,17 @@\n     import struct\n \n     def get_interface_ip(ifname):\n+        def _bytes(value, encoding):\n+            try:\n+                return bytes(value, encoding) # Python 3\n+            except TypeError:\n+                return value # Python 2\n+\n         sckt = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n         return socket.inet_ntoa(fcntl.ioctl(\n             sckt.fileno(),\n             0x8915,  # SIOCGIFADDR\n-            struct.pack('256s', ifname[:15])\n+            struct.pack('256s', _bytes(ifname[:15], 'utf-8'))\n         )[20:24])\n \n \n", "instance_id": "seleniumhq__selenium-2936", "fixed_tests": {}, "failed_tests": [], "skipped_tests": [], "run_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "test_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "fix_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "f2p_tests": {}, "p2p_tests": {}, "s2p_tests": {}, "n2p_tests": {}}
{"org": "seleniumhq", "repo": "selenium", "number": 3054, "title": "[java] Alert Listener implementation", "body": "- [x] By placing an `X` in the preceding checkbox, I verify that I have signed the [Contributor License Agreement](https://github.com/SeleniumHQ/selenium/blob/master/CONTRIBUTING.md#step-6-sign-the-cla)\r\n\r\nAlert Listener Implementation\r\n```\r\nbeforeAlertAccept\r\nafterAlertAccept\r\nafterAlertDismiss\r\nbeforeAlertDismiss\r\n```\r\n\r\n@lukeis please review\r\n", "state": "closed", "base": {"label": "SeleniumHQ:master", "ref": "master", "sha": "4deddd29cd4dcbdb928c85537e8bc2678e1dfe76"}, "resolved_issues": [], "fix_patch": "diff --git a/java/client/src/org/openqa/selenium/support/events/AbstractWebDriverEventListener.java b/java/client/src/org/openqa/selenium/support/events/AbstractWebDriverEventListener.java\nindex 6a66f6cbc1..850ce49811 100644\n--- a/java/client/src/org/openqa/selenium/support/events/AbstractWebDriverEventListener.java\n+++ b/java/client/src/org/openqa/selenium/support/events/AbstractWebDriverEventListener.java\n@@ -27,6 +27,22 @@\n  */\n public abstract class AbstractWebDriverEventListener implements WebDriverEventListener {\n \n+  public void beforeAlertAccept(WebDriver driver) {\n+    // Do nothing.\n+  }\n+\n+  public void afterAlertAccept(WebDriver driver) {\n+    // Do nothing.\n+  }\n+\n+  public void afterAlertDismiss(WebDriver driver) {\n+    // Do nothing.\n+  }\n+\n+  public void beforeAlertDismiss(WebDriver driver) {\n+    // Do nothing.\n+  }\n+\n   public void beforeNavigateTo(String url, WebDriver driver) {\n     // Do nothing.\n   }\n\ndiff --git a/java/client/src/org/openqa/selenium/support/events/EventFiringWebDriver.java b/java/client/src/org/openqa/selenium/support/events/EventFiringWebDriver.java\nindex 9a8e33e841..28f9be4462 100644\n--- a/java/client/src/org/openqa/selenium/support/events/EventFiringWebDriver.java\n+++ b/java/client/src/org/openqa/selenium/support/events/EventFiringWebDriver.java\n@@ -40,6 +40,7 @@\n import org.openqa.selenium.internal.WrapsDriver;\n import org.openqa.selenium.internal.WrapsElement;\n import org.openqa.selenium.logging.Logs;\n+import org.openqa.selenium.security.Credentials;\n import org.openqa.selenium.support.events.internal.EventFiringKeyboard;\n import org.openqa.selenium.support.events.internal.EventFiringMouse;\n import org.openqa.selenium.support.events.internal.EventFiringTouch;\n@@ -608,7 +609,7 @@ public WebElement activeElement() {\n     }\n \n     public Alert alert() {\n-      return targetLocator.alert();\n+      return new EventFiringAlert(this.targetLocator.alert());\n     }\n   }\n \n@@ -644,4 +645,40 @@ public void fullscreen() {\n       window.fullscreen();\n     }\n   }\n+\n+  private class EventFiringAlert implements Alert {\n+    private final Alert alert;\n+\n+    private EventFiringAlert(Alert alert) {\n+      this.alert = alert;\n+    }\n+\n+    public void dismiss() {\n+      dispatcher.beforeAlertDismiss(driver);\n+      alert.dismiss();\n+      dispatcher.afterAlertDismiss(driver);\n+    }\n+\n+    public void accept() {\n+      dispatcher.beforeAlertAccept(driver);\n+      alert.accept();\n+      dispatcher.afterAlertAccept(driver);\n+    }\n+\n+    public String getText() {\n+      return alert.getText();\n+    }\n+\n+    public void sendKeys(String keysToSend) {\n+      alert.sendKeys(keysToSend);\n+    }\n+\n+    public void setCredentials(Credentials credentials) {\n+      alert.setCredentials(credentials);\n+    }\n+\n+    public void authenticateUsing(Credentials credentials) {\n+      alert.authenticateUsing(credentials);\n+    }\n+  }\n }\n\ndiff --git a/java/client/src/org/openqa/selenium/support/events/WebDriverEventListener.java b/java/client/src/org/openqa/selenium/support/events/WebDriverEventListener.java\nindex deb63a3461..93fe54ec51 100644\n--- a/java/client/src/org/openqa/selenium/support/events/WebDriverEventListener.java\n+++ b/java/client/src/org/openqa/selenium/support/events/WebDriverEventListener.java\n@@ -17,12 +17,41 @@\n \n package org.openqa.selenium.support.events;\n \n+import org.openqa.selenium.Alert;\n import org.openqa.selenium.By;\n import org.openqa.selenium.WebDriver;\n import org.openqa.selenium.WebElement;\n \n public interface WebDriverEventListener {\n \n+  /**\n+   * This action will be performed each time before {@link Alert#accept()}\n+   *\n+   * @param driver WebDriver\n+   */\n+  void beforeAlertAccept(WebDriver driver);\n+\n+  /**\n+   * This action will be performed each time after {@link Alert#accept()}\n+   *\n+   * @param driver WebDriver\n+   */\n+  void afterAlertAccept(WebDriver driver);\n+\n+  /**\n+   * This action will be performed each time before {@link Alert#dismiss()}\n+   *\n+   * @param driver WebDriver\n+   */\n+  void afterAlertDismiss(WebDriver driver);\n+\n+  /**\n+   * This action will be performed each time after {@link Alert#dismiss()}\n+   *\n+   * @param driver WebDriver\n+   */\n+  void beforeAlertDismiss(WebDriver driver);\n+\n   /**\n    * Called before {@link org.openqa.selenium.WebDriver#get get(String url)} respectively\n    * {@link org.openqa.selenium.WebDriver.Navigation#to navigate().to(String url)}.\n", "test_patch": "diff --git a/java/client/test/org/openqa/selenium/support/events/EventFiringWebDriverTest.java b/java/client/test/org/openqa/selenium/support/events/EventFiringWebDriverTest.java\nindex 52d64129c5..51aacd8558 100644\n--- a/java/client/test/org/openqa/selenium/support/events/EventFiringWebDriverTest.java\n+++ b/java/client/test/org/openqa/selenium/support/events/EventFiringWebDriverTest.java\n@@ -33,6 +33,7 @@\n import org.junit.runners.JUnit4;\n import org.mockito.InOrder;\n import org.mockito.Mockito;\n+import org.openqa.selenium.Alert;\n import org.openqa.selenium.By;\n import org.openqa.selenium.JavascriptExecutor;\n import org.openqa.selenium.NoSuchElementException;\n@@ -53,6 +54,55 @@\n @RunWith(JUnit4.class)\n public class EventFiringWebDriverTest {\n \n+  @Test\n+  public void alertEvents() {\n+    final WebDriver mockedDriver = mock(WebDriver.class);\n+    final Alert mockedAlert = mock(Alert.class);\n+    final WebDriver.TargetLocator mockedTargetLocator = mock(WebDriver.TargetLocator.class);\n+    final StringBuilder log = new StringBuilder();\n+\n+    when(mockedDriver.switchTo()).thenReturn(mockedTargetLocator);\n+    when(mockedTargetLocator.alert()).thenReturn(mockedAlert);\n+\n+    EventFiringWebDriver testedDriver =\n+      new EventFiringWebDriver(mockedDriver).register(new AbstractWebDriverEventListener() {\n+        @Override\n+        public void beforeAlertAccept(WebDriver driver) {\n+          log.append(\"beforeAlertAccept\\n\");\n+        }\n+\n+        @Override\n+        public void afterAlertAccept(WebDriver driver) {\n+          log.append(\"afterAlertAccept\\n\");\n+        }\n+\n+        @Override\n+        public void beforeAlertDismiss(WebDriver driver) {\n+          log.append(\"beforeAlertDismiss\\n\");\n+        }\n+\n+        @Override\n+        public void afterAlertDismiss(WebDriver driver) {\n+          log.append(\"afterAlertDismiss\\n\");\n+        }\n+      });\n+\n+    testedDriver.switchTo().alert().accept();\n+    testedDriver.switchTo().alert().dismiss();\n+\n+    assertEquals(\n+      \"beforeAlertAccept\\n\" +\n+        \"afterAlertAccept\\n\" +\n+        \"beforeAlertDismiss\\n\" +\n+        \"afterAlertDismiss\\n\",\n+      log.toString());\n+\n+    InOrder order = Mockito.inOrder(mockedDriver, mockedAlert);\n+    order.verify(mockedAlert).accept();\n+    order.verify(mockedAlert).dismiss();\n+    order.verifyNoMoreInteractions();\n+  }\n+\n   @Test\n   public void navigationEvents() {\n     final WebDriver mockedDriver = mock(WebDriver.class);\n", "instance_id": "seleniumhq__selenium-3054", "fixed_tests": {}, "failed_tests": [], "skipped_tests": [], "run_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "test_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "fix_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "f2p_tests": {}, "p2p_tests": {}, "s2p_tests": {}, "n2p_tests": {}}
